// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by internal/numeric.tmpl, DO NOT EDIT.

package field

import (
	"errors"
	"reflect"

	"entgo.io/ent/schema"
)

//go:generate go run internal/gen.go

// Int returns a new Field with type int.
func Int(name string) *IntBuilder {
	return &IntBuilder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeInt},
	}}
}

// Uint returns a new Field with type uint.
func Uint(name string) *UintBuilder {
	return &UintBuilder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeUint},
	}}
}

// Int8 returns a new Field with type int8.
func Int8(name string) *Int8Builder {
	return &Int8Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeInt8},
	}}
}

// Int16 returns a new Field with type int16.
func Int16(name string) *Int16Builder {
	return &Int16Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeInt16},
	}}
}

// Int32 returns a new Field with type int32.
func Int32(name string) *Int32Builder {
	return &Int32Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeInt32},
	}}
}

// Int64 returns a new Field with type int64.
func Int64(name string) *Int64Builder {
	return &Int64Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeInt64},
	}}
}

// Uint8 returns a new Field with type uint8.
func Uint8(name string) *Uint8Builder {
	return &Uint8Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeUint8},
	}}
}

// Uint16 returns a new Field with type uint16.
func Uint16(name string) *Uint16Builder {
	return &Uint16Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeUint16},
	}}
}

// Uint32 returns a new Field with type uint32.
func Uint32(name string) *Uint32Builder {
	return &Uint32Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeUint32},
	}}
}

// Uint64 returns a new Field with type uint64.
func Uint64(name string) *Uint64Builder {
	return &Uint64Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeUint64},
	}}
}

// Float returns a new Field with type float64.
func Float(name string) *Float64Builder {
	return &Float64Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeFloat64},
	}}
}

// Float32 returns a new Field with type float32.
func Float32(name string) *Float32Builder {
	return &Float32Builder{&Descriptor{
		Name: name,
		Info: &TypeInfo{Type: TypeFloat32},
	}}
}

// IntBuilder is the builder for int field.
type IntBuilder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *IntBuilder) Unique() *IntBuilder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *IntBuilder) Range(i, j int) *IntBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v int) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *IntBuilder) Min(i int) *IntBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v int) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *IntBuilder) Max(i int) *IntBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v int) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *IntBuilder) Positive() *IntBuilder {
	return b.Min(1)
}

// Negative adds a maximum value validator with the value of -1. Operation fails if the validator fails.
func (b *IntBuilder) Negative() *IntBuilder {
	return b.Max(-1)
}

// NonNegative adds a minimum value validator with the value of 0. Operation fails if the validator fails.
func (b *IntBuilder) NonNegative() *IntBuilder {
	return b.Min(0)
}

// Default sets the default value of the field.
func (b *IntBuilder) Default(i int) *IntBuilder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *IntBuilder) DefaultFunc(fn any) *IntBuilder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Int("int").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *IntBuilder) UpdateDefault(fn any) *IntBuilder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *IntBuilder) Nillable() *IntBuilder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *IntBuilder) Comment(c string) *IntBuilder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *IntBuilder) Optional() *IntBuilder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *IntBuilder) Immutable() *IntBuilder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *IntBuilder) StructTag(s string) *IntBuilder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *IntBuilder) Validate(fn func(int) error) *IntBuilder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *IntBuilder) StorageKey(key string) *IntBuilder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for int.
//
//	field.Int("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *IntBuilder) SchemaType(types map[string]string) *IntBuilder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Int("int").
//		GoType(pkg.Int(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *IntBuilder) GoType(typ any) *IntBuilder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *IntBuilder) ValueScanner(vs any) *IntBuilder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Int("int").
//		Annotations(entgql.OrderField("INT"))
func (b *IntBuilder) Annotations(annotations ...schema.Annotation) *IntBuilder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *IntBuilder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(intType)
	}
	b.desc.checkGoType(intType)
	return b.desc
}

// UintBuilder is the builder for uint field.
type UintBuilder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *UintBuilder) Unique() *UintBuilder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *UintBuilder) Range(i, j uint) *UintBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v uint) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *UintBuilder) Min(i uint) *UintBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v uint) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *UintBuilder) Max(i uint) *UintBuilder {
	b.desc.Validators = append(b.desc.Validators, func(v uint) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *UintBuilder) Positive() *UintBuilder {
	return b.Min(1)
}

// Default sets the default value of the field.
func (b *UintBuilder) Default(i uint) *UintBuilder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *UintBuilder) DefaultFunc(fn any) *UintBuilder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Uint("uint").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *UintBuilder) UpdateDefault(fn any) *UintBuilder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *UintBuilder) Nillable() *UintBuilder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *UintBuilder) Comment(c string) *UintBuilder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *UintBuilder) Optional() *UintBuilder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *UintBuilder) Immutable() *UintBuilder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *UintBuilder) StructTag(s string) *UintBuilder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *UintBuilder) Validate(fn func(uint) error) *UintBuilder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *UintBuilder) StorageKey(key string) *UintBuilder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for uint.
//
//	field.Uint("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *UintBuilder) SchemaType(types map[string]string) *UintBuilder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Uint("uint").
//		GoType(pkg.Uint(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *UintBuilder) GoType(typ any) *UintBuilder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *UintBuilder) ValueScanner(vs any) *UintBuilder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Uint("uint").
//		Annotations(entgql.OrderField("UINT"))
func (b *UintBuilder) Annotations(annotations ...schema.Annotation) *UintBuilder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *UintBuilder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(uintType)
	}
	b.desc.checkGoType(uintType)
	return b.desc
}

// Int8Builder is the builder for int8 field.
type Int8Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Int8Builder) Unique() *Int8Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Int8Builder) Range(i, j int8) *Int8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int8) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Int8Builder) Min(i int8) *Int8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int8) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Int8Builder) Max(i int8) *Int8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int8) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Int8Builder) Positive() *Int8Builder {
	return b.Min(1)
}

// Negative adds a maximum value validator with the value of -1. Operation fails if the validator fails.
func (b *Int8Builder) Negative() *Int8Builder {
	return b.Max(-1)
}

// NonNegative adds a minimum value validator with the value of 0. Operation fails if the validator fails.
func (b *Int8Builder) NonNegative() *Int8Builder {
	return b.Min(0)
}

// Default sets the default value of the field.
func (b *Int8Builder) Default(i int8) *Int8Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Int8Builder) DefaultFunc(fn any) *Int8Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Int8("int8").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Int8Builder) UpdateDefault(fn any) *Int8Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Int8Builder) Nillable() *Int8Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Int8Builder) Comment(c string) *Int8Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Int8Builder) Optional() *Int8Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Int8Builder) Immutable() *Int8Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Int8Builder) StructTag(s string) *Int8Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Int8Builder) Validate(fn func(int8) error) *Int8Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Int8Builder) StorageKey(key string) *Int8Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for int8.
//
//	field.Int8("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Int8Builder) SchemaType(types map[string]string) *Int8Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Int8("int8").
//		GoType(pkg.Int8(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Int8Builder) GoType(typ any) *Int8Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Int8Builder) ValueScanner(vs any) *Int8Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Int8("int8").
//		Annotations(entgql.OrderField("INT8"))
func (b *Int8Builder) Annotations(annotations ...schema.Annotation) *Int8Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Int8Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(int8Type)
	}
	b.desc.checkGoType(int8Type)
	return b.desc
}

// Int16Builder is the builder for int16 field.
type Int16Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Int16Builder) Unique() *Int16Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Int16Builder) Range(i, j int16) *Int16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int16) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Int16Builder) Min(i int16) *Int16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int16) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Int16Builder) Max(i int16) *Int16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int16) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Int16Builder) Positive() *Int16Builder {
	return b.Min(1)
}

// Negative adds a maximum value validator with the value of -1. Operation fails if the validator fails.
func (b *Int16Builder) Negative() *Int16Builder {
	return b.Max(-1)
}

// NonNegative adds a minimum value validator with the value of 0. Operation fails if the validator fails.
func (b *Int16Builder) NonNegative() *Int16Builder {
	return b.Min(0)
}

// Default sets the default value of the field.
func (b *Int16Builder) Default(i int16) *Int16Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Int16Builder) DefaultFunc(fn any) *Int16Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Int16("int16").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Int16Builder) UpdateDefault(fn any) *Int16Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Int16Builder) Nillable() *Int16Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Int16Builder) Comment(c string) *Int16Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Int16Builder) Optional() *Int16Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Int16Builder) Immutable() *Int16Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Int16Builder) StructTag(s string) *Int16Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Int16Builder) Validate(fn func(int16) error) *Int16Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Int16Builder) StorageKey(key string) *Int16Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for int16.
//
//	field.Int16("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Int16Builder) SchemaType(types map[string]string) *Int16Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Int16("int16").
//		GoType(pkg.Int16(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Int16Builder) GoType(typ any) *Int16Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Int16Builder) ValueScanner(vs any) *Int16Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Int16("int16").
//		Annotations(entgql.OrderField("INT16"))
func (b *Int16Builder) Annotations(annotations ...schema.Annotation) *Int16Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Int16Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(int16Type)
	}
	b.desc.checkGoType(int16Type)
	return b.desc
}

// Int32Builder is the builder for int32 field.
type Int32Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Int32Builder) Unique() *Int32Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Int32Builder) Range(i, j int32) *Int32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int32) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Int32Builder) Min(i int32) *Int32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int32) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Int32Builder) Max(i int32) *Int32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int32) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Int32Builder) Positive() *Int32Builder {
	return b.Min(1)
}

// Negative adds a maximum value validator with the value of -1. Operation fails if the validator fails.
func (b *Int32Builder) Negative() *Int32Builder {
	return b.Max(-1)
}

// NonNegative adds a minimum value validator with the value of 0. Operation fails if the validator fails.
func (b *Int32Builder) NonNegative() *Int32Builder {
	return b.Min(0)
}

// Default sets the default value of the field.
func (b *Int32Builder) Default(i int32) *Int32Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Int32Builder) DefaultFunc(fn any) *Int32Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Int32("int32").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Int32Builder) UpdateDefault(fn any) *Int32Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Int32Builder) Nillable() *Int32Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Int32Builder) Comment(c string) *Int32Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Int32Builder) Optional() *Int32Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Int32Builder) Immutable() *Int32Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Int32Builder) StructTag(s string) *Int32Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Int32Builder) Validate(fn func(int32) error) *Int32Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Int32Builder) StorageKey(key string) *Int32Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for int32.
//
//	field.Int32("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Int32Builder) SchemaType(types map[string]string) *Int32Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Int32("int32").
//		GoType(pkg.Int32(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Int32Builder) GoType(typ any) *Int32Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Int32Builder) ValueScanner(vs any) *Int32Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Int32("int32").
//		Annotations(entgql.OrderField("INT32"))
func (b *Int32Builder) Annotations(annotations ...schema.Annotation) *Int32Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Int32Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(int32Type)
	}
	b.desc.checkGoType(int32Type)
	return b.desc
}

// Int64Builder is the builder for int64 field.
type Int64Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Int64Builder) Unique() *Int64Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Int64Builder) Range(i, j int64) *Int64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int64) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Int64Builder) Min(i int64) *Int64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int64) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Int64Builder) Max(i int64) *Int64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v int64) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Int64Builder) Positive() *Int64Builder {
	return b.Min(1)
}

// Negative adds a maximum value validator with the value of -1. Operation fails if the validator fails.
func (b *Int64Builder) Negative() *Int64Builder {
	return b.Max(-1)
}

// NonNegative adds a minimum value validator with the value of 0. Operation fails if the validator fails.
func (b *Int64Builder) NonNegative() *Int64Builder {
	return b.Min(0)
}

// Default sets the default value of the field.
func (b *Int64Builder) Default(i int64) *Int64Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Int64Builder) DefaultFunc(fn any) *Int64Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Int64("int64").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Int64Builder) UpdateDefault(fn any) *Int64Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Int64Builder) Nillable() *Int64Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Int64Builder) Comment(c string) *Int64Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Int64Builder) Optional() *Int64Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Int64Builder) Immutable() *Int64Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Int64Builder) StructTag(s string) *Int64Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Int64Builder) Validate(fn func(int64) error) *Int64Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Int64Builder) StorageKey(key string) *Int64Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for int64.
//
//	field.Int64("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Int64Builder) SchemaType(types map[string]string) *Int64Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Int64("int64").
//		GoType(pkg.Int64(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Int64Builder) GoType(typ any) *Int64Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Int64Builder) ValueScanner(vs any) *Int64Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Int64("int64").
//		Annotations(entgql.OrderField("INT64"))
func (b *Int64Builder) Annotations(annotations ...schema.Annotation) *Int64Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Int64Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(int64Type)
	}
	b.desc.checkGoType(int64Type)
	return b.desc
}

// Uint8Builder is the builder for uint8 field.
type Uint8Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Uint8Builder) Unique() *Uint8Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Uint8Builder) Range(i, j uint8) *Uint8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint8) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Uint8Builder) Min(i uint8) *Uint8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint8) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Uint8Builder) Max(i uint8) *Uint8Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint8) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Uint8Builder) Positive() *Uint8Builder {
	return b.Min(1)
}

// Default sets the default value of the field.
func (b *Uint8Builder) Default(i uint8) *Uint8Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Uint8Builder) DefaultFunc(fn any) *Uint8Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Uint8("uint8").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Uint8Builder) UpdateDefault(fn any) *Uint8Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Uint8Builder) Nillable() *Uint8Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Uint8Builder) Comment(c string) *Uint8Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Uint8Builder) Optional() *Uint8Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Uint8Builder) Immutable() *Uint8Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Uint8Builder) StructTag(s string) *Uint8Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Uint8Builder) Validate(fn func(uint8) error) *Uint8Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Uint8Builder) StorageKey(key string) *Uint8Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for uint8.
//
//	field.Uint8("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Uint8Builder) SchemaType(types map[string]string) *Uint8Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Uint8("uint8").
//		GoType(pkg.Uint8(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Uint8Builder) GoType(typ any) *Uint8Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Uint8Builder) ValueScanner(vs any) *Uint8Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Uint8("uint8").
//		Annotations(entgql.OrderField("UINT8"))
func (b *Uint8Builder) Annotations(annotations ...schema.Annotation) *Uint8Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Uint8Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(uint8Type)
	}
	b.desc.checkGoType(uint8Type)
	return b.desc
}

// Uint16Builder is the builder for uint16 field.
type Uint16Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Uint16Builder) Unique() *Uint16Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Uint16Builder) Range(i, j uint16) *Uint16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint16) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Uint16Builder) Min(i uint16) *Uint16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint16) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Uint16Builder) Max(i uint16) *Uint16Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint16) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Uint16Builder) Positive() *Uint16Builder {
	return b.Min(1)
}

// Default sets the default value of the field.
func (b *Uint16Builder) Default(i uint16) *Uint16Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Uint16Builder) DefaultFunc(fn any) *Uint16Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Uint16("uint16").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Uint16Builder) UpdateDefault(fn any) *Uint16Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Uint16Builder) Nillable() *Uint16Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Uint16Builder) Comment(c string) *Uint16Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Uint16Builder) Optional() *Uint16Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Uint16Builder) Immutable() *Uint16Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Uint16Builder) StructTag(s string) *Uint16Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Uint16Builder) Validate(fn func(uint16) error) *Uint16Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Uint16Builder) StorageKey(key string) *Uint16Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for uint16.
//
//	field.Uint16("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Uint16Builder) SchemaType(types map[string]string) *Uint16Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Uint16("uint16").
//		GoType(pkg.Uint16(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Uint16Builder) GoType(typ any) *Uint16Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Uint16Builder) ValueScanner(vs any) *Uint16Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Uint16("uint16").
//		Annotations(entgql.OrderField("UINT16"))
func (b *Uint16Builder) Annotations(annotations ...schema.Annotation) *Uint16Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Uint16Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(uint16Type)
	}
	b.desc.checkGoType(uint16Type)
	return b.desc
}

// Uint32Builder is the builder for uint32 field.
type Uint32Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Uint32Builder) Unique() *Uint32Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Uint32Builder) Range(i, j uint32) *Uint32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint32) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Uint32Builder) Min(i uint32) *Uint32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint32) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Uint32Builder) Max(i uint32) *Uint32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint32) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Uint32Builder) Positive() *Uint32Builder {
	return b.Min(1)
}

// Default sets the default value of the field.
func (b *Uint32Builder) Default(i uint32) *Uint32Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Uint32Builder) DefaultFunc(fn any) *Uint32Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Uint32("uint32").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Uint32Builder) UpdateDefault(fn any) *Uint32Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Uint32Builder) Nillable() *Uint32Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Uint32Builder) Comment(c string) *Uint32Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Uint32Builder) Optional() *Uint32Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Uint32Builder) Immutable() *Uint32Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Uint32Builder) StructTag(s string) *Uint32Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Uint32Builder) Validate(fn func(uint32) error) *Uint32Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Uint32Builder) StorageKey(key string) *Uint32Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for uint32.
//
//	field.Uint32("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Uint32Builder) SchemaType(types map[string]string) *Uint32Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Uint32("uint32").
//		GoType(pkg.Uint32(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Uint32Builder) GoType(typ any) *Uint32Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Uint32Builder) ValueScanner(vs any) *Uint32Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Uint32("uint32").
//		Annotations(entgql.OrderField("UINT32"))
func (b *Uint32Builder) Annotations(annotations ...schema.Annotation) *Uint32Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Uint32Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(uint32Type)
	}
	b.desc.checkGoType(uint32Type)
	return b.desc
}

// Uint64Builder is the builder for uint64 field.
type Uint64Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Uint64Builder) Unique() *Uint64Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Uint64Builder) Range(i, j uint64) *Uint64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint64) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Uint64Builder) Min(i uint64) *Uint64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint64) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Uint64Builder) Max(i uint64) *Uint64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v uint64) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 1. Operation fails if the validator fails.
func (b *Uint64Builder) Positive() *Uint64Builder {
	return b.Min(1)
}

// Default sets the default value of the field.
func (b *Uint64Builder) Default(i uint64) *Uint64Builder {
	b.desc.Default = i
	return b
}

// DefaultFunc sets the function that is applied to set the default value
// of the field on creation.
func (b *Uint64Builder) DefaultFunc(fn any) *Uint64Builder {
	b.desc.Default = fn
	return b
}

// UpdateDefault sets the function that is applied to set default value
// of the field on update. For example:
//
//	field.Uint64("uint64").
//		Default(0).
//		UpdateDefault(GenNumber),
func (b *Uint64Builder) UpdateDefault(fn any) *Uint64Builder {
	b.desc.UpdateDefault = fn
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Uint64Builder) Nillable() *Uint64Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Uint64Builder) Comment(c string) *Uint64Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Uint64Builder) Optional() *Uint64Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Uint64Builder) Immutable() *Uint64Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Uint64Builder) StructTag(s string) *Uint64Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Uint64Builder) Validate(fn func(uint64) error) *Uint64Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Uint64Builder) StorageKey(key string) *Uint64Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for uint64.
//
//	field.Uint64("oid").
//		SchemaType(map[string]string{
//			dialect.Postgres: "CustomType",
//		})
func (b *Uint64Builder) SchemaType(types map[string]string) *Uint64Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Uint64("uint64").
//		GoType(pkg.Uint64(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Uint64Builder) GoType(typ any) *Uint64Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Uint64Builder) ValueScanner(vs any) *Uint64Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Uint64("uint64").
//		Annotations(entgql.OrderField("UINT64"))
func (b *Uint64Builder) Annotations(annotations ...schema.Annotation) *Uint64Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Uint64Builder) Descriptor() *Descriptor {
	if b.desc.Default != nil || b.desc.UpdateDefault != nil {
		b.desc.checkDefaultFunc(uint64Type)
	}
	b.desc.checkGoType(uint64Type)
	return b.desc
}

var (
	intType    = reflect.TypeOf(int(0))
	uintType   = reflect.TypeOf(uint(0))
	int8Type   = reflect.TypeOf(int8(0))
	int16Type  = reflect.TypeOf(int16(0))
	int32Type  = reflect.TypeOf(int32(0))
	int64Type  = reflect.TypeOf(int64(0))
	uint8Type  = reflect.TypeOf(uint8(0))
	uint16Type = reflect.TypeOf(uint16(0))
	uint32Type = reflect.TypeOf(uint32(0))
	uint64Type = reflect.TypeOf(uint64(0))
)

// Float64Builder is the builder for float fields.
type Float64Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Float64Builder) Unique() *Float64Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Float64Builder) Range(i, j float64) *Float64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float64) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Float64Builder) Min(i float64) *Float64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float64) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Float64Builder) Max(i float64) *Float64Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float64) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 0.000001. Operation fails if the validator fails.
func (b *Float64Builder) Positive() *Float64Builder {
	return b.Min(1e-06)
}

// Negative adds a maximum value validator with the value of -0.000001. Operation fails if the validator fails.
func (b *Float64Builder) Negative() *Float64Builder {
	return b.Max(-1e-06)
}

// Default sets the default value of the field.
func (b *Float64Builder) Default(i float64) *Float64Builder {
	b.desc.Default = i
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Float64Builder) Nillable() *Float64Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Float64Builder) Comment(c string) *Float64Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Float64Builder) Optional() *Float64Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Float64Builder) Immutable() *Float64Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Float64Builder) StructTag(s string) *Float64Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Float64Builder) Validate(fn func(float64) error) *Float64Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Float64Builder) StorageKey(key string) *Float64Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for float64.
//
//	field.Float64("amount").
//		SchemaType(map[string]string{
//			dialect.MySQL:		"decimal(5, 2)",
//			dialect.Postgres: 	"numeric(5, 2)",
//		})
func (b *Float64Builder) SchemaType(types map[string]string) *Float64Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Float64("float64").
//		GoType(pkg.Float64(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Float64Builder) GoType(typ any) *Float64Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Float64Builder) ValueScanner(vs any) *Float64Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Float64("float64").
//		Annotations(entgql.OrderField("FLOAT64"))
func (b *Float64Builder) Annotations(annotations ...schema.Annotation) *Float64Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Float64Builder) Descriptor() *Descriptor {
	b.desc.checkGoType(float64Type)
	return b.desc
}

// Float32Builder is the builder for float fields.
type Float32Builder struct {
	desc *Descriptor
}

// Unique makes the field unique within all vertices of this type.
func (b *Float32Builder) Unique() *Float32Builder {
	b.desc.Unique = true
	return b
}

// Range adds a range validator for this field where the given value needs to be in the range of [i, j].
func (b *Float32Builder) Range(i, j float32) *Float32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float32) error {
		if v < i || v > j {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Min adds a minimum value validator for this field. Operation fails if the validator fails.
func (b *Float32Builder) Min(i float32) *Float32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float32) error {
		if v < i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Max adds a maximum value validator for this field. Operation fails if the validator fails.
func (b *Float32Builder) Max(i float32) *Float32Builder {
	b.desc.Validators = append(b.desc.Validators, func(v float32) error {
		if v > i {
			return errors.New("value out of range")
		}
		return nil
	})
	return b
}

// Positive adds a minimum value validator with the value of 0.000001. Operation fails if the validator fails.
func (b *Float32Builder) Positive() *Float32Builder {
	return b.Min(1e-06)
}

// Negative adds a maximum value validator with the value of -0.000001. Operation fails if the validator fails.
func (b *Float32Builder) Negative() *Float32Builder {
	return b.Max(-1e-06)
}

// Default sets the default value of the field.
func (b *Float32Builder) Default(i float32) *Float32Builder {
	b.desc.Default = i
	return b
}

// Nillable indicates that this field is a nillable.
// Unlike "Optional" only fields, "Nillable" fields are pointers in the generated struct.
func (b *Float32Builder) Nillable() *Float32Builder {
	b.desc.Nillable = true
	return b
}

// Comment sets the comment of the field.
func (b *Float32Builder) Comment(c string) *Float32Builder {
	b.desc.Comment = c
	return b
}

// Optional indicates that this field is optional on create.
// Unlike edges, fields are required by default.
func (b *Float32Builder) Optional() *Float32Builder {
	b.desc.Optional = true
	return b
}

// Immutable indicates that this field cannot be updated.
func (b *Float32Builder) Immutable() *Float32Builder {
	b.desc.Immutable = true
	return b
}

// StructTag sets the struct tag of the field.
func (b *Float32Builder) StructTag(s string) *Float32Builder {
	b.desc.Tag = s
	return b
}

// Validate adds a validator for this field. Operation fails if the validation fails.
func (b *Float32Builder) Validate(fn func(float32) error) *Float32Builder {
	b.desc.Validators = append(b.desc.Validators, fn)
	return b
}

// StorageKey sets the storage key of the field.
// In SQL dialects is the column name and Gremlin is the property.
func (b *Float32Builder) StorageKey(key string) *Float32Builder {
	b.desc.StorageKey = key
	return b
}

// SchemaType overrides the default database type with a custom
// schema type (per dialect) for float32.
//
//	field.Float32("amount").
//		SchemaType(map[string]string{
//			dialect.MySQL:		"decimal(5, 2)",
//			dialect.Postgres: 	"numeric(5, 2)",
//		})
func (b *Float32Builder) SchemaType(types map[string]string) *Float32Builder {
	b.desc.SchemaType = types
	return b
}

// GoType overrides the default Go type with a custom one.
// If the provided type implements the Validator interface
// and no validators have been set, the type validator will
// be used.
//
//	field.Float32("float32").
//		GoType(pkg.Float32(0))
//
// Note that, the custom Go type `T` needs to implement the
// `Add(T) T` method in order to support the `Add<F>` operation
// in mutations. For example:
//
//	func(t1 T) Add(t2 T) T {
//		return add(t1, t2)
//	}
func (b *Float32Builder) GoType(typ any) *Float32Builder {
	b.desc.goType(typ)
	return b
}

// ValueScanner provides an external value scanner for the given GoType.
// Using this option allow users to use field types that do not implement
// the sql.Scanner and driver.Valuer interfaces.
func (b *Float32Builder) ValueScanner(vs any) *Float32Builder {
	b.desc.ValueScanner = vs
	return b
}

// Annotations adds a list of annotations to the field object to be used by
// codegen extensions.
//
//	field.Float32("float32").
//		Annotations(entgql.OrderField("FLOAT32"))
func (b *Float32Builder) Annotations(annotations ...schema.Annotation) *Float32Builder {
	b.desc.Annotations = append(b.desc.Annotations, annotations...)
	return b
}

// Descriptor implements the ent.Field interface by returning its descriptor.
func (b *Float32Builder) Descriptor() *Descriptor {
	b.desc.checkGoType(float32Type)
	return b.desc
}

var (
	float64Type = reflect.TypeOf(float64(0))
	float32Type = reflect.TypeOf(float32(0))
)
