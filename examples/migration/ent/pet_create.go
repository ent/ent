// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/pet"
	"entgo.io/ent/examples/migration/ent/user"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PetCreate is the builder for creating a Pet entity.
type PetCreate struct {
	config
	mutation *PetMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (m *PetCreate) SetName(v string) *PetCreate {
	m.mutation.SetName(v)
	return m
}

// SetAge sets the "age" field.
func (m *PetCreate) SetAge(v float64) *PetCreate {
	m.mutation.SetAge(v)
	return m
}

// SetWeight sets the "weight" field.
func (m *PetCreate) SetWeight(v float64) *PetCreate {
	m.mutation.SetWeight(v)
	return m
}

// SetBestFriendID sets the "best_friend_id" field.
func (m *PetCreate) SetBestFriendID(v uuid.UUID) *PetCreate {
	m.mutation.SetBestFriendID(v)
	return m
}

// SetOwnerID sets the "owner_id" field.
func (m *PetCreate) SetOwnerID(v int) *PetCreate {
	m.mutation.SetOwnerID(v)
	return m
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (m *PetCreate) SetNillableOwnerID(v *int) *PetCreate {
	if v != nil {
		m.SetOwnerID(*v)
	}
	return m
}

// SetID sets the "id" field.
func (m *PetCreate) SetID(v uuid.UUID) *PetCreate {
	m.mutation.SetID(v)
	return m
}

// SetNillableID sets the "id" field if the given value is not nil.
func (m *PetCreate) SetNillableID(v *uuid.UUID) *PetCreate {
	if v != nil {
		m.SetID(*v)
	}
	return m
}

// SetBestFriend sets the "best_friend" edge to the Pet entity.
func (m *PetCreate) SetBestFriend(v *Pet) *PetCreate {
	return m.SetBestFriendID(v.ID)
}

// SetOwner sets the "owner" edge to the User entity.
func (m *PetCreate) SetOwner(v *User) *PetCreate {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the PetMutation object of the builder.
func (m *PetCreate) Mutation() *PetMutation {
	return m.mutation
}

// Save creates the Pet in the database.
func (c *PetCreate) Save(ctx context.Context) (*Pet, error) {
	c.defaults()
	return withHooks(ctx, c.sqlSave, c.mutation, c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (c *PetCreate) SaveX(ctx context.Context) *Pet {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *PetCreate) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *PetCreate) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (c *PetCreate) defaults() {
	if _, ok := c.mutation.OwnerID(); !ok {
		v := pet.DefaultOwnerID
		c.mutation.SetOwnerID(v)
	}
	if _, ok := c.mutation.ID(); !ok {
		v := pet.DefaultID()
		c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (c *PetCreate) check() error {
	if _, ok := c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Pet.name"`)}
	}
	if _, ok := c.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Pet.age"`)}
	}
	if _, ok := c.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Pet.weight"`)}
	}
	if _, ok := c.mutation.BestFriendID(); !ok {
		return &ValidationError{Name: "best_friend_id", err: errors.New(`ent: missing required field "Pet.best_friend_id"`)}
	}
	if _, ok := c.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Pet.owner_id"`)}
	}
	if len(c.mutation.BestFriendIDs()) == 0 {
		return &ValidationError{Name: "best_friend", err: errors.New(`ent: missing required edge "Pet.best_friend"`)}
	}
	if len(c.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Pet.owner"`)}
	}
	return nil
}

func (c *PetCreate) sqlSave(ctx context.Context) (*Pet, error) {
	if err := c.check(); err != nil {
		return nil, err
	}
	_node, _spec := c.createSpec()
	if err := sqlgraph.CreateNode(ctx, c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	c.mutation.id = &_node.ID
	c.mutation.done = true
	return _node, nil
}

func (c *PetCreate) createSpec() (*Pet, *sqlgraph.CreateSpec) {
	var (
		_node = &Pet{config: c.config}
		_spec = sqlgraph.NewCreateSpec(pet.Table, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	)
	if id, ok := c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := c.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := c.mutation.Age(); ok {
		_spec.SetField(pet.FieldAge, field.TypeFloat64, value)
		_node.Age = value
	}
	if value, ok := c.mutation.Weight(); ok {
		_spec.SetField(pet.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if nodes := c.mutation.BestFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BestFriendTable,
			Columns: []string{pet.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BestFriendID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PetCreateBulk is the builder for creating many Pet entities in bulk.
type PetCreateBulk struct {
	config
	err      error
	builders []*PetCreate
}

// Save creates the Pet entities in the database.
func (c *PetCreateBulk) Save(ctx context.Context) ([]*Pet, error) {
	if c.err != nil {
		return nil, c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(c.builders))
	nodes := make([]*Pet, len(c.builders))
	mutators := make([]Mutator, len(c.builders))
	for i := range c.builders {
		func(i int, root context.Context) {
			builder := c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (c *PetCreateBulk) SaveX(ctx context.Context) []*Pet {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *PetCreateBulk) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *PetCreateBulk) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}
