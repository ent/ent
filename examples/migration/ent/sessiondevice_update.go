// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/predicate"
	"entgo.io/ent/examples/migration/ent/session"
	"entgo.io/ent/examples/migration/ent/sessiondevice"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SessionDeviceUpdate is the builder for updating SessionDevice entities.
type SessionDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *SessionDeviceMutation
}

// Where appends a list predicates to the SessionDeviceUpdate builder.
func (u *SessionDeviceUpdate) Where(ps ...predicate.SessionDevice) *SessionDeviceUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (m *SessionDeviceUpdate) SetIPAddress(v string) *SessionDeviceUpdate {
	m.mutation.SetIPAddress(v)
	return m
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (m *SessionDeviceUpdate) SetNillableIPAddress(v *string) *SessionDeviceUpdate {
	if v != nil {
		m.SetIPAddress(*v)
	}
	return m
}

// SetUserAgent sets the "user_agent" field.
func (m *SessionDeviceUpdate) SetUserAgent(v string) *SessionDeviceUpdate {
	m.mutation.SetUserAgent(v)
	return m
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (m *SessionDeviceUpdate) SetNillableUserAgent(v *string) *SessionDeviceUpdate {
	if v != nil {
		m.SetUserAgent(*v)
	}
	return m
}

// SetLocation sets the "location" field.
func (m *SessionDeviceUpdate) SetLocation(v string) *SessionDeviceUpdate {
	m.mutation.SetLocation(v)
	return m
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (m *SessionDeviceUpdate) SetNillableLocation(v *string) *SessionDeviceUpdate {
	if v != nil {
		m.SetLocation(*v)
	}
	return m
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionDeviceUpdate) SetCreatedAt(v time.Time) *SessionDeviceUpdate {
	m.mutation.SetCreatedAt(v)
	return m
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (m *SessionDeviceUpdate) SetNillableCreatedAt(v *time.Time) *SessionDeviceUpdate {
	if v != nil {
		m.SetCreatedAt(*v)
	}
	return m
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SessionDeviceUpdate) SetUpdatedAt(v time.Time) *SessionDeviceUpdate {
	m.mutation.SetUpdatedAt(v)
	return m
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (m *SessionDeviceUpdate) SetNillableUpdatedAt(v *time.Time) *SessionDeviceUpdate {
	if v != nil {
		m.SetUpdatedAt(*v)
	}
	return m
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SessionDeviceUpdate) ClearUpdatedAt() *SessionDeviceUpdate {
	m.mutation.ClearUpdatedAt()
	return m
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (m *SessionDeviceUpdate) AddSessionIDs(ids ...uuid.UUID) *SessionDeviceUpdate {
	m.mutation.AddSessionIDs(ids...)
	return m
}

// AddSessions adds the "sessions" edges to the Session entity.
func (m *SessionDeviceUpdate) AddSessions(v ...*Session) *SessionDeviceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddSessionIDs(ids...)
}

// Mutation returns the SessionDeviceMutation object of the builder.
func (m *SessionDeviceUpdate) Mutation() *SessionDeviceMutation {
	return m.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (u *SessionDeviceUpdate) ClearSessions() *SessionDeviceUpdate {
	u.mutation.ClearSessions()
	return u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (u *SessionDeviceUpdate) RemoveSessionIDs(ids ...uuid.UUID) *SessionDeviceUpdate {
	u.mutation.RemoveSessionIDs(ids...)
	return u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (u *SessionDeviceUpdate) RemoveSessions(v ...*Session) *SessionDeviceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *SessionDeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *SessionDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *SessionDeviceUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionDeviceUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *SessionDeviceUpdate) check() error {
	if v, ok := u.mutation.IPAddress(); ok {
		if err := sessiondevice.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.ip_address": %w`, err)}
		}
	}
	if v, ok := u.mutation.UserAgent(); ok {
		if err := sessiondevice.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.user_agent": %w`, err)}
		}
	}
	if v, ok := u.mutation.Location(); ok {
		if err := sessiondevice.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.location": %w`, err)}
		}
	}
	return nil
}

func (u *SessionDeviceUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sessiondevice.Table, sessiondevice.Columns, sqlgraph.NewFieldSpec(sessiondevice.FieldID, field.TypeUUID))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.IPAddress(); ok {
		_spec.SetField(sessiondevice.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := u.mutation.UserAgent(); ok {
		_spec.SetField(sessiondevice.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := u.mutation.Location(); ok {
		_spec.SetField(sessiondevice.FieldLocation, field.TypeString, value)
	}
	if value, ok := u.mutation.CreatedAt(); ok {
		_spec.SetField(sessiondevice.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := u.mutation.UpdatedAt(); ok {
		_spec.SetField(sessiondevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if u.mutation.UpdatedAtCleared() {
		_spec.ClearField(sessiondevice.FieldUpdatedAt, field.TypeTime)
	}
	if u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessiondevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// SessionDeviceUpdateOne is the builder for updating a single SessionDevice entity.
type SessionDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionDeviceMutation
}

// SetIPAddress sets the "ip_address" field.
func (m *SessionDeviceUpdateOne) SetIPAddress(v string) *SessionDeviceUpdateOne {
	m.mutation.SetIPAddress(v)
	return m
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (m *SessionDeviceUpdateOne) SetNillableIPAddress(v *string) *SessionDeviceUpdateOne {
	if v != nil {
		m.SetIPAddress(*v)
	}
	return m
}

// SetUserAgent sets the "user_agent" field.
func (m *SessionDeviceUpdateOne) SetUserAgent(v string) *SessionDeviceUpdateOne {
	m.mutation.SetUserAgent(v)
	return m
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (m *SessionDeviceUpdateOne) SetNillableUserAgent(v *string) *SessionDeviceUpdateOne {
	if v != nil {
		m.SetUserAgent(*v)
	}
	return m
}

// SetLocation sets the "location" field.
func (m *SessionDeviceUpdateOne) SetLocation(v string) *SessionDeviceUpdateOne {
	m.mutation.SetLocation(v)
	return m
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (m *SessionDeviceUpdateOne) SetNillableLocation(v *string) *SessionDeviceUpdateOne {
	if v != nil {
		m.SetLocation(*v)
	}
	return m
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionDeviceUpdateOne) SetCreatedAt(v time.Time) *SessionDeviceUpdateOne {
	m.mutation.SetCreatedAt(v)
	return m
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (m *SessionDeviceUpdateOne) SetNillableCreatedAt(v *time.Time) *SessionDeviceUpdateOne {
	if v != nil {
		m.SetCreatedAt(*v)
	}
	return m
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SessionDeviceUpdateOne) SetUpdatedAt(v time.Time) *SessionDeviceUpdateOne {
	m.mutation.SetUpdatedAt(v)
	return m
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (m *SessionDeviceUpdateOne) SetNillableUpdatedAt(v *time.Time) *SessionDeviceUpdateOne {
	if v != nil {
		m.SetUpdatedAt(*v)
	}
	return m
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SessionDeviceUpdateOne) ClearUpdatedAt() *SessionDeviceUpdateOne {
	m.mutation.ClearUpdatedAt()
	return m
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (m *SessionDeviceUpdateOne) AddSessionIDs(ids ...uuid.UUID) *SessionDeviceUpdateOne {
	m.mutation.AddSessionIDs(ids...)
	return m
}

// AddSessions adds the "sessions" edges to the Session entity.
func (m *SessionDeviceUpdateOne) AddSessions(v ...*Session) *SessionDeviceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddSessionIDs(ids...)
}

// Mutation returns the SessionDeviceMutation object of the builder.
func (m *SessionDeviceUpdateOne) Mutation() *SessionDeviceMutation {
	return m.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (u *SessionDeviceUpdateOne) ClearSessions() *SessionDeviceUpdateOne {
	u.mutation.ClearSessions()
	return u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (u *SessionDeviceUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *SessionDeviceUpdateOne {
	u.mutation.RemoveSessionIDs(ids...)
	return u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (u *SessionDeviceUpdateOne) RemoveSessions(v ...*Session) *SessionDeviceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the SessionDeviceUpdate builder.
func (u *SessionDeviceUpdateOne) Where(ps ...predicate.SessionDevice) *SessionDeviceUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *SessionDeviceUpdateOne) Select(field string, fields ...string) *SessionDeviceUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated SessionDevice entity.
func (u *SessionDeviceUpdateOne) Save(ctx context.Context) (*SessionDevice, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *SessionDeviceUpdateOne) SaveX(ctx context.Context) *SessionDevice {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *SessionDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SessionDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *SessionDeviceUpdateOne) check() error {
	if v, ok := u.mutation.IPAddress(); ok {
		if err := sessiondevice.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.ip_address": %w`, err)}
		}
	}
	if v, ok := u.mutation.UserAgent(); ok {
		if err := sessiondevice.UserAgentValidator(v); err != nil {
			return &ValidationError{Name: "user_agent", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.user_agent": %w`, err)}
		}
	}
	if v, ok := u.mutation.Location(); ok {
		if err := sessiondevice.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "SessionDevice.location": %w`, err)}
		}
	}
	return nil
}

func (u *SessionDeviceUpdateOne) sqlSave(ctx context.Context) (_n *SessionDevice, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sessiondevice.Table, sessiondevice.Columns, sqlgraph.NewFieldSpec(sessiondevice.FieldID, field.TypeUUID))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SessionDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sessiondevice.FieldID)
		for _, f := range fields {
			if !sessiondevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sessiondevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.IPAddress(); ok {
		_spec.SetField(sessiondevice.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := u.mutation.UserAgent(); ok {
		_spec.SetField(sessiondevice.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := u.mutation.Location(); ok {
		_spec.SetField(sessiondevice.FieldLocation, field.TypeString, value)
	}
	if value, ok := u.mutation.CreatedAt(); ok {
		_spec.SetField(sessiondevice.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := u.mutation.UpdatedAt(); ok {
		_spec.SetField(sessiondevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if u.mutation.UpdatedAtCleared() {
		_spec.ClearField(sessiondevice.FieldUpdatedAt, field.TypeTime)
	}
	if u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sessiondevice.SessionsTable,
			Columns: []string{sessiondevice.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &SessionDevice{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessiondevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
