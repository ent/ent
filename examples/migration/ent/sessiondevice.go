// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/examples/migration/ent/sessiondevice"
	"github.com/google/uuid"
)

// SessionDevice is the model entity for the SessionDevice schema.
type SessionDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionDeviceQuery when eager-loading is set.
	Edges        SessionDeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SessionDeviceEdges holds the relations/edges for other nodes in the graph.
type SessionDeviceEdges struct {
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e SessionDeviceEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SessionDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessiondevice.FieldIPAddress, sessiondevice.FieldUserAgent, sessiondevice.FieldLocation:
			values[i] = new(sql.NullString)
		case sessiondevice.FieldCreatedAt, sessiondevice.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case sessiondevice.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SessionDevice fields.
func (sd *SessionDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessiondevice.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sd.ID = *value
			}
		case sessiondevice.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				sd.IPAddress = value.String
			}
		case sessiondevice.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				sd.UserAgent = value.String
			}
		case sessiondevice.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				sd.Location = value.String
			}
		case sessiondevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sessiondevice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		default:
			sd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SessionDevice.
// This includes values selected through modifiers, order, etc.
func (sd *SessionDevice) Value(name string) (ent.Value, error) {
	return sd.selectValues.Get(name)
}

// QuerySessions queries the "sessions" edge of the SessionDevice entity.
func (sd *SessionDevice) QuerySessions() *SessionQuery {
	return NewSessionDeviceClient(sd.config).QuerySessions(sd)
}

// Update returns a builder for updating this SessionDevice.
// Note that you need to call SessionDevice.Unwrap() before calling this method if this SessionDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SessionDevice) Update() *SessionDeviceUpdateOne {
	return NewSessionDeviceClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SessionDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SessionDevice) Unwrap() *SessionDevice {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SessionDevice is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SessionDevice) String() string {
	var builder strings.Builder
	builder.WriteString("SessionDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("ip_address=")
	builder.WriteString(sd.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(sd.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(sd.Location)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SessionDevices is a parsable slice of SessionDevice.
type SessionDevices []*SessionDevice
