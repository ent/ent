// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/card"
	"entgo.io/ent/examples/migration/ent/payment"
	"entgo.io/ent/examples/migration/ent/predicate"
	"entgo.io/ent/examples/migration/ent/user"
	"entgo.io/ent/schema/field"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetType sets the "type" field.
func (cu *CardUpdate) SetType(s string) *CardUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CardUpdate) SetNillableType(s *string) *CardUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetNumberHash sets the "number_hash" field.
func (cu *CardUpdate) SetNumberHash(s string) *CardUpdate {
	cu.mutation.SetNumberHash(s)
	return cu
}

// SetNillableNumberHash sets the "number_hash" field if the given value is not nil.
func (cu *CardUpdate) SetNillableNumberHash(s *string) *CardUpdate {
	if s != nil {
		cu.SetNumberHash(*s)
	}
	return cu
}

// SetCvvHash sets the "cvv_hash" field.
func (cu *CardUpdate) SetCvvHash(s string) *CardUpdate {
	cu.mutation.SetCvvHash(s)
	return cu
}

// SetNillableCvvHash sets the "cvv_hash" field if the given value is not nil.
func (cu *CardUpdate) SetNillableCvvHash(s *string) *CardUpdate {
	if s != nil {
		cu.SetCvvHash(*s)
	}
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CardUpdate) SetExpiresAt(t time.Time) *CardUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillableExpiresAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cu *CardUpdate) ClearExpiresAt() *CardUpdate {
	cu.mutation.ClearExpiresAt()
	return cu
}

// SetOwnerID sets the "owner_id" field.
func (cu *CardUpdate) SetOwnerID(i int) *CardUpdate {
	cu.mutation.SetOwnerID(i)
	return cu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cu *CardUpdate) SetNillableOwnerID(i *int) *CardUpdate {
	if i != nil {
		cu.SetOwnerID(*i)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CardUpdate) SetOwner(u *User) *CardUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cu *CardUpdate) AddPaymentIDs(ids ...int) *CardUpdate {
	cu.mutation.AddPaymentIDs(ids...)
	return cu
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cu *CardUpdate) AddPayments(p ...*Payment) *CardUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPaymentIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CardUpdate) ClearOwner() *CardUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cu *CardUpdate) ClearPayments() *CardUpdate {
	cu.mutation.ClearPayments()
	return cu
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cu *CardUpdate) RemovePaymentIDs(ids ...int) *CardUpdate {
	cu.mutation.RemovePaymentIDs(ids...)
	return cu
}

// RemovePayments removes "payments" edges to Payment entities.
func (cu *CardUpdate) RemovePayments(p ...*Payment) *CardUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CardUpdate) check() error {
	if cu.mutation.OwnerCleared() && len(cu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Card.owner"`)
	}
	return nil
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.NumberHash(); ok {
		_spec.SetField(card.FieldNumberHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.CvvHash(); ok {
		_spec.SetField(card.FieldCvvHash, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(card.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.ExpiresAtCleared() {
		_spec.ClearField(card.FieldExpiresAt, field.TypeTime)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetType sets the "type" field.
func (cuo *CardUpdateOne) SetType(s string) *CardUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableType(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetNumberHash sets the "number_hash" field.
func (cuo *CardUpdateOne) SetNumberHash(s string) *CardUpdateOne {
	cuo.mutation.SetNumberHash(s)
	return cuo
}

// SetNillableNumberHash sets the "number_hash" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableNumberHash(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetNumberHash(*s)
	}
	return cuo
}

// SetCvvHash sets the "cvv_hash" field.
func (cuo *CardUpdateOne) SetCvvHash(s string) *CardUpdateOne {
	cuo.mutation.SetCvvHash(s)
	return cuo
}

// SetNillableCvvHash sets the "cvv_hash" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableCvvHash(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetCvvHash(*s)
	}
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CardUpdateOne) SetExpiresAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableExpiresAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cuo *CardUpdateOne) ClearExpiresAt() *CardUpdateOne {
	cuo.mutation.ClearExpiresAt()
	return cuo
}

// SetOwnerID sets the "owner_id" field.
func (cuo *CardUpdateOne) SetOwnerID(i int) *CardUpdateOne {
	cuo.mutation.SetOwnerID(i)
	return cuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableOwnerID(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetOwnerID(*i)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CardUpdateOne) SetOwner(u *User) *CardUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cuo *CardUpdateOne) AddPaymentIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.AddPaymentIDs(ids...)
	return cuo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cuo *CardUpdateOne) AddPayments(p ...*Payment) *CardUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPaymentIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CardUpdateOne) ClearOwner() *CardUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cuo *CardUpdateOne) ClearPayments() *CardUpdateOne {
	cuo.mutation.ClearPayments()
	return cuo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cuo *CardUpdateOne) RemovePaymentIDs(ids ...int) *CardUpdateOne {
	cuo.mutation.RemovePaymentIDs(ids...)
	return cuo
}

// RemovePayments removes "payments" edges to Payment entities.
func (cuo *CardUpdateOne) RemovePayments(p ...*Payment) *CardUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the CardUpdate builder.
func (cuo *CardUpdateOne) Where(ps ...predicate.Card) *CardUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CardUpdateOne) check() error {
	if cuo.mutation.OwnerCleared() && len(cuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Card.owner"`)
	}
	return nil
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.NumberHash(); ok {
		_spec.SetField(card.FieldNumberHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CvvHash(); ok {
		_spec.SetField(card.FieldCvvHash, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(card.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(card.FieldExpiresAt, field.TypeTime)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.PaymentsTable,
			Columns: []string{card.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
