// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/predicate"
	"entgo.io/ent/examples/migration/ent/sessiondevice"
	"entgo.io/ent/schema/field"
)

// SessionDeviceDelete is the builder for deleting a SessionDevice entity.
type SessionDeviceDelete struct {
	config
	hooks    []Hook
	mutation *SessionDeviceMutation
}

// Where appends a list predicates to the SessionDeviceDelete builder.
func (sdd *SessionDeviceDelete) Where(ps ...predicate.SessionDevice) *SessionDeviceDelete {
	sdd.mutation.Where(ps...)
	return sdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sdd *SessionDeviceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sdd.sqlExec, sdd.mutation, sdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sdd *SessionDeviceDelete) ExecX(ctx context.Context) int {
	n, err := sdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

// Mutation returns the SessionDeviceMutation object of the builder.
func (sdd *SessionDeviceDelete) Mutation() *SessionDeviceMutation {
	return sdd.mutation
}

func (sdd *SessionDeviceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sessiondevice.Table, sqlgraph.NewFieldSpec(sessiondevice.FieldID, field.TypeUUID))
	if ps := sdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sdd.mutation.done = true
	return affected, err
}

// SessionDeviceDeleteOne is the builder for deleting a single SessionDevice entity.
type SessionDeviceDeleteOne struct {
	sdd *SessionDeviceDelete
}

// Where appends a list predicates to the SessionDeviceDelete builder.
func (sddo *SessionDeviceDeleteOne) Where(ps ...predicate.SessionDevice) *SessionDeviceDeleteOne {
	sddo.sdd.mutation.Where(ps...)
	return sddo
}

// Exec executes the deletion query.
func (sddo *SessionDeviceDeleteOne) Exec(ctx context.Context) error {
	n, err := sddo.sdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sessiondevice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sddo *SessionDeviceDeleteOne) ExecX(ctx context.Context) {
	if err := sddo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Mutation returns the SessionDeviceMutation object of the builder.
func (sddo *SessionDeviceDeleteOne) Mutation() *SessionDeviceMutation {
	return sddo.sdd.mutation
}
