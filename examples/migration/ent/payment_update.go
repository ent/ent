// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/card"
	"entgo.io/ent/examples/migration/ent/payment"
	"entgo.io/ent/examples/migration/ent/predicate"
	"entgo.io/ent/schema/field"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (u *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetCardID sets the "card_id" field.
func (m *PaymentUpdate) SetCardID(v int) *PaymentUpdate {
	m.mutation.SetCardID(v)
	return m
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableCardID(v *int) *PaymentUpdate {
	if v != nil {
		m.SetCardID(*v)
	}
	return m
}

// SetAmount sets the "amount" field.
func (m *PaymentUpdate) SetAmount(v float64) *PaymentUpdate {
	m.mutation.ResetAmount()
	m.mutation.SetAmount(v)
	return m
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableAmount(v *float64) *PaymentUpdate {
	if v != nil {
		m.SetAmount(*v)
	}
	return m
}

// AddAmount adds value to the "amount" field.
func (m *PaymentUpdate) AddAmount(v float64) *PaymentUpdate {
	m.mutation.AddAmount(v)
	return m
}

// SetCurrency sets the "currency" field.
func (m *PaymentUpdate) SetCurrency(v payment.Currency) *PaymentUpdate {
	m.mutation.SetCurrency(v)
	return m
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableCurrency(v *payment.Currency) *PaymentUpdate {
	if v != nil {
		m.SetCurrency(*v)
	}
	return m
}

// SetTime sets the "time" field.
func (m *PaymentUpdate) SetTime(v time.Time) *PaymentUpdate {
	m.mutation.SetTime(v)
	return m
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableTime(v *time.Time) *PaymentUpdate {
	if v != nil {
		m.SetTime(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *PaymentUpdate) SetDescription(v string) *PaymentUpdate {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableDescription(v *string) *PaymentUpdate {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// SetStatus sets the "status" field.
func (m *PaymentUpdate) SetStatus(v payment.Status) *PaymentUpdate {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *PaymentUpdate) SetNillableStatus(v *payment.Status) *PaymentUpdate {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// SetCard sets the "card" edge to the Card entity.
func (m *PaymentUpdate) SetCard(v *Card) *PaymentUpdate {
	return m.SetCardID(v.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (m *PaymentUpdate) Mutation() *PaymentMutation {
	return m.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (u *PaymentUpdate) ClearCard() *PaymentUpdate {
	u.mutation.ClearCard()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *PaymentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *PaymentUpdate) check() error {
	if v, ok := u.mutation.Amount(); ok {
		if err := payment.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Payment.amount": %w`, err)}
		}
	}
	if v, ok := u.mutation.Currency(); ok {
		if err := payment.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Payment.currency": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	if u.mutation.CardCleared() && len(u.mutation.CardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Payment.card"`)
	}
	return nil
}

func (u *PaymentUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.Currency(); ok {
		_spec.SetField(payment.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Time(); ok {
		_spec.SetField(payment.FieldTime, field.TypeTime, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(payment.FieldDescription, field.TypeString, value)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeEnum, value)
	}
	if u.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CardTable,
			Columns: []string{payment.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CardTable,
			Columns: []string{payment.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetCardID sets the "card_id" field.
func (m *PaymentUpdateOne) SetCardID(v int) *PaymentUpdateOne {
	m.mutation.SetCardID(v)
	return m
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableCardID(v *int) *PaymentUpdateOne {
	if v != nil {
		m.SetCardID(*v)
	}
	return m
}

// SetAmount sets the "amount" field.
func (m *PaymentUpdateOne) SetAmount(v float64) *PaymentUpdateOne {
	m.mutation.ResetAmount()
	m.mutation.SetAmount(v)
	return m
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableAmount(v *float64) *PaymentUpdateOne {
	if v != nil {
		m.SetAmount(*v)
	}
	return m
}

// AddAmount adds value to the "amount" field.
func (m *PaymentUpdateOne) AddAmount(v float64) *PaymentUpdateOne {
	m.mutation.AddAmount(v)
	return m
}

// SetCurrency sets the "currency" field.
func (m *PaymentUpdateOne) SetCurrency(v payment.Currency) *PaymentUpdateOne {
	m.mutation.SetCurrency(v)
	return m
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableCurrency(v *payment.Currency) *PaymentUpdateOne {
	if v != nil {
		m.SetCurrency(*v)
	}
	return m
}

// SetTime sets the "time" field.
func (m *PaymentUpdateOne) SetTime(v time.Time) *PaymentUpdateOne {
	m.mutation.SetTime(v)
	return m
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableTime(v *time.Time) *PaymentUpdateOne {
	if v != nil {
		m.SetTime(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *PaymentUpdateOne) SetDescription(v string) *PaymentUpdateOne {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableDescription(v *string) *PaymentUpdateOne {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// SetStatus sets the "status" field.
func (m *PaymentUpdateOne) SetStatus(v payment.Status) *PaymentUpdateOne {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *PaymentUpdateOne) SetNillableStatus(v *payment.Status) *PaymentUpdateOne {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// SetCard sets the "card" edge to the Card entity.
func (m *PaymentUpdateOne) SetCard(v *Card) *PaymentUpdateOne {
	return m.SetCardID(v.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (m *PaymentUpdateOne) Mutation() *PaymentMutation {
	return m.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (u *PaymentUpdateOne) ClearCard() *PaymentUpdateOne {
	u.mutation.ClearCard()
	return u
}

// Where appends a list predicates to the PaymentUpdate builder.
func (u *PaymentUpdateOne) Where(ps ...predicate.Payment) *PaymentUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Payment entity.
func (u *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *PaymentUpdateOne) check() error {
	if v, ok := u.mutation.Amount(); ok {
		if err := payment.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Payment.amount": %w`, err)}
		}
	}
	if v, ok := u.mutation.Currency(); ok {
		if err := payment.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Payment.currency": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	if u.mutation.CardCleared() && len(u.mutation.CardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Payment.card"`)
	}
	return nil
}

func (u *PaymentUpdateOne) sqlSave(ctx context.Context) (_n *Payment, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(payment.Table, payment.Columns, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.Currency(); ok {
		_spec.SetField(payment.FieldCurrency, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Time(); ok {
		_spec.SetField(payment.FieldTime, field.TypeTime, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(payment.FieldDescription, field.TypeString, value)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeEnum, value)
	}
	if u.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CardTable,
			Columns: []string{payment.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CardTable,
			Columns: []string{payment.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Payment{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
