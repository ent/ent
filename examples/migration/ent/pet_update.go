// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/migration/ent/pet"
	"entgo.io/ent/examples/migration/ent/predicate"
	"entgo.io/ent/examples/migration/ent/user"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where appends a list predicates to the PetUpdate builder.
func (_u *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *PetUpdate) SetName(s string) *PetUpdate {
	_u.mutation.SetName(s)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PetUpdate) SetNillableName(s *string) *PetUpdate {
	if s != nil {
		_u.SetName(*s)
	}
	return _u
}

// SetAge sets the "age" field.
func (_u *PetUpdate) SetAge(f float64) *PetUpdate {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(f)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *PetUpdate) SetNillableAge(f *float64) *PetUpdate {
	if f != nil {
		_u.SetAge(*f)
	}
	return _u
}

// AddAge adds f to the "age" field.
func (_u *PetUpdate) AddAge(f float64) *PetUpdate {
	_u.mutation.AddAge(f)
	return _u
}

// SetWeight sets the "weight" field.
func (_u *PetUpdate) SetWeight(f float64) *PetUpdate {
	_u.mutation.ResetWeight()
	_u.mutation.SetWeight(f)
	return _u
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (_u *PetUpdate) SetNillableWeight(f *float64) *PetUpdate {
	if f != nil {
		_u.SetWeight(*f)
	}
	return _u
}

// AddWeight adds f to the "weight" field.
func (_u *PetUpdate) AddWeight(f float64) *PetUpdate {
	_u.mutation.AddWeight(f)
	return _u
}

// SetBestFriendID sets the "best_friend_id" field.
func (_u *PetUpdate) SetBestFriendID(u uuid.UUID) *PetUpdate {
	_u.mutation.SetBestFriendID(u)
	return _u
}

// SetNillableBestFriendID sets the "best_friend_id" field if the given value is not nil.
func (_u *PetUpdate) SetNillableBestFriendID(u *uuid.UUID) *PetUpdate {
	if u != nil {
		_u.SetBestFriendID(*u)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *PetUpdate) SetOwnerID(i int) *PetUpdate {
	_u.mutation.SetOwnerID(i)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *PetUpdate) SetNillableOwnerID(i *int) *PetUpdate {
	if i != nil {
		_u.SetOwnerID(*i)
	}
	return _u
}

// SetBestFriend sets the "best_friend" edge to the Pet entity.
func (_u *PetUpdate) SetBestFriend(p *Pet) *PetUpdate {
	return _u.SetBestFriendID(p.ID)
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *PetUpdate) SetOwner(u *User) *PetUpdate {
	return _u.SetOwnerID(u.ID)
}

// Mutation returns the PetMutation object of the builder.
func (_u *PetUpdate) Mutation() *PetMutation {
	return _u.mutation
}

// ClearBestFriend clears the "best_friend" edge to the Pet entity.
func (_u *PetUpdate) ClearBestFriend() *PetUpdate {
	_u.mutation.ClearBestFriend()
	return _u
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *PetUpdate) ClearOwner() *PetUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PetUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PetUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PetUpdate) check() error {
	if _u.mutation.BestFriendCleared() && len(_u.mutation.BestFriendIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.best_friend"`)
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.owner"`)
	}
	return nil
}

func (_u *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := _u.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(pet.FieldAge, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(pet.FieldAge, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Weight(); ok {
		_spec.SetField(pet.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedWeight(); ok {
		_spec.AddField(pet.FieldWeight, field.TypeFloat64, value)
	}
	if _u.mutation.BestFriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BestFriendTable,
			Columns: []string{pet.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BestFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BestFriendTable,
			Columns: []string{pet.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetMutation
}

// SetName sets the "name" field.
func (_u *PetUpdateOne) SetName(s string) *PetUpdateOne {
	_u.mutation.SetName(s)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PetUpdateOne) SetNillableName(s *string) *PetUpdateOne {
	if s != nil {
		_u.SetName(*s)
	}
	return _u
}

// SetAge sets the "age" field.
func (_u *PetUpdateOne) SetAge(f float64) *PetUpdateOne {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(f)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *PetUpdateOne) SetNillableAge(f *float64) *PetUpdateOne {
	if f != nil {
		_u.SetAge(*f)
	}
	return _u
}

// AddAge adds f to the "age" field.
func (_u *PetUpdateOne) AddAge(f float64) *PetUpdateOne {
	_u.mutation.AddAge(f)
	return _u
}

// SetWeight sets the "weight" field.
func (_u *PetUpdateOne) SetWeight(f float64) *PetUpdateOne {
	_u.mutation.ResetWeight()
	_u.mutation.SetWeight(f)
	return _u
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (_u *PetUpdateOne) SetNillableWeight(f *float64) *PetUpdateOne {
	if f != nil {
		_u.SetWeight(*f)
	}
	return _u
}

// AddWeight adds f to the "weight" field.
func (_u *PetUpdateOne) AddWeight(f float64) *PetUpdateOne {
	_u.mutation.AddWeight(f)
	return _u
}

// SetBestFriendID sets the "best_friend_id" field.
func (_u *PetUpdateOne) SetBestFriendID(u uuid.UUID) *PetUpdateOne {
	_u.mutation.SetBestFriendID(u)
	return _u
}

// SetNillableBestFriendID sets the "best_friend_id" field if the given value is not nil.
func (_u *PetUpdateOne) SetNillableBestFriendID(u *uuid.UUID) *PetUpdateOne {
	if u != nil {
		_u.SetBestFriendID(*u)
	}
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *PetUpdateOne) SetOwnerID(i int) *PetUpdateOne {
	_u.mutation.SetOwnerID(i)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *PetUpdateOne) SetNillableOwnerID(i *int) *PetUpdateOne {
	if i != nil {
		_u.SetOwnerID(*i)
	}
	return _u
}

// SetBestFriend sets the "best_friend" edge to the Pet entity.
func (_u *PetUpdateOne) SetBestFriend(p *Pet) *PetUpdateOne {
	return _u.SetBestFriendID(p.ID)
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *PetUpdateOne) SetOwner(u *User) *PetUpdateOne {
	return _u.SetOwnerID(u.ID)
}

// Mutation returns the PetMutation object of the builder.
func (_u *PetUpdateOne) Mutation() *PetMutation {
	return _u.mutation
}

// ClearBestFriend clears the "best_friend" edge to the Pet entity.
func (_u *PetUpdateOne) ClearBestFriend() *PetUpdateOne {
	_u.mutation.ClearBestFriend()
	return _u
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *PetUpdateOne) ClearOwner() *PetUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the PetUpdate builder.
func (_u *PetUpdateOne) Where(ps ...predicate.Pet) *PetUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Pet entity.
func (_u *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PetUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PetUpdateOne) check() error {
	if _u.mutation.BestFriendCleared() && len(_u.mutation.BestFriendIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.best_friend"`)
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pet.owner"`)
	}
	return nil
}

func (_u *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pet.FieldID)
		for _, f := range fields {
			if !pet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(pet.FieldAge, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(pet.FieldAge, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Weight(); ok {
		_spec.SetField(pet.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedWeight(); ok {
		_spec.AddField(pet.FieldWeight, field.TypeFloat64, value)
	}
	if _u.mutation.BestFriendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BestFriendTable,
			Columns: []string{pet.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BestFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pet.BestFriendTable,
			Columns: []string{pet.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pet.OwnerTable,
			Columns: []string{pet.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pet{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
