// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/o2orecur/ent/node"
	"entgo.io/ent/examples/o2orecur/ent/predicate"
	"entgo.io/ent/schema/field"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (_u *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetValue sets the "value" field.
func (_u *NodeUpdate) SetValue(v int) *NodeUpdate {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *NodeUpdate) SetNillableValue(v *int) *NodeUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *NodeUpdate) AddValue(v int) *NodeUpdate {
	_u.mutation.AddValue(v)
	return _u
}

// SetPrevID sets the "prev_id" field.
func (_u *NodeUpdate) SetPrevID(v int) *NodeUpdate {
	_u.mutation.SetPrevID(v)
	return _u
}

// SetNillablePrevID sets the "prev_id" field if the given value is not nil.
func (_u *NodeUpdate) SetNillablePrevID(v *int) *NodeUpdate {
	if v != nil {
		_u.SetPrevID(*v)
	}
	return _u
}

// ClearPrevID clears the value of the "prev_id" field.
func (_u *NodeUpdate) ClearPrevID() *NodeUpdate {
	_u.mutation.ClearPrevID()
	return _u
}

// SetPrev sets the "prev" edge to the Node entity.
func (_u *NodeUpdate) SetPrev(v *Node) *NodeUpdate {
	return _u.SetPrevID(v.ID)
}

// SetNextID sets the "next" edge to the Node entity by ID.
func (_u *NodeUpdate) SetNextID(id int) *NodeUpdate {
	_u.mutation.SetNextID(id)
	return _u
}

// SetNillableNextID sets the "next" edge to the Node entity by ID if the given value is not nil.
func (_u *NodeUpdate) SetNillableNextID(id *int) *NodeUpdate {
	if id != nil {
		_u = _u.SetNextID(*id)
	}
	return _u
}

// SetNext sets the "next" edge to the Node entity.
func (_u *NodeUpdate) SetNext(v *Node) *NodeUpdate {
	return _u.SetNextID(v.ID)
}

// Mutation returns the NodeMutation object of the builder.
func (_u *NodeUpdate) Mutation() *NodeMutation {
	return _u.mutation
}

// ClearPrev clears the "prev" edge to the Node entity.
func (_u *NodeUpdate) ClearPrev() *NodeUpdate {
	_u.mutation.ClearPrev()
	return _u
}

// ClearNext clears the "next" edge to the Node entity.
func (_u *NodeUpdate) ClearNext() *NodeUpdate {
	_u.mutation.ClearNext()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *NodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(node.FieldValue, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(node.FieldValue, field.TypeInt, value)
	}
	if _u.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   node.PrevTable,
			Columns: []string{node.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   node.PrevTable,
			Columns: []string{node.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   node.NextTable,
			Columns: []string{node.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   node.NextTable,
			Columns: []string{node.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetValue sets the "value" field.
func (_u *NodeUpdateOne) SetValue(v int) *NodeUpdateOne {
	_u.mutation.ResetValue()
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *NodeUpdateOne) SetNillableValue(v *int) *NodeUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// AddValue adds value to the "value" field.
func (_u *NodeUpdateOne) AddValue(v int) *NodeUpdateOne {
	_u.mutation.AddValue(v)
	return _u
}

// SetPrevID sets the "prev_id" field.
func (_u *NodeUpdateOne) SetPrevID(v int) *NodeUpdateOne {
	_u.mutation.SetPrevID(v)
	return _u
}

// SetNillablePrevID sets the "prev_id" field if the given value is not nil.
func (_u *NodeUpdateOne) SetNillablePrevID(v *int) *NodeUpdateOne {
	if v != nil {
		_u.SetPrevID(*v)
	}
	return _u
}

// ClearPrevID clears the value of the "prev_id" field.
func (_u *NodeUpdateOne) ClearPrevID() *NodeUpdateOne {
	_u.mutation.ClearPrevID()
	return _u
}

// SetPrev sets the "prev" edge to the Node entity.
func (_u *NodeUpdateOne) SetPrev(v *Node) *NodeUpdateOne {
	return _u.SetPrevID(v.ID)
}

// SetNextID sets the "next" edge to the Node entity by ID.
func (_u *NodeUpdateOne) SetNextID(id int) *NodeUpdateOne {
	_u.mutation.SetNextID(id)
	return _u
}

// SetNillableNextID sets the "next" edge to the Node entity by ID if the given value is not nil.
func (_u *NodeUpdateOne) SetNillableNextID(id *int) *NodeUpdateOne {
	if id != nil {
		_u = _u.SetNextID(*id)
	}
	return _u
}

// SetNext sets the "next" edge to the Node entity.
func (_u *NodeUpdateOne) SetNext(v *Node) *NodeUpdateOne {
	return _u.SetNextID(v.ID)
}

// Mutation returns the NodeMutation object of the builder.
func (_u *NodeUpdateOne) Mutation() *NodeMutation {
	return _u.mutation
}

// ClearPrev clears the "prev" edge to the Node entity.
func (_u *NodeUpdateOne) ClearPrev() *NodeUpdateOne {
	_u.mutation.ClearPrev()
	return _u
}

// ClearNext clears the "next" edge to the Node entity.
func (_u *NodeUpdateOne) ClearNext() *NodeUpdateOne {
	_u.mutation.ClearNext()
	return _u
}

// Where appends a list predicates to the NodeUpdate builder.
func (_u *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Node entity.
func (_u *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(node.FieldValue, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedValue(); ok {
		_spec.AddField(node.FieldValue, field.TypeInt, value)
	}
	if _u.mutation.PrevCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   node.PrevTable,
			Columns: []string{node.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PrevIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   node.PrevTable,
			Columns: []string{node.PrevColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NextCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   node.NextTable,
			Columns: []string{node.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NextIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   node.NextTable,
			Columns: []string{node.NextColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
