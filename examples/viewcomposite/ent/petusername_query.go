// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/viewcomposite/ent/petusername"
	"entgo.io/ent/examples/viewcomposite/ent/predicate"
)

// PetUserNameQuery is the builder for querying PetUserName entities.
type PetUserNameQuery struct {
	config
	ctx        *QueryContext
	order      []petusername.OrderOption
	inters     []Interceptor
	predicates []predicate.PetUserName
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PetUserNameQuery builder.
func (_q *PetUserNameQuery) Where(ps ...predicate.PetUserName) *PetUserNameQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *PetUserNameQuery) Limit(limit int) *PetUserNameQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *PetUserNameQuery) Offset(offset int) *PetUserNameQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *PetUserNameQuery) Unique(unique bool) *PetUserNameQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *PetUserNameQuery) Order(o ...petusername.OrderOption) *PetUserNameQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// First returns the first PetUserName entity from the query.
// Returns a *NotFoundError when no PetUserName was found.
func (_q *PetUserNameQuery) First(ctx context.Context) (*PetUserName, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{petusername.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *PetUserNameQuery) FirstX(ctx context.Context) *PetUserName {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single PetUserName entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PetUserName entity is found.
// Returns a *NotFoundError when no PetUserName entities are found.
func (_q *PetUserNameQuery) Only(ctx context.Context) (*PetUserName, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{petusername.Label}
	default:
		return nil, &NotSingularError{petusername.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *PetUserNameQuery) OnlyX(ctx context.Context) *PetUserName {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of PetUserNames.
func (_q *PetUserNameQuery) All(ctx context.Context) ([]*PetUserName, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PetUserName, *PetUserNameQuery]()
	return withInterceptors[[]*PetUserName](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *PetUserNameQuery) AllX(ctx context.Context) []*PetUserName {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (_q *PetUserNameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*PetUserNameQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *PetUserNameQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *PetUserNameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *PetUserNameQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PetUserNameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *PetUserNameQuery) Clone() *PetUserNameQuery {
	if _q == nil {
		return nil
	}
	return &PetUserNameQuery{
		config:     _q.config,
		ctx:        _q.ctx.Clone(),
		order:      append([]petusername.OrderOption{}, _q.order...),
		inters:     append([]Interceptor{}, _q.inters...),
		predicates: append([]predicate.PetUserName{}, _q.predicates...),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PetUserName.Query().
//		GroupBy(petusername.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *PetUserNameQuery) GroupBy(field string, fields ...string) *PetUserNameGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PetUserNameGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = petusername.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.PetUserName.Query().
//		Select(petusername.FieldName).
//		Scan(ctx, &v)
func (_q *PetUserNameQuery) Select(fields ...string) *PetUserNameSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &PetUserNameSelect{PetUserNameQuery: _q}
	sbuild.label = petusername.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PetUserNameSelect configured with the given aggregations.
func (_q *PetUserNameQuery) Aggregate(fns ...AggregateFunc) *PetUserNameSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *PetUserNameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !petusername.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *PetUserNameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PetUserName, error) {
	var (
		nodes = []*PetUserName{}
		_spec = _q.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PetUserName).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PetUserName{config: _q.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (_q *PetUserNameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *PetUserNameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(petusername.Table, petusername.Columns, nil)
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *PetUserNameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(petusername.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = petusername.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PetUserNameGroupBy is the group-by builder for PetUserName entities.
type PetUserNameGroupBy struct {
	selector
	build *PetUserNameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pungb *PetUserNameGroupBy) Aggregate(fns ...AggregateFunc) *PetUserNameGroupBy {
	pungb.fns = append(pungb.fns, fns...)
	return pungb
}

// Scan applies the selector query and scans the result into the given value.
func (pungb *PetUserNameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pungb.build.ctx, ent.OpQueryGroupBy)
	if err := pungb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PetUserNameQuery, *PetUserNameGroupBy](ctx, pungb.build, pungb, pungb.build.inters, v)
}

func (pungb *PetUserNameGroupBy) sqlScan(ctx context.Context, root *PetUserNameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pungb.fns))
	for _, fn := range pungb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pungb.flds)+len(pungb.fns))
		for _, f := range *pungb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pungb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pungb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PetUserNameSelect is the builder for selecting fields of PetUserName entities.
type PetUserNameSelect struct {
	*PetUserNameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (puns *PetUserNameSelect) Aggregate(fns ...AggregateFunc) *PetUserNameSelect {
	puns.fns = append(puns.fns, fns...)
	return puns
}

// Scan applies the selector query and scans the result into the given value.
func (puns *PetUserNameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, puns.ctx, ent.OpQuerySelect)
	if err := puns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PetUserNameQuery, *PetUserNameSelect](ctx, puns.PetUserNameQuery, puns, puns.inters, v)
}

func (puns *PetUserNameSelect) sqlScan(ctx context.Context, root *PetUserNameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(puns.fns))
	for _, fn := range puns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*puns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := puns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
