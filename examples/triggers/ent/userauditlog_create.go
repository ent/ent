// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/triggers/ent/userauditlog"
	"entgo.io/ent/schema/field"
)

// UserAuditLogCreate is the builder for creating a UserAuditLog entity.
type UserAuditLogCreate struct {
	config
	mutation *UserAuditLogMutation
	hooks    []Hook
}

// SetOperationType sets the "operation_type" field.
func (ualc *UserAuditLogCreate) SetOperationType(s string) *UserAuditLogCreate {
	ualc.mutation.SetOperationType(s)
	return ualc
}

// SetOperationTime sets the "operation_time" field.
func (ualc *UserAuditLogCreate) SetOperationTime(s string) *UserAuditLogCreate {
	ualc.mutation.SetOperationTime(s)
	return ualc
}

// SetOldValue sets the "old_value" field.
func (ualc *UserAuditLogCreate) SetOldValue(s string) *UserAuditLogCreate {
	ualc.mutation.SetOldValue(s)
	return ualc
}

// SetNillableOldValue sets the "old_value" field if the given value is not nil.
func (ualc *UserAuditLogCreate) SetNillableOldValue(s *string) *UserAuditLogCreate {
	if s != nil {
		ualc.SetOldValue(*s)
	}
	return ualc
}

// SetNewValue sets the "new_value" field.
func (ualc *UserAuditLogCreate) SetNewValue(s string) *UserAuditLogCreate {
	ualc.mutation.SetNewValue(s)
	return ualc
}

// SetNillableNewValue sets the "new_value" field if the given value is not nil.
func (ualc *UserAuditLogCreate) SetNillableNewValue(s *string) *UserAuditLogCreate {
	if s != nil {
		ualc.SetNewValue(*s)
	}
	return ualc
}

// Mutation returns the UserAuditLogMutation object of the builder.
func (ualc *UserAuditLogCreate) Mutation() *UserAuditLogMutation {
	return ualc.mutation
}

// Save creates the UserAuditLog in the database.
func (ualc *UserAuditLogCreate) Save(ctx context.Context) (*UserAuditLog, error) {
	return withHooks(ctx, ualc.sqlSave, ualc.mutation, ualc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ualc *UserAuditLogCreate) SaveX(ctx context.Context) *UserAuditLog {
	v, err := ualc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ualc *UserAuditLogCreate) Exec(ctx context.Context) error {
	_, err := ualc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ualc *UserAuditLogCreate) ExecX(ctx context.Context) {
	if err := ualc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ualc *UserAuditLogCreate) check() error {
	if _, ok := ualc.mutation.OperationType(); !ok {
		return &ValidationError{Name: "operation_type", err: errors.New(`ent: missing required field "UserAuditLog.operation_type"`)}
	}
	if _, ok := ualc.mutation.OperationTime(); !ok {
		return &ValidationError{Name: "operation_time", err: errors.New(`ent: missing required field "UserAuditLog.operation_time"`)}
	}
	return nil
}

func (ualc *UserAuditLogCreate) sqlSave(ctx context.Context) (*UserAuditLog, error) {
	if err := ualc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ualc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ualc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ualc.mutation.id = &_node.ID
	ualc.mutation.done = true
	return _node, nil
}

func (ualc *UserAuditLogCreate) createSpec() (*UserAuditLog, *sqlgraph.CreateSpec) {
	var (
		_node = &UserAuditLog{config: ualc.config}
		_spec = sqlgraph.NewCreateSpec(userauditlog.Table, sqlgraph.NewFieldSpec(userauditlog.FieldID, field.TypeInt))
	)
	if value, ok := ualc.mutation.OperationType(); ok {
		_spec.SetField(userauditlog.FieldOperationType, field.TypeString, value)
		_node.OperationType = value
	}
	if value, ok := ualc.mutation.OperationTime(); ok {
		_spec.SetField(userauditlog.FieldOperationTime, field.TypeString, value)
		_node.OperationTime = value
	}
	if value, ok := ualc.mutation.OldValue(); ok {
		_spec.SetField(userauditlog.FieldOldValue, field.TypeString, value)
		_node.OldValue = value
	}
	if value, ok := ualc.mutation.NewValue(); ok {
		_spec.SetField(userauditlog.FieldNewValue, field.TypeString, value)
		_node.NewValue = value
	}
	return _node, _spec
}

// UserAuditLogCreateBulk is the builder for creating many UserAuditLog entities in bulk.
type UserAuditLogCreateBulk struct {
	config
	err      error
	builders []*UserAuditLogCreate
}

// Save creates the UserAuditLog entities in the database.
func (ualcb *UserAuditLogCreateBulk) Save(ctx context.Context) ([]*UserAuditLog, error) {
	if ualcb.err != nil {
		return nil, ualcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ualcb.builders))
	nodes := make([]*UserAuditLog, len(ualcb.builders))
	mutators := make([]Mutator, len(ualcb.builders))
	for i := range ualcb.builders {
		func(i int, root context.Context) {
			builder := ualcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserAuditLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ualcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ualcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ualcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ualcb *UserAuditLogCreateBulk) SaveX(ctx context.Context) []*UserAuditLog {
	v, err := ualcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ualcb *UserAuditLogCreateBulk) Exec(ctx context.Context) error {
	_, err := ualcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ualcb *UserAuditLogCreateBulk) ExecX(ctx context.Context) {
	if err := ualcb.Exec(ctx); err != nil {
		panic(err)
	}
}
