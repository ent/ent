// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/triggers/ent/predicate"
	"entgo.io/ent/examples/triggers/ent/userauditlog"
	"entgo.io/ent/schema/field"
)

// UserAuditLogUpdate is the builder for updating UserAuditLog entities.
type UserAuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *UserAuditLogMutation
}

// Where appends a list predicates to the UserAuditLogUpdate builder.
func (u *UserAuditLogUpdate) Where(ps ...predicate.UserAuditLog) *UserAuditLogUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetOperationType sets the "operation_type" field.
func (m *UserAuditLogUpdate) SetOperationType(v string) *UserAuditLogUpdate {
	m.mutation.SetOperationType(v)
	return m
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (m *UserAuditLogUpdate) SetNillableOperationType(v *string) *UserAuditLogUpdate {
	if v != nil {
		m.SetOperationType(*v)
	}
	return m
}

// SetOperationTime sets the "operation_time" field.
func (m *UserAuditLogUpdate) SetOperationTime(v string) *UserAuditLogUpdate {
	m.mutation.SetOperationTime(v)
	return m
}

// SetNillableOperationTime sets the "operation_time" field if the given value is not nil.
func (m *UserAuditLogUpdate) SetNillableOperationTime(v *string) *UserAuditLogUpdate {
	if v != nil {
		m.SetOperationTime(*v)
	}
	return m
}

// SetOldValue sets the "old_value" field.
func (m *UserAuditLogUpdate) SetOldValue(v string) *UserAuditLogUpdate {
	m.mutation.SetOldValue(v)
	return m
}

// SetNillableOldValue sets the "old_value" field if the given value is not nil.
func (m *UserAuditLogUpdate) SetNillableOldValue(v *string) *UserAuditLogUpdate {
	if v != nil {
		m.SetOldValue(*v)
	}
	return m
}

// ClearOldValue clears the value of the "old_value" field.
func (m *UserAuditLogUpdate) ClearOldValue() *UserAuditLogUpdate {
	m.mutation.ClearOldValue()
	return m
}

// SetNewValue sets the "new_value" field.
func (m *UserAuditLogUpdate) SetNewValue(v string) *UserAuditLogUpdate {
	m.mutation.SetNewValue(v)
	return m
}

// SetNillableNewValue sets the "new_value" field if the given value is not nil.
func (m *UserAuditLogUpdate) SetNillableNewValue(v *string) *UserAuditLogUpdate {
	if v != nil {
		m.SetNewValue(*v)
	}
	return m
}

// ClearNewValue clears the value of the "new_value" field.
func (m *UserAuditLogUpdate) ClearNewValue() *UserAuditLogUpdate {
	m.mutation.ClearNewValue()
	return m
}

// Mutation returns the UserAuditLogMutation object of the builder.
func (m *UserAuditLogUpdate) Mutation() *UserAuditLogMutation {
	return m.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *UserAuditLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserAuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *UserAuditLogUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAuditLogUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *UserAuditLogUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userauditlog.Table, userauditlog.Columns, sqlgraph.NewFieldSpec(userauditlog.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.OperationType(); ok {
		_spec.SetField(userauditlog.FieldOperationType, field.TypeString, value)
	}
	if value, ok := u.mutation.OperationTime(); ok {
		_spec.SetField(userauditlog.FieldOperationTime, field.TypeString, value)
	}
	if value, ok := u.mutation.OldValue(); ok {
		_spec.SetField(userauditlog.FieldOldValue, field.TypeString, value)
	}
	if u.mutation.OldValueCleared() {
		_spec.ClearField(userauditlog.FieldOldValue, field.TypeString)
	}
	if value, ok := u.mutation.NewValue(); ok {
		_spec.SetField(userauditlog.FieldNewValue, field.TypeString, value)
	}
	if u.mutation.NewValueCleared() {
		_spec.ClearField(userauditlog.FieldNewValue, field.TypeString)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// UserAuditLogUpdateOne is the builder for updating a single UserAuditLog entity.
type UserAuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserAuditLogMutation
}

// SetOperationType sets the "operation_type" field.
func (m *UserAuditLogUpdateOne) SetOperationType(v string) *UserAuditLogUpdateOne {
	m.mutation.SetOperationType(v)
	return m
}

// SetNillableOperationType sets the "operation_type" field if the given value is not nil.
func (m *UserAuditLogUpdateOne) SetNillableOperationType(v *string) *UserAuditLogUpdateOne {
	if v != nil {
		m.SetOperationType(*v)
	}
	return m
}

// SetOperationTime sets the "operation_time" field.
func (m *UserAuditLogUpdateOne) SetOperationTime(v string) *UserAuditLogUpdateOne {
	m.mutation.SetOperationTime(v)
	return m
}

// SetNillableOperationTime sets the "operation_time" field if the given value is not nil.
func (m *UserAuditLogUpdateOne) SetNillableOperationTime(v *string) *UserAuditLogUpdateOne {
	if v != nil {
		m.SetOperationTime(*v)
	}
	return m
}

// SetOldValue sets the "old_value" field.
func (m *UserAuditLogUpdateOne) SetOldValue(v string) *UserAuditLogUpdateOne {
	m.mutation.SetOldValue(v)
	return m
}

// SetNillableOldValue sets the "old_value" field if the given value is not nil.
func (m *UserAuditLogUpdateOne) SetNillableOldValue(v *string) *UserAuditLogUpdateOne {
	if v != nil {
		m.SetOldValue(*v)
	}
	return m
}

// ClearOldValue clears the value of the "old_value" field.
func (m *UserAuditLogUpdateOne) ClearOldValue() *UserAuditLogUpdateOne {
	m.mutation.ClearOldValue()
	return m
}

// SetNewValue sets the "new_value" field.
func (m *UserAuditLogUpdateOne) SetNewValue(v string) *UserAuditLogUpdateOne {
	m.mutation.SetNewValue(v)
	return m
}

// SetNillableNewValue sets the "new_value" field if the given value is not nil.
func (m *UserAuditLogUpdateOne) SetNillableNewValue(v *string) *UserAuditLogUpdateOne {
	if v != nil {
		m.SetNewValue(*v)
	}
	return m
}

// ClearNewValue clears the value of the "new_value" field.
func (m *UserAuditLogUpdateOne) ClearNewValue() *UserAuditLogUpdateOne {
	m.mutation.ClearNewValue()
	return m
}

// Mutation returns the UserAuditLogMutation object of the builder.
func (m *UserAuditLogUpdateOne) Mutation() *UserAuditLogMutation {
	return m.mutation
}

// Where appends a list predicates to the UserAuditLogUpdate builder.
func (u *UserAuditLogUpdateOne) Where(ps ...predicate.UserAuditLog) *UserAuditLogUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *UserAuditLogUpdateOne) Select(field string, fields ...string) *UserAuditLogUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated UserAuditLog entity.
func (u *UserAuditLogUpdateOne) Save(ctx context.Context) (*UserAuditLog, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserAuditLogUpdateOne) SaveX(ctx context.Context) *UserAuditLog {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *UserAuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserAuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *UserAuditLogUpdateOne) sqlSave(ctx context.Context) (_n *UserAuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(userauditlog.Table, userauditlog.Columns, sqlgraph.NewFieldSpec(userauditlog.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserAuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userauditlog.FieldID)
		for _, f := range fields {
			if !userauditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userauditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.OperationType(); ok {
		_spec.SetField(userauditlog.FieldOperationType, field.TypeString, value)
	}
	if value, ok := u.mutation.OperationTime(); ok {
		_spec.SetField(userauditlog.FieldOperationTime, field.TypeString, value)
	}
	if value, ok := u.mutation.OldValue(); ok {
		_spec.SetField(userauditlog.FieldOldValue, field.TypeString, value)
	}
	if u.mutation.OldValueCleared() {
		_spec.ClearField(userauditlog.FieldOldValue, field.TypeString)
	}
	if value, ok := u.mutation.NewValue(); ok {
		_spec.SetField(userauditlog.FieldNewValue, field.TypeString, value)
	}
	if u.mutation.NewValueCleared() {
		_spec.ClearField(userauditlog.FieldNewValue, field.TypeString)
	}
	_n = &UserAuditLog{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userauditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
