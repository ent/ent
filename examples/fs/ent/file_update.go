// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/examples/fs/ent/file"
	"entgo.io/ent/examples/fs/ent/predicate"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetName sets the "name" field.
func (m *FileUpdate) SetName(v string) *FileUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *FileUpdate) SetNillableName(v *string) *FileUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDeleted sets the "deleted" field.
func (m *FileUpdate) SetDeleted(v bool) *FileUpdate {
	m.mutation.SetDeleted(v)
	return m
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (m *FileUpdate) SetNillableDeleted(v *bool) *FileUpdate {
	if v != nil {
		m.SetDeleted(*v)
	}
	return m
}

// SetParentID sets the "parent_id" field.
func (m *FileUpdate) SetParentID(v int) *FileUpdate {
	m.mutation.SetParentID(v)
	return m
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (m *FileUpdate) SetNillableParentID(v *int) *FileUpdate {
	if v != nil {
		m.SetParentID(*v)
	}
	return m
}

// ClearParentID clears the value of the "parent_id" field.
func (m *FileUpdate) ClearParentID() *FileUpdate {
	m.mutation.ClearParentID()
	return m
}

// SetParent sets the "parent" edge to the File entity.
func (m *FileUpdate) SetParent(v *File) *FileUpdate {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the File entity by IDs.
func (m *FileUpdate) AddChildIDs(ids ...int) *FileUpdate {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the File entity.
func (m *FileUpdate) AddChildren(v ...*File) *FileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (m *FileUpdate) Mutation() *FileMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the File entity.
func (u *FileUpdate) ClearParent() *FileUpdate {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the File entity.
func (u *FileUpdate) ClearChildren() *FileUpdate {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to File entities by IDs.
func (u *FileUpdate) RemoveChildIDs(ids ...int) *FileUpdate {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to File entities.
func (u *FileUpdate) RemoveChildren(v ...*File) *FileUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *FileUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *FileUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Deleted(); ok {
		_spec.SetField(file.FieldDeleted, field.TypeBool, value)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetName sets the "name" field.
func (m *FileUpdateOne) SetName(v string) *FileUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *FileUpdateOne) SetNillableName(v *string) *FileUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDeleted sets the "deleted" field.
func (m *FileUpdateOne) SetDeleted(v bool) *FileUpdateOne {
	m.mutation.SetDeleted(v)
	return m
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (m *FileUpdateOne) SetNillableDeleted(v *bool) *FileUpdateOne {
	if v != nil {
		m.SetDeleted(*v)
	}
	return m
}

// SetParentID sets the "parent_id" field.
func (m *FileUpdateOne) SetParentID(v int) *FileUpdateOne {
	m.mutation.SetParentID(v)
	return m
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (m *FileUpdateOne) SetNillableParentID(v *int) *FileUpdateOne {
	if v != nil {
		m.SetParentID(*v)
	}
	return m
}

// ClearParentID clears the value of the "parent_id" field.
func (m *FileUpdateOne) ClearParentID() *FileUpdateOne {
	m.mutation.ClearParentID()
	return m
}

// SetParent sets the "parent" edge to the File entity.
func (m *FileUpdateOne) SetParent(v *File) *FileUpdateOne {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the File entity by IDs.
func (m *FileUpdateOne) AddChildIDs(ids ...int) *FileUpdateOne {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the File entity.
func (m *FileUpdateOne) AddChildren(v ...*File) *FileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (m *FileUpdateOne) Mutation() *FileMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the File entity.
func (u *FileUpdateOne) ClearParent() *FileUpdateOne {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the File entity.
func (u *FileUpdateOne) ClearChildren() *FileUpdateOne {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to File entities by IDs.
func (u *FileUpdateOne) RemoveChildIDs(ids ...int) *FileUpdateOne {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to File entities.
func (u *FileUpdateOne) RemoveChildren(v ...*File) *FileUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated File entity.
func (u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *FileUpdateOne) sqlSave(ctx context.Context) (_n *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Deleted(); ok {
		_spec.SetField(file.FieldDeleted, field.TypeBool, value)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.ParentTable,
			Columns: []string{file.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   file.ChildrenTable,
			Columns: []string{file.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &File{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
