{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "config" }}

{{ $pkg := base $.Config.Package }}
{{ template "header" $ }}

{{ if $.FeatureEnabled "sql/schemaconfig" -}}import "{{ $.Config.Package }}/internal"{{ end }}

{{ template "import" $ }}

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
	{{- with $tmpls := matchTemplate (printf "dialect/%s/config/fields/*" $.Storage) }}
		{{- range $tmpl := $tmpls }}
			{{ xtemplate $tmpl $ }}
		{{- end }}
	{{- end }}
	{{ if $.FeatureEnabled "sql/schemaconfig" }}
		// schemaConfig can be used to pass alternate
		// schema names for ent models.
		schemaConfig internal.SchemaConfig
	{{ end }}
}

// hooks per client, for fast access.
type hooks struct {
	{{- range $n := $.Nodes }}
    	{{ $n.Name }} []ent.Hook
	{{- end }}
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

{{ with $tmpls := matchTemplate (printf "dialect/%s/config/options/*" $.Storage) }}
	{{ range $tmpl := $tmpls }}
		{{ xtemplate $tmpl $ }}
	{{ end }}
{{ end }}

{{ if $.FeatureEnabled "sql/schemaconfig" }}
	// SchemaConfig represents alternative db names
	// for all ent models that can be passed
	// at runtime.
	type SchemaConfig = internal.SchemaConfig

	// WithAlternateSchemas allows an alternate
	// database name to be passed into ent operations.
	func WithAlternateSchemas(s internal.SchemaConfig) Option {
		return func(c *config) {
			c.schemaConfig = s
		}
	}
{{ end }}

{{ end }}
