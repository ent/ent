{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "dialect/dynamodb/create" }}
{{ $builder := pascal $.Scope.Builder }}
{{ $receiver := receiver $builder }}
{{ $mutation := print $receiver ".mutation"  }}

func ({{ $receiver }} *{{ $builder }}) dynamodbSave(ctx context.Context) (*{{ $.Name }}, error) {
	_node, _spec := {{ $receiver }}.createSpec()
	if err := dynamodbgraph.CreateNode(ctx, {{ $receiver }}.driver, _spec); err != nil {
		return nil, err
	}
	return _node, nil
}

func ({{ $receiver }} *{{ $builder }}) createSpec() (*{{ $.Name }}, *dynamodbgraph.CreateSpec) {
	var (
		_node = &{{ $.Name }}{config: {{ $receiver }}.config}
		_spec = &dynamodbgraph.CreateSpec{
			Table: {{ $.Package }}.Table,
			ID: &dynamodbgraph.FieldSpec{
				Type: field.{{ $.ID.Type.ConstName }},
				Key: {{ $.Package }}.{{ $.ID.Constant }},
			},
		}
	)
	{{- if $.ID.UserDefined }}
		if id, ok := {{ $mutation }}.{{ $.ID.MutationGet }}(); ok {
			_node.ID = id
			_spec.ID.Value = id
		}
	{{- end }}
	{{- range $f := $.MutationFields }}
		if value, ok := {{ $mutation }}.{{ $f.MutationGet }}(); ok {
			_spec.Fields = append(_spec.Fields, &dynamodbgraph.FieldSpec{
				Type: field.{{ $f.Type.ConstName }},
				Value: value,
				Key: {{ $.Package }}.{{ $f.Constant }},
			})
			_node.{{ $f.StructField }} = {{ if $f.Nillable }}&{{ end }}value
		}
	{{- end }}
	{{- if ne $.Config.Storage.Name "dynamodb" }}
	{{- range $e := $.Edges }}
		if nodes := {{ $mutation }}.{{ $e.StructField }}IDs(); len(nodes) > 0 {
			{{- with extend $ "Edge" $e "Nodes" true "Zero" "nil" }}
				{{ template "dialect/dynamodb/defedge" . }}{{/* defined in dynamodb/update.tmpl */}}
			{{- end }}
			{{- if $e.OwnFK }}
				{{- $fk := $e.ForeignKey }}
				_node.{{ $fk.StructField }} = {{ if $fk.Field.NillableValue }}&{{ end }}nodes[0]
			{{- end }}
			_spec.Edges = append(_spec.Edges, edge)
		}
	{{- end }}
	{{- end }}
	return _node, _spec
}

{{ end }}

{{ define "dialect/dynamodb/create_bulk" }}
{{ $builder := pascal $.Scope.Builder }}
{{ $receiver := receiver $builder }}

// Save creates the {{ $.Name }} entities in the database.
func ({{ $receiver }} *{{ $builder }}) Save(ctx context.Context) ([]*{{ $.Name }}, error) {
	specs := make([]*dynamodbgraph.CreateSpec, len({{ $receiver }}.builders))
	nodes := make([]*{{ $.Name }}, len({{ $receiver }}.builders))
	mutators := make([]Mutator, len({{ $receiver }}.builders))
	for i := range {{ $receiver }}.builders {
		func(i int, root context.Context) {
			builder := {{ $receiver }}.builders[i]
			{{- if $.HasDefault }}
				builder.defaults()
			{{- end }}
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*{{ $.MutationName }})
				if !ok {
					return nil, ferrs.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, {{ $receiver }}.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					err = dynamodbgraph.BatchCreate(ctx, {{ $receiver }}.driver, &dynamodbgraph.BatchCreateSpec{Nodes: specs})
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				{{- if and $.ID.UserDefined (or $.ID.IsString $.ID.IsUUID) }}
					{{- /* Do nothing, because these 2 types must be supplied by the user. */ -}}
				{{- else }}
					{{- if $.ID.UserDefined }}
						if nodes[i].ID == 0 {
					{{- end }}
						id := specs[i].ID.Value.(int64)
						nodes[i].ID = {{ $.ID.Type }}(id)
					{{- if $.ID.UserDefined }}
						}
					{{- end }}
				{{- end }}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, {{ $receiver }}.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func ({{ $receiver }} *{{ $builder }}) SaveX(ctx context.Context) []*{{ $.Name }} {
	v, err := {{ $receiver }}.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
{{ end }}
