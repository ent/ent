{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "dialect/sql/decode/one" }}
{{ $receiver := $.Receiver }}

// scanValues returns the types for scanning values from sql.Rows.
func (*{{ $.Name }}) scanValues() []interface{} {
	return []interface{} {
		&{{ if not $.ID.UserDefined }}sql.NullInt64{{ else }}{{ $.ID.NullType }}{{ end }}{},
		{{- range $_, $f := $.Fields }}
			&{{ $f.NullType }}{},
		{{- end }}
	}
}

{{- if $.HasFK }}
	// fkValues returns the types for scanning foreign-keys values from sql.Rows.
	func (*{{ $.Name }}) fkValues() []interface{} {
		return []interface{} {
			{{- range $e := $.FKEdges }}
				&{{ if not $e.Type.ID.UserDefined }}sql.NullInt64{{ else }}{{ $e.Type.ID.NullType }}{{ end }}{},
			{{- end }}
		}
	}
{{- end }}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the {{ $.Name }} fields.
func ({{ $receiver }} *{{ $.Name }}) assignValues(values ...interface{}) error {
		if m, n := len(values), len({{ $.Package }}.Columns); m != n {
			return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
		}
		{{- if and $.ID.UserDefined (or $.ID.IsString $.ID.IsUUID) }}
			{{- with extend $ "Idx" 0 "Field" $.ID "Rec" $receiver }}
				{{ template "dialect/sql/decode/field" . }}
			{{- end }}
		{{- else }}
			value, ok := values[0].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			{{ $receiver }}.ID = {{ if $.ID.IsString }}strconv.FormatInt(value.Int64, 10){{ else }}{{ $.ID.Type }}(value.Int64){{ end }}
		{{- end }}
		values = values[1:]
		{{- range $i, $f := $.Fields }}
			{{- with extend $ "Idx" $i "Field" $f "Rec" $receiver }}
				{{ template "dialect/sql/decode/field" . }}
			{{- end }}
		{{- end }}
		{{- if $.HasFK }}
			values = values[{{ len $.Fields }}:]
			if len(values) == len({{ $.Package }}.ForeignKeys) {
				{{- range $i, $e := $.FKEdges }}
					{{- $id := $e.Type.ID }}
					{{- if and $id.UserDefined (or $id.IsString $id.IsUUID) }}
						{{- with extend $e.Type "Idx" 0 "Field" $id "Rec" $receiver }}
							{{ template "dialect/sql/decode/field" . }}
						{{- end }}
					{{- else }}
						if value, ok := values[0].(*sql.NullInt64); !ok {
							return fmt.Errorf("unexpected type %T for edge-field {{ $e.StructFKField }}", value)
						} else if value.Valid {
							{{ $receiver }}.Edges.{{ $e.StructFKField }} = new(int)
							*{{ $receiver }}.Edges.{{ $e.StructFKField }} = int(value.Int64)
						}
					{{- end }}
				{{- end }}
			}
		{{- end }}
		return nil
}
{{ end }}

{{ define "dialect/sql/decode/field" }}
	{{- $i := $.Scope.Idx -}}
	{{- $f := $.Scope.Field -}}
	{{- $ret := $.Scope.Rec -}}
	{{- if $f.IsJSON }}
		if value, ok := values[{{ $i }}].(*{{ $f.NullType }}); !ok {
			return fmt.Errorf("unexpected type %T for field {{ $f.Name }}", values[{{ $i }}])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &{{ $ret }}.{{ $f.StructField }}); err != nil {
				return fmt.Errorf("unmarshal field {{ $f.Name }}: %v", err)
			}
		}
	{{- else }}
		{{- $nulltype := $f.NullType -}}
		if value, ok := values[{{ $i }}].(*{{ $nulltype }}); !ok {
			return fmt.Errorf("unexpected type %T for field {{ $f.Name }}", values[{{ $i }}])
		{{- if hasPrefix $nulltype "sql" }}
			} else if value.Valid {
				{{- if $f.Nillable }}
					{{ $ret }}.{{ $f.StructField }} = new({{ $f.Type }})
					*{{ $ret }}.{{ $f.StructField }} = {{ $f.NullTypeField "value" }}
				{{- else }}
					{{ $ret }}.{{ $f.StructField }} = {{ $f.NullTypeField "value" }}
				{{- end }}
		{{- else }}
			} else if value != nil {
				{{ $ret }}.{{ $f.StructField }} = *value
		{{- end }}
		}
	{{- end }}
{{- end }}

{{ define "dialect/sql/decode/many" }}
{{ end }}
