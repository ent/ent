{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "migrate/diff" }}
// Diff creates a migration file containing the statements to resolve the diff
// between the Ent schema and the connected database.
func (s *Schema) Diff(ctx context.Context, opts ...schema.MigrateOption) error {
    migrate, err := schema.NewMigrate(s.drv, opts...)
    if err != nil {
        return fmt.Errorf("ent/migrate: %w", err)
    }
    return migrate.Diff(ctx, Tables...)
}
{{ end }}

{{ define "migrate/main" }}
    {{- with extend $ "Package" "main" -}}
        {{ template "header" . }}
    {{ end }}

    //go:build ignore
    // +build ignore

    import (
        "flag"
        "log"

        "entgo.io/ent/dialect/sql/schema"
        _ "github.com/go-sql-driver/mysql"
        _ "github.com/lib/pq"
        _ "github.com/mattn/go-sqlite3"

        "{{ .Config.Package }}"
    )

    func main() {
        var (
            dsn string
            dir string
            drv string
        )
        flag.StringVar(&dsn, "dsn", "", "dsn of development DB to connect to")
        flag.StringVar(&dir, "dir", "migrations", "path/to/migration/files")
        flag.Parse()
        // Create the migration directory.
        md, err := migrate.NewLocalDir(dir)
        if err != nil {
            log.Fatalln(err)
        }
        s := strings.SplitN(dsn, "://", 1)
        if len(s) != 2 {
            log.Fatalln("bad dsn: "+dsn)
        }
        dsn = s[1]
        switch s[0] {
        case "sqlite":
            drv = "sqlite3"
        case "mysql", "postgres":
            drv = s[0]
        default:
            log.Fatalln("unknown driver: "+s[0])
        }
        // Create the client.
        client, err := {{ base .Config.Package }}.Open(drv, dsn)
        if err != nil {
            log.Fatalln(err)
        }
        // Run the differ.
        if err := client.Schema.Diff(context.Background(), schema.WithDir(md)); err != nil {
            log.Fatalln(err)
        }
    }
{{ end }}