{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "dialect/sql/tx/fields" }}
// withLock enables locking selects.
withLock ent.LockType
{{ end }}

{{ define "dialect/sql/tx/funcs" }}
// LockForUpdate locks any rows read as if you issued an update for those rows.
func (tx *Tx) LockForUpdate() *Tx {
	if tx.withLock == ent.LockForUpdate {
		return tx
	}
	txWithLock := &Tx{config: tx.config, withLock: ent.LockForUpdate}
	txWithLock.init()
	return txWithLock
}

// LockForShare sets a shared mode lock on any rows that are read.
func (tx *Tx) LockForShare() *Tx {
	if tx.withLock == ent.LockForShare {
		return tx
	}
	txWithLock := &Tx{config: tx.config, withLock: ent.LockForShare}
	txWithLock.init()
	return txWithLock
}
{{ end }}

{{ define "dialect/sql/txoptions" }}
// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		{{ range $_, $n := $.Nodes -}}
			{{ $n.Name }}: New{{ $n.Name }}Client(cfg),
		{{ end -}}
	}, nil
}
{{ end }}
