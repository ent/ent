{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "dialect/sql/create" }}
{{ $builder := pascal $.Scope.Builder }}
{{ $receiver := receiver $builder }}
{{ $mutation := print $receiver ".mutation"  }}

// OnConflict specifies how to handle inserts that conflict with a unique constraint on {{ $.Name }} entities.
func ({{ $receiver }} *{{ $builder }}) OnConflict(constraintField string, otherFields ...string) *{{ $builder }} {
	{{ $receiver }}.constraintFields = []string{constraintField}
	{{ $receiver }}.constraintFields = append({{ $receiver }}.constraintFields, otherFields...)
	return {{ $receiver }}
}

func ({{ $receiver }} *{{ $builder }}) sqlSave(ctx context.Context) (*{{ $.Name }}, error) {
	err := {{ $receiver }}.validateUpsertConstraints()
	if err!=nil {
		return nil, err
	}
	_node, _spec := {{ $receiver }}.createSpec()
	if err := sqlgraph.CreateNode(ctx, {{ $receiver }}.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	{{- if and $.ID.UserDefined (or $.ID.IsString $.ID.IsUUID) }}
		{{- /* Do nothing, because these 2 types must be supplied by the user. */ -}}
	{{- else }}
		{{- if $.ID.UserDefined }}
			if _node.ID == 0 {
		{{- end }}
			id := _spec.ID.Value.(int64)
			_node.ID = {{ $.ID.Type }}(id)
		{{- if $.ID.UserDefined }}
			}
		{{- end }}
	{{- end }}
	return _node, nil
}

func ({{ $receiver }} *{{ $builder }}) createSpec() (*{{ $.Name }}, *sqlgraph.CreateSpec) {
	var (
		_node = &{{ $.Name }}{config: {{ $receiver }}.config}
		_spec = &sqlgraph.CreateSpec{
			Table: {{ $.Package }}.Table,
			ID: &sqlgraph.FieldSpec{
				Type: field.{{ $.ID.Type.ConstName }},
				Column: {{ $.Package }}.{{ $.ID.Constant }},
			},
		}
	)

	if {{ $receiver }}.constraintFields != nil {
		_spec.ConstraintFields = {{ $receiver }}.constraintFields
	}

	{{- /* Allow mutating the sqlgraph.CreateSpec by ent extensions or user templates.*/}}
	{{- with $tmpls := matchTemplate "dialect/sql/create/spec/*" }}
		{{- range $tmpl := $tmpls }}
			{{- xtemplate $tmpl $ }}
		{{- end }}
	{{- end }}
	{{- if $.ID.UserDefined }}
		if id, ok := {{ $mutation }}.{{ $.ID.MutationGet }}(); ok {
			_node.ID = id
			_spec.ID.Value = id
		}
	{{- end }}
	{{- range $f := $.MutationFields }}
		if value, ok := {{ $mutation }}.{{ $f.MutationGet }}(); ok {
			_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
				Type: field.{{ $f.Type.ConstName }},
				Value: value,
				Column: {{ $.Package }}.{{ $f.Constant }},
			})
			_node.{{ $f.StructField }} = {{ if $f.Nillable }}&{{ end }}value
		}
	{{- end }}
	{{- range $e := $.Edges }}
		if nodes := {{ $mutation }}.{{ $e.StructField }}IDs(); len(nodes) > 0 {
			{{- with extend $ "Edge" $e "Nodes" true "Zero" "nil" }}
				{{ template "dialect/sql/defedge" . }}{{/* defined in sql/update.tmpl */}}
			{{- end }}
			{{- if $e.OwnFK }}
				{{- $fk := $e.ForeignKey }}
				_node.{{ $fk.StructField }} = {{ if $fk.Field.Nillable }}&{{ end }}nodes[0]
			{{- end }}
			_spec.Edges = append(_spec.Edges, edge)
		}
	{{- end }}
	return _node, _spec
}

// validateUpsertConstraints validates the columns specified in OnConflict are valid for
// handling conflicts on {{ $.Name }} entities.
func ({{ $receiver }} *{{ $builder }}) validateUpsertConstraints() error {
	for _, f := range {{ $receiver }}.constraintFields {
		if !{{ $.Package }}.ValidConstraintColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for upsert conflict resolution, valid fields are: %+v", f, {{ $.Package }}.UniqueColumns )}
		}
	}
	return nil
}

{{ end }}

{{ define "dialect/sql/create_bulk" }}
{{ $builder := pascal $.Scope.Builder }}
{{ $receiver := receiver $builder }}

// OnConflict specifies how to handle bulk inserts that conflict with a unique constraint on {{ $.Name }} entities.
func ({{ $receiver }} *{{ $builder }}) OnConflict(constraintField string, otherFields ...string) *{{ $builder }} {
	{{ $receiver }}.batchConstraintFields = []string{constraintField}
	{{ $receiver }}.batchConstraintFields = append({{ $receiver }}.batchConstraintFields, otherFields...)

	return {{ $receiver }}
}

// Save creates the {{ $.Name }} entities in the database.
func ({{ $receiver }} *{{ $builder }}) Save(ctx context.Context) ([]*{{ $.Name }}, error) {
	err := {{ $receiver }}.validateUpsertConstraints()
	if err!=nil {
		return nil, err
	}

	specs := make([]*sqlgraph.CreateSpec, len({{ $receiver }}.builders))
	nodes := make([]*{{ $.Name }}, len({{ $receiver }}.builders))
	mutators := make([]Mutator, len({{ $receiver }}.builders))
	for i := range {{ $receiver }}.builders {
		func(i int, root context.Context) {
			builder := {{ $receiver }}.builders[i]
			{{- if $.HasDefault }}
				builder.defaults()
			{{- end }}
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*{{ $.MutationName }})
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, {{ $receiver }}.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, {{ $receiver }}.driver, &sqlgraph.BatchCreateSpec{Nodes: specs, BatchConstraintFields: {{ $receiver }}.batchConstraintFields}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				{{- if and $.ID.UserDefined (or $.ID.IsString $.ID.IsUUID) }}
					{{- /* Do nothing, because these 2 types must be supplied by the user. */ -}}
				{{- else }}
					{{- if $.ID.UserDefined }}
						if nodes[i].ID == 0 {
					{{- end }}
						id := specs[i].ID.Value.(int64)
						nodes[i].ID = {{ $.ID.Type }}(id)
					{{- if $.ID.UserDefined }}
						}
					{{- end }}
				{{- end }}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, {{ $receiver }}.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func ({{ $receiver }} *{{ $builder }}) SaveX(ctx context.Context) []*{{ $.Name }} {
	v, err := {{ $receiver }}.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// validateUpsertConstraints validates the columns specified in OnConflict are valid for
// handling conflicts on batch inserted {{ $.Name }} entities.
func ({{ $receiver }} *{{ $builder }}) validateUpsertConstraints() error {
	for _, f := range {{ $receiver }}.batchConstraintFields {
		if !{{ $.Package }}.ValidConstraintColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for upsert conflict resolution, valid fields are: %+v", f, {{ $.Package }}.UniqueColumns )}
		}
	}
	return nil
}
{{ end }}
