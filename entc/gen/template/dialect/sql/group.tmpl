{{/*
Copyright 2019-present Facebook Inc. All rights reserved.
This source code is licensed under the Apache 2.0 license found
in the LICENSE file in the root directory of this source tree.
*/}}

{{ define "dialect/sql/group" }}
{{ $builder := pascal $.Scope.Builder }}
{{ $receiver := receiver $builder }}

func ({{ $receiver }} *{{ $builder }}) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range {{ $receiver }}.fields {
		if !{{ $.Package }}.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := {{ $receiver }}.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := {{ $receiver }}.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}


func ({{ $receiver }} *{{ $builder }}) sqlQuery() *sql.Selector {
	selector := {{ $receiver }}.sql
	columns := make([]string, 0, len({{ $receiver }}.fields) + len({{ $receiver}}.fns))
	columns = append(columns, {{ $receiver }}.fields...)
	for _, fn := range {{ $receiver }}.fns {
		columns = append(columns, fn(selector, {{ $.Package }}.ValidColumn))
	}
	return selector.Select(columns...).GroupBy({{ $receiver }}.fields...)
}
{{ end }}
