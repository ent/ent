// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package load

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x41\x6b\xdc\x30\x10\x85\xcf\x9a\x5f\x31\x15\x5b\x22\x81\xa3\xd0\x6b\x61\x4f\xcd\x1e\x52\x68\x52\xd8\x40\x0f\xdb\x25\xc8\xf6\x78\x23\x6a\xcb\xae\xa4\x94\x06\xa1\xff\x5e\x24\xd9\x0b\x3d\xd9\xf2\x7b\xfa\xe6\x3d\x4f\x8c\xd8\xd3\x60\x2c\x21\x9f\xb4\xb1\x1c\x53\x82\xbb\x3b\xfc\x32\xf7\x84\x17\xb2\xe4\x74\xa0\x1e\xdb\x77\xbc\x21\x1b\xba\xeb\xa7\x1b\x85\xf7\x4f\xf8\xf8\xf4\x8c\x87\xfb\x87\x67\x05\x8b\xee\x7e\xe9\x0b\x61\x66\x00\x98\x69\x99\x5d\x40\x01\x8c\xcf\x9e\x03\xe3\xed\x7b\xa0\xfc\x12\x23\x06\x9a\x96\x51\x07\x42\x5e\x5d\xbe\x8c\x2c\xd2\xe2\x8c\x0d\x03\xf2\x8f\xbf\x39\xaa\xef\x2b\x31\x25\x90\x00\x31\xe2\xae\xd5\x9e\xf0\xf3\x1e\xcb\x73\xd3\xf3\xdd\x3f\xda\xa1\xef\x5e\x69\xd2\x1e\xf7\x78\x3a\x93\x0d\xea\xc1\x06\x72\x83\xee\x28\x16\xb4\xd3\xf6\x42\xb8\x7b\x69\x70\x67\xf5\x54\x30\xea\x51\x4f\xe4\x33\x9f\xb1\x18\x6f\x57\x7e\x4a\x2a\x1f\xae\x51\x7c\x4c\x7c\xbd\x93\x52\x53\x58\x64\x7b\xbc\x4d\x09\x12\xc0\xf0\x66\xbb\xd2\x59\x48\x8c\xc0\x72\x90\xd1\x58\xf2\x78\x3a\x9f\xce\xb9\x34\xb0\x61\x76\xf8\xd2\xac\xf9\xf2\xdc\x1a\x65\xcb\x1b\x81\xb1\xb6\x41\x72\x2e\x6b\xdf\xb4\xf3\xaf\x7a\x3c\x16\x51\x54\x8f\x04\xc6\xcc\x50\x1c\x1f\xf6\x68\xcd\x58\xee\xb0\x41\x9b\x51\x90\x73\x59\xce\x15\xea\xdc\x3d\xea\x65\x21\xdb\x8b\x72\x6c\xb0\x95\x90\xd5\xd9\xab\x63\xe8\xe7\xb7\xa0\x7e\x38\x13\x48\x94\x7d\xa8\xaf\xb3\xb1\x9b\xb1\xc6\x15\xfc\xa7\xe5\x52\xca\x6b\xb7\x6d\x4a\x1e\x3f\xbb\x52\xb2\xb2\xc8\xb9\xca\x3a\x06\x67\xec\x25\x7b\xd4\x21\x7b\x84\x94\xc5\x73\xf8\x6b\x82\xf8\x54\x48\xff\x6d\xbd\x96\xaa\x4b\x5f\x7f\x66\x4a\xf0\x2f\x00\x00\xff\xff\xb5\xb1\x2f\xf6\x87\x02\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 647, mode: os.FileMode(420), modTime: time.Unix(1566131522, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\xcd\x40\x03\xa9\x30\xe4\x77\x15\x7e\x18\xb6\x0c\xcb\x86\xa5\x43\xbb\xed\xa5\x28\x5a\x5a\x3a\xd9\x6c\x25\xca\x25\x69\xa7\x6d\xe0\xef\x3e\xdc\xf1\x68\x49\x96\x9b\x02\x29\x52\xa0\xb0\x78\xff\x78\xf7\xbb\x1f\x8f\xcc\x4e\x95\x1f\xd5\x06\xa1\xe9\x54\x95\x24\xba\xdd\x75\xd6\x43\x9a\xcc\xe6\x68\xca\xae\xd2\x66\xb3\xfc\xe0\x3a\x33\x4f\x66\xf3\xba\xf5\xf4\x63\xb1\x6e\xb0\xf4\xf3\x24\x99\xcd\x37\xda\x6f\xf7\xeb\xbc\xec\xda\x65\xad\x4a\x5c\x77\xdd\x47\x6d\xca\xfd\x5a\xf9\xce\x2e\xd1\xb0\xfd\xf7\x6c\x96\xae\xdc\x62\xab\x96\xb5\xc6\xa6\x9a\x27\x59\x92\x2c\x97\xf0\x9a\x65\x60\x71\x67\xd1\xa1\xf1\x0e\x94\x01\x34\x3e\x17\x85\xdf\x2a\x0f\x77\xca\x71\xda\x58\x41\x6d\xbb\x16\x14\x94\x5d\xbb\x6b\x34\x56\xb0\x77\x68\x41\x4a\xcb\x13\xff\x65\x87\x31\xa4\xf3\x76\x5f\x7a\xb8\x4f\x66\xb7\xaa\x45\x00\x20\x89\x36\x1b\x00\x78\x4f\x95\x16\x73\xa3\x5a\x5c\x74\xad\xf6\xd8\xee\xfc\x97\xf9\xfb\x64\x76\x5d\x6d\xd0\x01\xc0\x9b\xb7\xcf\xe9\xf3\x64\x89\x24\x1f\x9b\xfe\x46\x55\x38\x36\xe5\xcf\x68\xca\xd5\x9d\xd9\xde\x98\x0a\x3f\xa3\x23\x5b\xfe\x8c\xb6\x3a\xc8\x47\xc6\x47\x86\x25\x84\x9c\xa2\x12\xe4\x8f\x00\x25\x38\x4e\x31\x19\xc2\xf2\x00\x30\xff\x50\x8c\xf0\x8f\x0b\xcc\x59\x20\xe6\xb4\xc1\x99\xb9\xda\xc0\x37\xa3\x7b\xb5\x19\x5b\xbf\xd6\x5f\x63\xf0\xe7\xda\x78\xf9\x14\x6b\xa7\xbf\x9e\x05\xff\x65\xab\xac\x43\x36\x7b\xde\x47\x17\xf3\x32\x28\xc7\x1e\xff\x1a\xfd\x69\x1f\xb6\x58\x77\x5d\x33\xde\x60\xcf\xca\xb1\xc3\xad\x6e\x1a\xb5\x6e\xf0\xa2\x83\x11\xe5\xd8\xe5\xe5\xce\xeb\xce\xa8\xe6\xa2\x4b\x27\xca\xb1\xcb\xaf\x58\xab\x7d\xe3\x2f\xa7\x55\x05\xe5\xd8\xe3\x3f\xd5\xe8\x8a\xce\x93\x83\x1e\xa8\xe8\x71\x38\x29\x2f\x10\x8a\xe9\x3c\xe5\x13\x8b\x1f\x41\x27\xf6\xbb\xc0\x26\xe9\xc7\xf7\x79\x34\x36\x7c\x80\x41\x67\x86\xe7\xdc\x79\x85\x75\xd8\x7c\x6c\x67\xb1\x7e\x37\xdd\xfd\x15\xd6\x42\xb3\xd1\xe9\xb6\x58\x7f\x83\x2f\xd2\x96\x07\x98\x72\x63\x0e\x68\x1d\x9e\x9b\xea\x20\x3e\xdf\xfe\xd3\x5e\x5b\xac\xce\x6c\xad\x88\x2f\x74\x2d\x4c\x8b\x69\xdb\x82\xfc\x11\x7d\x0b\x8e\x7d\xe3\xa4\xd2\x13\xfd\x1e\xa8\x34\x40\x36\x19\xa2\x34\x1a\x2f\x4e\xc6\x37\x6f\xc7\x2d\xb9\x30\x18\x43\x91\xb7\x78\xc7\xb1\x4b\x8b\xca\x23\xd7\x28\x05\x51\xec\x50\x55\xb8\x3a\x88\xf4\x68\xe9\x72\xc9\x93\x7a\x6f\xca\xe8\x9a\xe2\x89\xcc\x99\xf4\xf6\x3e\x99\x19\x84\x62\x05\x57\xb4\xbc\x4f\x66\xcc\xd1\x82\x8b\xc4\x9c\xbe\xd3\x6c\x91\xcc\x98\x90\x51\x4a\xdf\x22\x55\x9b\x20\x24\xa9\xda\x04\xa1\x50\xad\x20\xa1\x7c\x07\x45\x00\xb1\x60\xeb\x1b\x17\x56\x41\x23\xec\x28\x82\x46\x56\x31\x5a\xe8\x7a\xc1\xaa\xb8\x62\xdd\x31\x99\xe9\x1a\x38\x7b\xcc\x7f\x76\xae\x2b\xd3\xec\x05\x20\xfc\xb4\x02\xa3\x1b\x2a\x6d\x66\x38\x05\x58\xf5\x08\x64\xec\x67\xd1\xef\xad\x01\x83\x82\xed\x5f\xca\xba\xad\x6a\xe4\x4a\xe4\x9b\x9e\xce\x3b\x0e\xaf\xd8\x13\xa8\xf4\xd5\x81\x82\x3f\x5e\xbf\xbc\x25\x67\xe6\x57\xa9\x0c\xac\x11\x2a\x24\xd7\x2a\x98\x50\x00\x71\xee\xd6\x1f\xb0\xf4\xf2\x23\x5d\x19\x6d\x9a\xba\xb8\x37\xd1\x56\x76\xca\x20\x5d\xc3\x9b\xb7\xeb\x2f\x1e\x17\x80\xd6\xd2\xff\xce\x66\x54\x9a\xe3\xa6\x05\xdf\xfb\x80\xb7\x36\x95\xb6\x58\xfa\x54\x5e\x24\xdc\xa8\x97\xb5\x44\xce\x32\x69\xe7\x31\x99\x09\xc7\x38\x64\xb1\x02\xa7\x6a\x0c\x6c\x8c\xb6\x01\x59\x6b\x87\x58\x46\xcc\x74\xb3\x80\xba\xf5\xf9\x35\xe5\x52\xa7\x73\x49\xfc\xd9\xa7\x02\x9e\x1d\xe6\x0b\x70\xbc\x0f\x07\x0f\x60\xd7\x9d\x85\x77\x0b\xa8\x69\x2b\xab\x0c\x71\x35\x50\x9f\xa2\x3a\x16\x5f\xf1\xf6\xb4\x1e\xf0\x0f\xa0\x1e\x30\x70\x40\x41\x52\xf4\x24\x1c\xb0\x90\x15\x91\x87\x03\xbe\x91\x7c\xcc\xb8\x78\xa9\x14\x41\xf9\xbb\x72\x22\x10\x75\xbc\xd9\x0a\xf1\x8d\x6b\x51\xc7\x5b\x2c\xaa\xe3\x5a\xd4\xfd\xfd\x53\x40\x83\x26\xad\xf3\x5e\x92\x66\x6c\x73\x4c\x66\x84\xb1\x5b\x40\xf7\x91\x10\xa8\xf3\x34\xbc\x18\xe8\x96\xb7\xd9\x0b\x12\x33\x1e\x74\xb1\x73\x93\x58\x93\x66\x2c\xab\x79\x01\x2b\xb8\x22\x75\x1f\xae\x9c\x84\x93\x57\xc0\x28\xa4\x5c\xfe\x64\x57\x46\x83\x53\xe0\xf8\x6c\x58\xc1\x95\xd8\x49\x78\x97\xcb\xc4\x5a\x81\xda\xed\xd0\x54\x69\x94\x2c\xc0\xd5\xa1\xd5\xe1\x01\x38\xe4\x15\x3f\x15\x9f\x92\x56\xd8\xd3\x8a\x77\x0f\xac\xca\xc3\x13\x75\x90\xea\x75\x48\xad\x1f\x04\x21\x4a\x7c\x5b\x0e\x73\x96\x77\xe8\x53\x66\xad\xab\xcf\x7d\xde\x92\x83\x64\x1e\x5f\xc1\x83\xdc\x6f\x62\x92\x57\xfc\xc5\x4d\xa4\x2a\x88\x7e\xba\xfa\xcc\xb5\x09\xf5\x42\x47\x0a\x16\xcb\x99\x1e\x9f\x06\x52\x8c\xcf\xc2\x71\x34\x13\xe9\x16\xca\x65\x34\xa5\x2e\x93\x01\xd9\x8f\x08\xb8\xb3\x6a\xe7\x78\xb6\x85\x62\x23\x2d\x5a\xf4\xdb\xae\x82\x3b\xed\xb7\x60\xb1\xec\x0e\x68\xc1\x77\x80\xc6\xed\x2d\x82\xe9\x60\xa7\x8c\x2e\xe9\x45\x06\x6d\x08\xaf\xcd\x46\x46\xe1\x64\x02\x4d\xe6\x60\x1d\x6f\xcb\xd3\xf3\xfe\x7c\x22\x56\x58\xa3\x05\x0a\x97\xf2\x9a\xba\x76\x60\x90\x43\x32\x74\x39\x1c\x86\x3d\x9c\x91\xff\xea\x42\xfb\x62\x45\x21\x61\xe9\xe4\x81\x0f\x48\x1d\x8f\x80\xd1\x4d\x38\x17\x47\x3a\x39\x82\xdd\xc8\x3d\xcd\x16\x6c\xd5\x03\x18\x38\x39\xc1\x2f\x88\x7f\x14\xbe\xe1\x41\x9b\xa0\x17\x4e\x46\x00\x8f\x0c\x9f\x10\xbb\x50\xcd\x05\xe8\x50\x4e\xe4\x43\xc8\x85\x22\x26\xc0\xc5\x23\x31\x81\x2e\x2a\x7e\x14\xbc\xf1\x89\x9f\xc0\xa7\x4f\x7f\x98\x9e\x5e\x95\x4f\x88\x60\x2c\xea\x02\x86\xfa\x34\x1b\x1e\x42\x31\x56\xd3\xe3\xc8\x85\x9e\xde\x07\x1e\x86\x2f\x84\x6c\xb4\xa2\xdc\x68\x46\xf9\xfc\x4f\x6d\xaa\x34\x83\xd5\xea\xa4\xff\xdb\x5b\x4e\x9d\x2e\x07\x9f\x5f\x37\xd8\xa6\xa3\xd1\xe1\x93\x63\xf2\x7f\x00\x00\x00\xff\xff\xc0\x1c\x36\xde\x3f\x11\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 4415, mode: os.FileMode(420), modTime: time.Unix(1566224088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
