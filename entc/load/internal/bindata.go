// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\xde\xfd\x14\x53\x03\x0d\xb4\xc1\x56\xee\x15\x45\x71\xb7\xb9\x3d\xa0\x48\x13\xd4\xd7\x8b\x1b\x34\x49\x5f\x8c\xc0\x95\xa5\x91\xcd\x58\x22\xb7\x14\xd7\xb1\xeb\xfa\xbb\x1f\x38\x43\x52\x94\x56\xda\xdd\xf8\x4f\x5e\xb2\x1a\x72\x86\x33\x3f\xcd\x3f\x8e\x7c\x78\x08\x2f\xd5\xea\x46\x8b\xf3\x0b\x03\xdf\x7d\xfb\x8f\x7f\x7d\xb3\xd2\xd8\xa0\x34\xf0\x3a\xcb\xf1\x4c\xa9\x4b\x38\x92\x79\x0a\x3f\x56\x15\xd0\xa6\x06\xec\xba\xbe\xc2\x22\x9d\x1e\x1e\xc2\xfb\x0b\xd1\x40\xa3\xd6\x3a\x47\xc8\x55\x81\x20\x1a\xa8\x44\x8e\xb2\xc1\x02\xd6\xb2\x40\x0d\xe6\x02\xe1\xc7\x55\x96\x5f\x20\x7c\x97\x7e\xeb\x57\xa1\x54\x6b\x59\x58\x11\x42\xd2\x96\xff\x1d\xbd\x7c\x75\xfc\xee\x15\x94\xa2\x42\x4f\xd3\x4a\x19\x28\x84\xc6\xdc\x28\x7d\x03\xaa\x04\x13\x9d\x67\x34\x62\x3a\x9d\xae\xb2\xfc\x32\x3b\x47\xa8\x54\x56\x4c\xa7\xa2\x5e\x29\x6d\x20\x99\x4e\x0e\x50\xe6\xaa\x10\xf2\xfc\xf0\x53\xa3\xe4\xc1\x74\x72\x50\xd6\xc6\xfe\xa7\xb1\xac\x30\x37\x07\x53\xda\x63\xce\x55\x2a\xd4\x21\x4a\x5a\x8b\x9f\x0f\x9b\xfc\x02\xeb\x6c\x84\x7c\x88\xc5\x39\x8e\xad\x95\x02\xab\x62\x6c\x51\xc8\x02\xaf\x0f\xa6\xb3\xa9\xb5\xfe\x1d\xd1\x40\xa3\xc3\xbd\x81\x4c\x02\x4a\x93\xba\x05\x73\x91\x19\xf8\x9c\x35\x64\x1e\x16\x50\x6a\x55\x43\x06\xb9\xaa\x57\x95\xb0\x18\x37\xa8\xc1\x41\x90\x4e\xcd\xcd\x0a\xbd\xc8\xc6\xe8\x75\x6e\xe0\x76\x3a\x39\xce\x6a\x04\xf7\xaf\x31\x5a\xc8\x73\xe8\xff\xfb\xc3\x62\xb4\x38\x90\x59\x8d\x73\x55\x0b\x83\xf5\xca\xdc\x1c\xfc\x31\x9d\xbc\x54\xb2\x14\x6e\xbf\x55\x2b\x7e\xee\xf2\xe6\xb4\xd2\xe5\x7e\x55\x9c\x63\xe3\xb6\x9d\x7c\x7c\x6e\x1f\x47\x4e\xb6\x68\x36\x5d\xe6\xd7\x16\xc4\x26\x30\xd3\xe3\x30\x33\xc1\xdd\xe3\x3e\xb2\x28\xbb\xc3\x4f\x3e\x3e\xa7\xc7\x61\x6e\xc1\x3b\xbb\xec\x3f\x2b\x75\x19\x69\xfe\x56\x35\xc2\x08\x25\x07\xd8\x2f\xec\xce\x2e\xf3\x5b\x55\x89\xfc\x66\x1f\xe6\x15\xed\xec\x72\xff\x28\xa5\x32\x99\x65\x68\xa0\xce\x56\x27\xfc\xca\x3e\x0a\x69\x50\x97\x59\x8e\xb7\x77\x9e\x3b\x6b\x77\x76\x44\xdc\x91\x6b\x85\x63\x0b\x6c\x72\x2d\xce\xb0\x81\x0c\x56\x9e\xe8\x42\x8c\x7d\xd2\x79\x4e\xe0\x68\x7d\x27\xc2\x4d\x48\x03\x70\x78\x08\x4c\x72\xfc\x04\xfd\xa1\xc5\x00\x2a\xd1\x98\x74\x3a\x79\x23\xae\xb1\x38\x22\x63\xcf\x94\xaa\x1c\x87\xc8\x33\x83\x0d\x88\x32\x3a\x15\xd4\xd9\x27\xcc\xd9\xbd\x6b\xcb\xf5\x8d\x90\x2c\x40\x48\x7f\x08\x1f\x49\x24\x10\xf1\xc1\x35\x91\xf8\x4c\xb6\x97\x1d\x64\x33\x92\x98\x7e\x8f\x40\x62\xc6\xe1\x38\x1a\x8d\xa4\xf1\x50\x3a\x92\xa5\x6a\xb7\x3d\x27\xe4\xd2\xf7\x37\x2b\xec\x2c\x38\x76\xab\x40\x97\xfd\x7d\x16\x1f\xb6\xe3\x74\x93\xf5\x22\xf1\x9d\xf8\x2b\xd2\xfd\xb9\x90\xe6\x87\xef\x47\xb9\x1b\xf1\x57\xef\xf0\x57\x72\x5d\x37\x61\xdb\xc9\x47\x06\xe5\x16\x8e\xe7\xf0\xbb\xd7\x25\xb8\x25\xda\xcd\x5d\xfe\x0f\x52\xfc\xb9\x0e\x0a\x90\x5f\x0c\xfc\x73\xfc\x6b\xda\xdc\x15\x70\x2c\xaa\x2a\x3b\xab\x70\x2f\x01\xd2\x6d\xee\x8a\xf8\x75\x65\x7d\x3b\xab\xf6\x12\xa1\xdc\xe6\xae\x88\x9f\xb0\xcc\xd6\x95\xd9\xcf\x8c\x82\x37\x0f\x4a\xf8\x3d\xab\x2c\x1c\x71\x4c\x8f\x4b\x38\xbd\xb2\xbb\x07\xe5\xfc\x22\xa4\xcd\x89\xae\xa4\xa5\xee\x71\x4c\xce\xa5\x90\x45\xef\xbd\xac\x8a\xcc\xa0\x37\x6b\xd7\x7b\xa1\xcd\xa7\x83\x76\x1d\xd5\xf5\xda\x84\x17\xb4\x43\x90\xf0\x9b\xbb\x32\x7e\xcf\x2a\x51\x64\x46\x69\xf2\x34\x8a\xfd\x71\x19\x57\x61\x73\xcf\xd1\x8d\xd2\xd9\x39\xfe\x82\x94\x7f\x77\x84\x49\xc3\x9b\x4f\x2f\xf1\xa6\x9f\xc1\xe3\x94\x3d\x98\xc1\xe3\x24\xce\xab\x3d\x45\x50\x5a\xf2\xd5\x5e\x88\x34\x7e\x73\x4f\x06\xe5\x49\x9b\x23\xec\xde\xa8\x18\x74\xec\xf2\x32\x68\xf3\xe9\x66\xe6\x88\x0b\x0a\x8c\x95\x94\x5d\x35\x65\xf2\x52\xd5\x35\x86\x77\xb2\x03\xd8\x9c\x37\x0f\x54\x25\xea\x01\x36\x93\x34\x91\xef\x91\xa3\x89\xef\x71\x5a\x1d\x0f\xf3\x6e\xde\xed\xc9\x79\x07\x6f\x3f\x33\xff\x86\x65\xd0\x7a\x3b\xab\xc6\xf2\x74\x53\xed\xdf\xb0\x0c\x1b\x07\x3b\xac\x98\x7f\x3c\x2b\x8f\x38\xe8\x96\x94\x7c\x24\xaf\x50\x37\x5b\xdd\x3b\x74\x58\xb4\xb3\xaf\xf7\x9f\x6b\xa1\xb1\xd8\xcd\xae\xdd\xce\xf1\x40\x7f\x6e\xdb\xc7\xb4\x1b\xfa\x7b\x44\xf9\x63\x75\x5a\xdc\xac\x6c\x3a\x35\xd3\xef\xe1\xd5\xcc\xd8\xba\x75\xf4\xa2\x02\x54\x5b\xde\x4c\xd4\x76\x9f\xf8\x54\xb1\x57\x9f\xdd\xdf\x3d\xd4\x58\x47\x28\x07\x77\xdd\x01\x34\xa3\x74\x8c\x9f\xc9\x3d\x73\x8d\xd4\x0b\x66\xd2\x23\x62\x95\x62\x58\xe8\x17\xf7\xab\x2b\xa3\x74\x3a\x2d\xd7\x32\xf7\x9c\x09\x16\xee\x4d\xff\x14\x76\xcc\x9c\xcf\xdf\x4e\x27\x12\x61\xb1\x84\x67\xf6\xf1\x76\x3a\xb1\x21\xb9\x08\x9e\x84\x45\xfa\x3e\x3b\x9f\x5b\xf2\xcd\x0a\x17\x31\xd9\xc6\xf2\x74\x42\x99\x23\xa6\xdb\x67\x4b\x67\xe8\x17\x81\xce\xcf\x76\xc5\xf9\xff\xc2\xaf\xb8\x67\xbb\xe4\x7d\x7b\xe1\x96\xfc\x33\xaf\x95\xed\x59\xb4\x56\xfa\xb3\x5a\x68\x17\xb4\xd4\x3e\xdb\xd5\xc8\x5b\x17\x50\x67\x97\x98\x0c\xfb\xec\x6c\x3e\x9d\xdc\x4d\x27\xa5\xd2\x70\x3a\x87\xcc\x58\x54\x74\x26\xcf\xd1\x8a\x8c\x5d\xde\xa2\x24\x31\xcd\x8a\xa2\xa5\x26\x99\x99\x11\xbb\x28\x6d\x57\x61\x79\x59\xc7\x17\xf4\xf8\xd5\x12\xa4\xa8\x3c\xa7\x4d\x3d\xcb\xf0\x76\x34\x96\x33\xa6\x47\x2e\xb2\x04\xde\x17\xd1\x48\xbc\x46\xb3\xd6\x12\x24\xb6\xce\xc1\xed\x76\xf0\x8e\x10\x2e\x44\x26\xef\xe0\x9f\x43\xee\x41\xbc\x49\x59\xf8\xb6\x3a\x76\x90\x84\xaf\x8e\x73\x40\xad\xed\xf3\x2d\x19\x57\x16\xe9\x2b\xad\x63\x83\xbc\x4a\xa2\x9a\x43\x59\x1b\xbb\xac\x74\x99\x70\x10\xc0\xd7\x7f\x2e\xe0\xeb\xab\x83\xb9\x65\xa4\xf7\xe5\x24\x30\x5a\x0d\x21\xf5\x8c\x0e\xba\xed\x7b\x13\x04\x1e\xf2\x9a\x52\x75\x57\x2c\x65\xde\x77\x58\x5a\x71\x2e\x4b\xcd\xf7\x22\x5e\x20\xca\x86\x77\xd2\x52\xeb\x9f\xbe\x65\x5e\xb4\x3a\xf8\xbe\x78\x3a\x09\xdd\x70\xbb\xea\x29\x76\xd5\x75\x84\x8b\x56\xae\xef\x11\x19\x30\x3a\x3b\xee\x1d\x17\x74\x76\xa7\x9b\x6c\x77\x86\xe6\x70\x11\x6c\x0e\x1d\x60\xdf\xed\x69\xb9\xeb\xf8\x6d\x5f\x48\xeb\x15\xca\xa4\x2c\xd2\x96\x3a\x23\x21\xbe\x83\x0a\x67\x04\x0a\x2d\x87\x4e\x2a\x9c\x11\x28\x1b\xc1\x05\xbb\xc2\xcb\x37\x43\x11\x3e\x8e\x32\x1a\x7b\xe5\x66\xec\x35\xe5\x78\xec\x35\x25\xf9\x05\x2c\x77\xfb\x67\x2d\x9a\xc6\xa6\x61\xaa\x1c\xc2\x32\xd9\xe3\xbd\xd7\x1e\xcc\xad\x2c\xeb\x7d\xad\x6c\x7b\x17\x5c\x2c\x81\x2e\x81\x16\x4a\x7b\x39\x9c\xbd\x60\xfa\x57\x4b\xf8\xd6\x6b\x47\x97\xc6\x25\x3c\xb3\x0b\x91\x62\xfe\x05\xbb\x5d\xf1\x55\x64\x19\xae\x22\x16\xd8\x5f\xcb\xa4\xf5\x9c\x19\xdd\x4e\x12\xd6\xc2\x16\x4d\x1e\x05\xb8\xdb\x04\xd0\x1d\x07\xf2\x4c\xc2\x19\x02\x8d\xee\xb0\x00\xa3\x68\xcf\x39\x4a\xd4\x19\x05\xbc\xe5\x7c\xad\x34\xe0\x75\x56\xaf\x2a\x9c\x83\x54\x06\x32\xb0\x79\x80\x1a\xf4\x4a\x5c\x22\x18\x51\x63\x7a\xac\x3e\xa7\xa4\xf1\x29\x45\xbe\x35\xd8\x56\xa9\xf4\x4d\xa6\x9b\x8b\xac\x8a\x35\x7b\x41\x1b\x22\xa8\x5b\xab\xf8\xa2\xb6\x8c\x22\x20\x4e\x5f\x4d\x39\xb7\x3c\x6d\x0e\xe3\xc2\xbd\x59\xe1\x78\x74\x41\x49\x8c\x7f\x0e\x25\x31\x62\x4e\x44\x71\x6d\xef\xe7\x05\x5e\x77\xcb\x1c\x8b\xbe\x0d\x67\x3f\x23\x82\xd5\x96\xca\xbd\x73\x45\x51\x5c\x53\x2f\x4d\xd9\x81\x2b\xfb\x22\x2c\xf0\x73\x3f\x6f\xd8\x95\x36\x6b\xc4\xc1\x68\x57\x3a\xa1\x78\xe7\x2c\x75\x18\xba\x49\x23\xbf\x2d\x7a\x53\xd1\xe4\x32\x84\x8c\xfd\xa5\x20\x83\xff\xbe\xfb\xf5\xd8\x32\x53\x3f\xe4\x5e\x74\x81\xfc\xa2\x69\x8b\x15\xf0\xae\x33\x19\xe2\xff\x1c\x42\x9d\x43\x93\xc6\x9f\x6d\xdb\x2c\x77\xd2\x0c\x92\x33\x38\xf9\x78\x76\x63\x90\xdf\x79\x9b\xf1\x1b\xca\xcf\xcc\x7b\x4b\x01\x2c\x4b\xe1\xf3\xad\x1b\x82\x31\x2d\x99\x6d\xb4\x03\x42\xf2\x10\x3a\xe9\x39\x37\xf3\xcd\x66\x14\x5e\xcc\xf7\x85\x45\x5a\x94\xde\x37\x9b\xd4\xba\x0a\x0d\xba\xbc\x5c\x76\xcb\x3d\x2a\x94\xc3\x22\x94\xa8\xc6\x55\x28\xf4\xe5\xa9\x1d\x34\x47\x8d\x2c\xa8\x2b\xd4\x5a\x14\x18\x86\x6f\xf1\x6a\x3a\x98\xc5\x1c\x52\x91\x95\xc9\x8c\x23\x66\x3c\x95\x75\x0c\x64\x17\x7c\x7c\x0b\xb9\xaf\x0d\x67\x65\x25\x52\x14\xf8\x83\x82\x22\x8f\x71\x96\xc3\x05\xe3\xc6\xca\x36\xdc\x8c\x03\x37\xdf\x4b\xc8\x56\x2b\x94\x45\xe2\x08\xf3\xb6\x89\x8d\xc2\x3a\x99\xcd\x1c\x4c\x6e\x06\x1d\x1b\xe0\x26\xd8\x4f\x69\x82\xcd\x35\xc1\x08\xa7\x83\x33\xc3\xcf\xcf\x23\x43\x8e\xbc\x92\x71\xae\x1a\xb4\xa6\xf7\xd2\x69\x98\xfe\xf8\xef\xbc\x7f\x0c\x8f\xdd\x1f\xff\x1c\xc7\xd8\xa9\x1e\xcd\xcc\xa5\xc2\x0f\xb2\xee\x24\x43\xce\x68\x0d\xd7\x2d\x71\x85\x12\xce\xd6\x65\x89\x1a\x28\x07\xba\x72\xe0\xa7\xee\x94\xd7\x7a\x12\x92\xb3\x75\xe9\x92\x98\xed\x5d\x99\x38\x1f\x4b\x65\x1d\x18\x48\xc3\x20\xce\x0a\x9a\x43\xb3\x1d\x08\xd4\x3a\x76\x88\x32\x0a\x75\x57\x2e\x88\xa5\x3d\xa3\x4c\x5d\xc5\x6e\x92\x4d\xc9\x9b\xa2\xad\xec\xa8\x5e\xc6\xe5\x32\xe4\x3b\xfa\xd5\xb8\x89\xbe\x51\xfe\xeb\x00\x5f\x08\xe3\xfc\xee\x00\x4b\x1a\x70\xb0\xcc\xa0\x9f\x34\xfb\x05\x81\x60\xb3\xba\x91\xf4\x4e\x7c\x75\x72\xed\x96\xe8\x8a\x21\x12\x73\xa8\xa3\x90\x61\x95\xe9\x36\x94\xd5\xae\xa7\x1a\x2e\x15\xf5\x75\x28\x13\xd3\xc9\xc4\xdd\xab\x63\x6d\x5c\x62\xac\xaf\x67\x2d\xdc\x03\xc8\x76\x1b\x3f\x7b\x7a\xf0\x5b\x19\x79\xad\xd5\x97\x14\xfe\xd4\x79\xa7\x65\xfb\x46\x27\xb6\x77\x71\xe7\xb7\x17\xa8\x6e\x34\xdb\x6d\x03\xaa\x7c\xa9\x2e\xa4\x8c\xed\xa9\xc2\x18\x75\x09\xcf\xfc\x6f\x96\x48\xe9\xc4\xd5\xdb\x4f\x73\x22\xb9\xef\x48\x44\x34\x9a\x9b\x93\x49\xf4\x71\x68\x01\x62\xde\x0a\xf7\xce\x1a\xa5\x2b\xd7\xed\x40\x53\x7a\x40\xc6\x8a\xc4\x63\x83\x3e\x56\x1c\xee\x55\x1d\x48\xea\xb6\xfa\xf0\x04\xda\x8f\xd6\x85\x87\x14\x06\x3a\x80\xbf\x96\xc6\x66\x70\x71\x78\x74\xbf\x6f\xf5\xa7\x23\xbd\xf6\xfc\x5d\x37\xd2\xfd\x67\x56\xe8\x11\xfd\xd1\xab\xe1\xbe\xed\xc6\xb6\xba\x0a\xf5\x98\xc6\x8a\x12\xf8\xa0\x8e\xa0\x26\x75\xdf\xa0\x23\x4b\xdf\x3a\x7d\x7a\xa6\x7e\xb1\x5d\x03\x6d\x61\x7d\x3d\xd0\x12\x0e\xf7\x84\xdd\x82\xd0\xad\x06\x2e\x86\xb9\x1c\xf0\x05\xf6\x1e\xe5\xa0\xd3\x62\x8e\xd6\x83\xf1\x14\xfc\xc5\x15\x61\x38\xc1\xee\x97\x5f\xc7\x9d\x20\x94\xcf\xd1\xcc\xe9\x5f\x0f\xed\xd9\x95\x00\x37\x30\x1f\xc4\x2e\xee\xd4\x46\xa1\x1b\x8b\xe1\x2f\x04\x6e\x28\x42\xf7\x0d\xd0\x10\x9f\xec\x9b\xc1\x87\xcb\xac\xe2\x09\xec\xdd\xde\x26\x77\xba\xc6\x51\x9b\xc7\x83\x79\x7f\xab\x07\x43\x75\xbf\x48\xdd\xcf\x9c\x5e\xb8\xc9\xcd\xeb\x1a\x45\x66\xbe\xd6\x7a\x0e\xea\x92\x3b\xe7\x28\x70\x4f\x32\xe9\x7a\x94\x8f\xa4\xed\x57\xea\xd2\xe9\x38\xbc\xc9\xea\x2c\x83\x9d\xde\xc6\xda\xcb\xb6\xe7\xa4\x0e\x9f\xf4\x0d\xea\x73\xd4\xb3\x17\xb0\x5b\x66\xcd\x9b\x93\x4c\xce\xdc\xc8\x81\x2d\x45\x9e\xf5\xdf\xcb\x4e\xdc\xc7\xce\xb1\x4d\x0f\xb1\x73\x8b\xcc\x31\x3b\x4b\xe0\x89\xf5\xbd\x0c\x2d\xf7\x31\x74\x6c\xd3\x43\x0c\xdd\x22\x73\xb7\xa1\xed\x9d\xa2\x0d\x39\xab\x6f\x3b\x6c\xfc\xfb\x6f\xfb\x74\x24\x4b\x95\x1e\xaf\x6b\xd4\x22\x4f\x66\x96\xd8\x9b\x3f\xb6\x03\xc8\xd7\xf6\x88\xee\x75\x87\x0c\x92\x2d\x52\xf1\x8c\x2f\x4d\xca\x4a\x65\xe6\x87\xef\x67\x1d\xa4\x06\x2a\xf2\x5a\xe2\xf5\x0a\x73\x83\x45\x6f\x78\x49\x03\xd8\x30\x7b\x5d\xf0\xf0\x35\x9e\xbd\x36\x9f\x85\xc9\x2f\xc0\xf0\xe9\x64\x8b\xbd\x1e\xbc\xa0\x77\x98\x35\x08\x06\xfe\xb3\x84\xf8\x0f\x83\xcc\x3f\xe1\xd9\x33\x30\xf0\xef\x1e\xf9\x87\xef\x17\x04\x79\x6f\x4a\xc9\x13\x5d\x8b\xf2\x90\xb8\x0f\x62\x58\xde\x07\x31\x2a\x70\xdd\x4a\x1c\x2a\xda\x6d\xd5\x84\xcf\x3a\x5b\x35\xf1\x9f\x94\x39\x7a\x26\x0b\xbe\x26\x79\x42\x8d\xe6\x42\x15\xf0\x59\x98\x0b\xd0\x98\xab\x2b\xbe\x1b\xa3\x6c\xd6\x1a\x41\x2a\x58\x65\x52\xe4\x0d\x08\x09\xee\x22\x2b\xe4\xb9\x2b\xf5\x51\x95\x2e\x8b\xe8\xaf\x67\xc0\x11\x67\x70\xf2\xb1\xfd\x93\xaf\xbb\x19\x24\xae\x20\x47\xe4\xfe\x64\xb0\x40\x7b\x3b\xb7\xe2\x5d\xdf\x22\x4a\xb8\xa2\xda\xc4\xca\xd9\x6b\xee\x55\xa7\x40\xd3\xb0\xb8\xe3\x12\x5f\xbf\xf7\xd6\xb1\xf2\xe1\x53\xd1\x1c\xae\xe8\x06\x54\xfa\xe2\x4c\x5e\x48\x3d\x90\xbd\x08\x7a\xef\x2a\x52\x6f\xc0\xbc\x87\x2e\xdf\x17\x36\xc0\x65\xf2\x43\xa1\x8c\x47\x64\x31\x9a\x4c\xf7\x60\xd2\xf7\x55\x8b\x25\x5f\x64\x5a\xe2\x53\x20\xd9\xb1\xaf\x03\x26\x03\x89\xee\xfe\x34\x88\x63\xcc\xbc\x09\xa5\xbf\xb8\x6c\x80\xe9\x17\x1e\x0a\x67\x77\x60\x17\x03\xea\x57\x3c\xa4\x3c\xcb\xb7\x98\xfa\xcb\x55\x44\x7f\x42\x58\xbd\xa5\x03\xc0\x8a\x70\xad\xdb\x06\x6d\x30\xa4\x0f\x2e\x0f\x72\x36\xa0\x65\xf2\x43\x81\xdd\x36\xe0\x49\xf8\x82\xc4\xf8\xbd\x69\x87\x3c\x4f\x82\x1f\x9b\x33\x80\x1e\x2b\xb1\x1d\x3b\xb6\x62\x03\x39\x6e\x78\x37\x90\x63\xf2\x43\x91\xeb\xf4\xf3\x91\x43\x32\xdd\xbb\xa3\x7d\x22\x6f\xe4\x46\xbc\x25\x3e\x21\x94\x6c\xdf\x00\x94\x17\xee\x02\xb0\x0d\x4a\xa7\x7e\x1f\x4a\xd7\x49\x6f\x60\xe9\xe8\x0f\x05\xb3\x7b\x53\x88\xd0\x74\x0b\x33\xf2\x4d\x77\x98\x85\xd3\x75\xfb\x2d\xf5\x09\xf1\x74\xc7\x0e\x00\xba\xf2\xf7\x8b\x6d\x88\x7a\x13\xe6\x9d\xcb\x45\x98\x66\x9a\xce\x77\xdd\x59\xe7\x89\x6e\xd3\x4a\x83\x71\x1f\x78\xe3\x26\xec\xad\xa1\x56\x6e\x62\x60\x09\x26\x7d\x55\x61\x9d\x74\x5a\x09\x33\xbd\x9b\xfe\x3f\x00\x00\xff\xff\xbf\x46\x3c\x08\x84\x32\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12932, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
