// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\x5e\x7d\x8a\x89\x81\x1a\x52\xb0\xd5\xf6\x8a\xa2\xb8\xdb\xdc\x1e\x50\xb4\x29\xea\xeb\xd5\x0d\x9a\xa4\x2f\x41\xe0\xca\x12\xe5\x65\x2c\x91\x5b\x92\xeb\xd8\x75\xf3\xdd\x0f\x33\x43\x4a\x94\x56\xbb\x76\x12\xdb\x2f\x11\x87\xf3\xf7\xc7\xe1\x70\xc8\xcd\x62\x01\xdf\xeb\xcd\x8d\x91\x17\x6b\x07\x5f\x7f\xf5\x8f\x7f\x7d\xb9\x31\xc2\x0a\xe5\xe0\xc7\xa2\x14\xe7\x5a\x5f\xc2\x89\x2a\x73\xf8\xae\x69\x80\x98\x2c\xe0\xbc\xb9\x12\x55\x9e\x2c\x16\xf0\x6a\x2d\x2d\x58\xbd\x35\xa5\x80\x52\x57\x02\xa4\x85\x46\x96\x42\x59\x51\xc1\x56\x55\xc2\x80\x5b\x0b\xf8\x6e\x53\x94\x6b\x01\x5f\xe7\x5f\x85\x59\xa8\xf5\x56\x55\xa8\x42\x2a\x62\xf9\xdf\xc9\xf7\xcf\x4f\x5f\x3e\x87\x5a\x36\x22\xd0\x8c\xd6\x0e\x2a\x69\x44\xe9\xb4\xb9\x01\x5d\x83\x8b\xec\x39\x23\x44\x9e\x24\x9b\xa2\xbc\x2c\x2e\x04\x34\xba\xa8\x92\x44\xb6\x1b\x6d\x1c\xa4\xc9\xec\x48\xa8\x52\x57\x52\x5d\x2c\xde\x59\xad\x8e\x92\xd9\x51\xdd\x3a\xfc\xc7\x88\xba\x11\xa5\x3b\x4a\x92\xd9\xd1\x85\x74\xeb\xed\x79\x5e\xea\x76\x51\xfb\x80\xa5\x2a\xb7\xe7\x85\xd3\x66\x21\x14\xf1\xdf\xc5\xb3\xb0\xe5\x5a\xb4\xc5\x42\x54\x17\xe2\x63\xf8\x6b\x29\x9a\xea\x63\x04\xa4\xaa\xc4\xf5\x51\x92\x25\x08\xdb\x4b\xa2\x81\x11\x7e\xc1\x2c\x14\x0a\x84\x72\xb9\x9f\x70\xeb\xc2\xc1\xfb\xc2\x12\x2e\xa2\x82\xda\xe8\x16\x0a\x28\x75\xbb\x69\x24\x2e\x8e\x15\x06\x3c\x76\x79\xe2\x6e\x36\x22\xa8\xb4\xce\x6c\x4b\x07\xb7\xc9\xec\xb4\x68\x05\x00\x20\x45\xaa\x0b\xa0\xbf\x3f\x10\xcd\xe5\x91\x2a\x5a\x31\xd7\xad\x74\xa2\xdd\xb8\x9b\xa3\x3f\x92\xd9\xf7\x5a\xd5\xf2\x02\xc8\x87\xf0\xed\x99\x4b\x1a\x0e\xd9\x9f\x57\x17\xc2\x02\xc0\x9b\xb7\x4f\xf1\x33\xd6\x8d\x40\xda\x21\xf7\x8f\x88\x95\x25\x6e\xfa\x8c\xb8\x09\xc6\x11\xfb\x09\x22\x25\x2c\xb2\xd3\x67\xc4\x2e\x79\x6a\xc8\xff\x93\xd6\x97\xde\x99\x17\xda\x4a\x27\xb5\x0a\xfc\x6b\x9c\x1a\x72\xbf\xd0\x8d\x2c\x6f\x00\xce\xb5\x6e\x00\x06\xb0\x6c\x68\x6a\xc0\xfe\x81\x96\xab\x53\x5b\x09\x5b\x1a\x79\x2e\x2c\x14\x40\xae\xc3\x26\x4c\xf9\xac\xe7\xd5\xf6\x6b\xd2\xc9\xf5\xab\xd2\x45\x04\x20\x95\x03\x58\x2c\x80\x31\xa1\xd0\x82\x16\xd6\xdd\x48\xeb\xf2\x64\xf6\x8b\xbc\x16\xd5\x89\x42\x11\x72\x7a\xb1\x80\x13\x55\xc9\xb2\x70\xc2\x82\xac\x23\x01\xcc\x98\x16\xb9\xbf\x94\x8a\x05\xa5\x3a\xf1\x7a\xd9\x16\x91\x86\xb6\x5a\x22\xb1\x2d\x0e\x97\x1d\xda\x4d\x4e\xa6\x7f\x42\x6e\xb2\xe0\x6e\x6a\xf2\x5f\x9c\xa0\xd1\xdf\xde\x5c\x3d\x51\xb5\xee\xd9\x9e\x52\xe8\xf9\xab\x9b\x8d\x88\x27\xbc\x34\x9a\x1f\x4a\xbf\x2a\x62\x53\x87\x6d\xbb\x62\x94\xf7\x2f\xe5\x5f\x91\xe3\x4f\xa5\x72\xdf\x7e\xb3\x4f\xd8\xca\xbf\x46\xa6\x9f\xab\x6d\x6b\x3b\xb6\xb6\xd8\xbc\x61\xf3\x6f\x27\xb6\xa8\x40\xde\xa1\xf8\x6b\x25\xff\xdc\x76\xe6\xe3\xfc\xdd\x35\xbe\x25\xde\xa1\xfc\xa9\x6c\x9a\xe2\xbc\x11\xf7\x91\x57\x9e\x77\xa8\xe1\xd7\x0d\x66\x73\xd1\xdc\x47\x83\xf6\xbc\x43\x0d\x3f\x88\xba\xd8\x36\xee\x5e\x31\x54\xcc\x3b\xa9\xe0\xf7\xa2\x41\x28\xa4\x72\xc2\x60\xd9\xbd\xfd\xb0\x5f\xc1\xd9\x15\x32\x8f\xb0\xdc\x54\x85\x13\xc1\x9b\x3b\xb0\x24\xde\xb3\x49\x77\x4e\xda\x76\xeb\x3a\x50\x0f\xeb\x91\x81\x77\xa8\xe2\xf7\xa2\x91\x15\x9e\x16\x94\x1a\xb4\x51\xf7\xaa\xb8\xea\x78\x47\x79\xe9\xb4\x29\x2e\xc4\xcf\xe2\x06\xee\x4c\x6a\xcb\xbc\x67\x97\xe2\x66\x5c\x19\x7d\xb5\xa2\xbf\xa7\xc3\xe1\x48\x49\x28\x7b\x23\x37\x84\x42\xf2\xd5\x7d\xd0\xb0\x81\x77\xa4\x82\xea\x27\xee\x66\xb8\x73\x8f\x70\xad\x3d\xdb\xdd\xe3\xdf\x29\xa5\x5d\x81\xfe\xd9\xa1\x92\x38\x5f\xbc\x92\xa2\xe7\x9d\xa8\xfc\x74\xba\xed\x56\x42\x22\x7f\x42\x21\x24\xb9\xc9\x3a\xb8\xb3\x66\x7b\xcb\x5f\xc0\xe6\x80\xd0\xc1\xaa\xb7\x57\x68\x5c\xec\x7e\x13\xf5\x54\x0f\x11\xcb\x18\x51\x9f\xed\x7a\xf8\x9b\xa8\x03\x5f\xdf\x1e\xec\x08\xee\x2d\x6e\x3b\x79\x73\xa0\xa6\x9d\xa8\x2b\x61\xac\x38\x24\x26\x99\x65\xec\xe2\x9f\x5b\x69\x44\x75\x40\xce\x78\x96\xbd\x3b\xed\x29\xb6\x3a\x79\x44\xb8\x63\x83\x71\x46\xf1\x79\xbc\x9b\x52\x4c\xff\x84\x9c\x62\xc1\x3e\xa9\xa6\x90\x3c\x80\x60\x68\xe5\xa8\x81\xf2\xeb\x7c\x77\x2b\x37\xc1\x3d\xd5\xca\x45\xe0\x74\x29\x74\x2f\x94\x4e\xc5\x7b\xca\x9c\xd2\x08\x6a\x73\x0a\x15\x10\x41\xa7\x18\x16\xfa\xe2\x8e\x6c\xe3\xb4\xc9\x93\x7a\xab\xca\x20\x99\x8a\xca\x2f\xd0\x0f\x1d\x47\xe6\xd3\xf1\x36\x99\x29\x01\xcb\x15\x1c\xe3\xf0\x36\x99\xe1\xf6\x58\x86\xe5\x17\x55\xfe\xaa\xb8\x98\x23\xf5\x66\x23\x96\x11\x15\x77\x55\x32\xa3\x5d\x1b\x91\x71\x88\x64\xc6\x7d\x19\xc8\x3c\xc4\x09\x9f\xa3\x4b\x3f\xe1\x87\x38\x13\xb2\x70\xc9\x33\x61\xc8\x53\x75\x67\x87\xa6\xea\x60\xa7\xc7\x74\x89\x33\xfd\x70\x9e\xcc\x3e\x24\x33\x59\x83\x11\x35\x46\xc7\x62\xcf\x68\xf8\x64\x05\x4a\x36\x18\xf9\x4c\x09\x24\xc3\xaa\x43\xca\x88\x3a\x63\x7a\xb4\x5c\x2b\x60\xbe\x88\x46\xea\x8d\x70\x5b\xa3\x40\x89\x7e\xa1\xb8\xbb\xdb\x5d\x29\xee\x49\x69\xa9\xf8\x73\x6a\xad\x48\x38\xad\xab\xd0\xc7\xc5\xab\x95\xf2\x75\x61\x0e\xc2\x18\x1c\xdf\x52\x74\xc2\x18\x8c\xae\xae\xf2\xe7\xc6\xa4\xd9\x33\x22\x44\xf1\x05\x0f\x65\x33\x87\xba\x75\xc8\xa5\x4d\x9d\x72\x7e\xc2\x17\x7f\x2e\xe1\x8b\xab\xa3\x39\xca\x13\xa2\x28\x9e\x51\x68\x96\x50\x3b\x26\x9b\xb7\xa3\x75\x06\xe8\x04\x68\x45\x6b\x3d\x9c\x41\xca\x7c\x94\x48\x3c\xe3\x73\x89\x7a\xbf\x65\x3c\x41\x94\x71\xe2\xf0\x54\x9f\x3b\xa1\x67\x5b\xf6\x3e\x84\xce\x2c\x99\x75\xfd\x58\x3f\x1b\x28\x38\xeb\xbb\x9b\x65\xaf\x37\xf4\x3b\x8c\x16\xd9\x8e\xfb\xa0\x25\xd9\x1e\x74\x46\x3d\x67\xd7\xe9\x2c\xbb\x98\xbb\x7e\x66\x94\x95\x3c\x3d\x48\xcc\xa8\xcb\xa1\xf9\x46\xa8\xb4\xae\xf2\x9e\x9a\x91\x92\xd0\x13\x74\x36\x3a\x0a\x4d\x77\xbd\x41\x67\xa3\xa3\xe0\x7c\x74\xec\x2f\xe9\xdc\xbf\x14\xe9\xf4\xe1\x9f\xf1\x5e\xa9\xb5\x81\xb3\x39\x14\x0e\x17\xde\x14\x0a\x2b\x4b\x95\xc7\xdd\x03\xe6\x81\xad\x63\xd2\x9b\xc2\x51\x1e\xa4\xd9\x5b\x58\x41\xe1\xc2\xa6\xb3\x35\x25\x01\xac\xee\xce\xc4\x56\x5a\x8b\xb5\x90\xca\xb7\x44\x21\x74\x24\xe4\xe7\xd1\x1c\x75\xa1\x89\xac\xd3\x8d\xd7\x8e\xe5\x0a\xe8\xbe\x81\xb8\xe1\x3d\x24\x7b\xc6\xf4\x27\x2b\xf8\x2a\xf8\x49\xf7\x93\x15\x1c\xe3\x04\x09\xe3\x81\xc3\x37\x44\xdf\xbe\x02\x35\xc3\x50\x16\x0a\xce\x05\xd0\x2b\x8b\xa8\xc0\x69\xe2\xb9\x10\x4a\x98\x82\xf6\x27\x4a\xfe\xa8\x0d\x88\xeb\xa2\xdd\x34\x62\x0e\x4a\x3b\xbc\xf4\x6e\x55\x49\x4d\x61\x23\x2f\x05\x38\xd9\x8a\xfc\x54\xbf\xcf\xc9\xcb\xb3\x79\xd8\x9b\x58\xe1\xf3\x5f\x0a\x63\xd7\x45\x93\xf6\x79\xe7\xf7\x6a\x84\x90\xad\xf3\x41\x43\xbf\x8a\xb2\x34\x2e\x37\xb6\x9e\xa3\x4c\x5f\x73\xf8\xd0\xdb\xad\x39\x7c\xb3\xa5\x9a\xc3\x9f\x53\x35\x87\x84\x53\x59\x5d\xe3\x0d\xae\x12\xd7\xc3\x23\x82\x55\xdf\x76\xb6\x8f\x89\x80\xde\xd2\x51\xe9\xb7\x93\xac\xae\xa9\x0b\xa4\x1d\xcc\xa7\xe2\xb2\x9b\xe0\xf1\x78\x6f\xe3\x4c\xbf\xb3\xe3\x0d\x83\x33\xa3\x3a\xce\x91\x7a\x0c\xfd\xdb\x0e\xaf\x16\xad\x54\xf4\x56\xd4\xa5\x35\x7e\x69\x28\xe0\xbf\x2f\x7f\x3d\x45\x61\xea\x25\xfc\x42\x57\x82\x17\x9a\x58\x50\x81\x17\xd6\xe7\xef\x44\xe9\xfc\x3f\x1e\xa1\x81\xd1\xd4\x06\xdb\xd8\xa2\x78\x4b\x19\xa4\xe7\xf0\xe6\xed\xf9\x8d\xe3\xfa\x19\x15\x68\x4b\x35\x94\x65\x11\x33\x7e\x4c\x5a\x86\x77\x11\x1e\xa6\x59\x7c\x8e\x4a\xc5\xaf\x84\xa9\x7f\xdb\xa3\x83\xf6\xd7\xda\x5b\xce\x32\xbf\xdd\xba\xe3\xcd\x27\x99\xcd\x71\xcd\xe9\x41\x23\xb0\xde\xfb\x2c\xf0\x41\x75\x87\x81\x1d\x9f\x05\x63\x33\xbc\xa2\x0f\x6f\x87\x5b\xac\xce\x56\x51\x0b\x4a\xaa\x60\xa8\x73\xe4\x21\x6c\xf9\x6a\x27\xfa\x62\x47\xd6\x79\x23\x72\x32\x63\x45\xdb\x6c\x84\xaa\x52\x4f\x98\xf7\xfd\x54\xb4\x4b\xd2\x2c\xf3\x30\xf9\xf7\xb8\x38\x00\xff\x7c\xf7\x98\x21\xe0\xd6\xed\x82\xf0\x3e\xf8\x30\xc2\xe3\x61\x14\xc8\x49\x70\x32\xde\xfa\x93\xd1\x8c\x16\x9d\x1e\x16\x1f\x3f\xb7\xf8\x45\xf2\xe1\xed\x78\xc1\x41\x31\xb6\x99\xaf\x2c\xaf\x55\x3b\xa8\x2d\x5c\x20\x2c\x1f\x03\xf2\x4a\x28\x38\xdf\xd6\xb5\x30\x40\x25\xc5\x57\xd7\xf0\xb8\x49\x65\x62\xa4\x21\x3d\xdf\xd6\xbe\x26\x60\xe7\xc6\xc4\xf9\xbe\xca\x30\x80\x81\x3c\xec\xd4\xa1\xa2\x39\xd8\xc3\x40\x08\x63\xe2\x84\xa8\xfb\x74\xb0\xbe\xfa\x92\x48\xd4\x2e\xe6\xfe\x00\xb4\x13\x2d\xe3\xae\x6a\xd4\x1d\x1d\x3f\xf1\xe9\xd3\x55\x1d\xfa\xb2\xfe\xfd\xd4\x69\x8f\x8e\xbf\x9b\xc4\xe5\xd2\x03\x96\x5a\xf0\xb0\x64\x30\x2e\x5d\xe3\xfa\x4a\xb0\xa1\x6f\xa4\x7d\xb0\xbf\x06\x15\xef\xc0\xee\x8a\x21\x92\x73\x68\xa3\x2d\xc3\x2e\xd3\x65\x00\x2f\xf8\xd4\x59\x4c\xd7\xe0\xf6\xba\xab\xbf\xc9\x6c\xe6\xaf\x78\xb1\x37\xbe\x30\xb6\xd7\x59\x0f\xf7\x04\xb2\xc3\xf6\x07\xad\x77\x79\xab\xa2\xac\x45\x7f\xc9\xe1\x77\x83\x35\xad\xfb\x15\x9d\x61\x2b\xe0\xed\xf7\xd7\x87\xe1\x6e\x46\xb6\x09\x57\x3e\xd6\x17\x72\x06\x5b\x94\xee\x25\x6c\x05\xc7\xe1\x9b\x35\x52\x39\xf1\x1d\xc1\xbb\x39\x91\xfc\x6b\x3d\x11\x9d\xe1\xb3\x7e\x16\x3d\xc5\x2f\x41\xce\x7b\xe5\x21\x59\xa3\x72\xe5\x9b\x07\xb0\x75\x00\x64\xdf\x21\xf1\xd0\xa0\xef\x3b\x1c\x3e\xe9\x74\x20\xad\x87\xce\x87\x47\xf0\x7e\xef\xb9\xf0\x39\x07\x03\x19\xe0\x1f\x92\xe2\x30\xf8\x70\x78\xf0\xbc\xef\xfd\x27\x93\xc1\x7b\xfe\x8d\x2b\xf2\xfd\x27\x76\xe8\x01\xf3\x31\x1b\x57\xbd\x61\xc9\xf3\x89\xca\x35\x8f\xef\x2a\x9f\x50\xf3\x06\x7d\xd4\xde\xa2\xb7\xbf\xce\x7c\x74\xd9\x9b\xae\x22\xf7\x2b\x22\xfb\x97\xb5\x3b\x23\xf6\x96\x87\x80\x2d\xf1\xdc\xb5\xcb\x77\x30\x9f\xc4\x2e\x6e\x47\xf6\x42\xb7\x2f\x51\x3f\x12\xb8\xa9\x34\xbc\x6f\x16\x76\x49\xc8\x89\xd5\x25\x60\x5d\x34\xfc\xec\xf5\xe1\xde\x21\x0f\x5a\xa3\xbd\x31\xfb\xdf\x6d\xe3\xa0\x87\x3d\xd5\x3d\xa2\xb6\xb9\xff\x61\x78\x05\xac\xce\xf3\x4e\xbb\x59\x03\x3f\x4d\x65\xd0\x77\x15\xbd\x3f\xb2\x86\x27\xdd\xc5\x16\xfe\xfe\x1b\x47\x27\xaa\xd6\xf9\xe9\xb6\x15\x46\x96\x69\x36\xea\x67\xc8\x03\x35\x07\x7d\xc9\xad\x4a\x7c\x27\xce\xd3\xba\xd1\x85\xfb\xf6\x1b\x8e\xe2\x89\xbe\x8c\x85\xe3\xfa\xb2\x55\xe2\x7a\x23\x4a\x27\xaa\xd1\x65\x9f\xde\x19\xba\x27\x86\x25\xbf\x31\xc4\x4f\x0c\xf6\xbd\x74\xe5\x1a\x1c\x5b\x27\x57\xf1\xfc\x7f\x86\x96\xca\xc2\x0a\x70\xf0\x9f\x15\xc4\x3f\xb4\xba\x7f\xc2\xf1\x31\x38\xf8\xf7\x88\xfc\xed\x37\x4b\xac\x64\xe3\x5b\x3d\x3f\x5c\xa8\x6c\x5a\xdd\x6b\x39\xad\xef\xb5\xdc\xab\x70\xdb\x6b\x9c\x2a\x58\x7d\xc5\x80\xf7\xa6\xd8\xd8\xf8\xa7\x79\x4f\x2f\x54\xc5\x7d\x50\x20\xb4\xc2\xad\x75\x05\xef\xa5\x5b\x83\x11\xa5\xbe\xe2\xe6\x57\x28\xbb\x35\x02\x94\x86\x4d\xa1\x64\x69\x41\x2a\xf0\x9d\xaa\x54\x17\xbe\xcc\x45\x15\xaa\xae\xa2\x5f\x25\xc1\x13\x33\x78\xf3\xb6\xff\x05\xfd\x43\x06\xa9\x2f\x46\x11\x79\x7c\x93\xae\x04\xb6\xdf\xa8\xde\xe7\x8b\xac\xe1\x8a\xf6\x25\x3b\x87\x7d\xec\xd5\xa0\x38\xd1\xe3\xca\x20\x25\xbe\x78\x15\xa2\x63\xe7\xbb\xb7\xcf\x39\x5c\x51\x8b\x53\x87\xc2\x44\x59\x48\xf5\x1f\x3b\xbd\x90\x5d\x55\x1e\x02\x98\x8f\xd0\xe5\x86\x60\x07\x5c\x26\x7f\x2e\x94\xf1\x1d\x38\x46\x93\xe9\x01\x4c\x7a\xcb\x47\x2c\xb9\x53\xe9\x89\x8f\x81\xe4\x20\xbe\x01\x98\x0c\xa4\xf0\x0d\xd2\x24\x8e\xb1\xf0\x2e\x94\xa1\x33\xd9\x01\x33\x4c\x7c\x2e\x9c\xc3\x1b\x79\x0c\x68\x98\x09\x90\xf2\xdb\x17\x62\x2a\xbb\xff\x84\xd3\xd1\x1f\x11\xd6\x10\xe9\x04\xb0\xb2\xeb\xdb\x0e\x41\xdb\x05\x32\x06\x97\x6f\x6a\x3b\xd0\x32\xf9\x73\x81\x3d\x74\x83\x4b\xb9\xdd\x63\xfc\x7e\xe9\x6f\x71\x8f\x82\x1f\x87\x33\x81\x1e\x3b\x71\x18\x3b\x8e\x62\x07\x39\x3e\xec\x77\x90\x63\xf2\xe7\x22\x37\xe8\x65\xa2\x84\x64\x7a\x48\x47\x1c\x51\x36\x72\x13\xd2\x13\x1f\x11\x4a\x8e\x6f\x02\xca\xb5\x6f\x7e\x0e\x41\xe9\xdd\x1f\x43\xe9\x5b\x8b\x1d\x2c\x3d\xfd\x73\xc1\x3c\xd8\x25\xa5\xbe\x9d\x41\xf2\x8b\xa8\x51\x7a\x14\xf0\x7c\x40\x13\xe8\x6d\x42\x77\x75\x08\x3e\x1f\x48\x8f\x1f\x85\xd8\xbd\x4d\x38\x88\x5f\x27\xb2\xc1\x88\xae\x0d\xda\x80\xcb\x7f\x96\xaa\x4a\x33\x58\xad\xba\xf9\x17\x8e\xda\xb2\x99\x83\x15\xb8\xfc\x79\x23\xda\x74\xd0\x37\xb8\xe4\x43\xf2\xff\x00\x00\x00\xff\xff\x56\x68\x17\x28\x4c\x2b\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11084, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
