// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdd\x6f\xdb\x46\x12\x7f\x16\xff\x8a\x89\x81\x18\x62\xa0\x52\x69\x51\x14\x77\xca\xe9\x80\xa2\x75\x70\xba\x5e\x9d\xa2\x89\xfb\x12\x04\x29\x45\x0e\xa5\x8d\xc9\xa5\xc2\x5d\xfa\xa3\xae\xff\xf7\xc3\xcc\xec\x92\x4b\x51\x56\xd2\xa4\xf1\x8b\xc9\xd9\xf9\xd8\xf9\xed\x7c\x71\x35\x9f\xc3\x0f\xf5\xee\xb6\x51\x9b\xad\x85\x6f\x9e\x7e\xfd\xcf\xaf\x76\x0d\x1a\xd4\x16\x9e\xa7\x19\xae\xeb\xfa\x12\x56\x3a\x4b\xe0\xfb\xb2\x04\x66\x32\x40\xeb\xcd\x15\xe6\x49\x34\x9f\xc3\xab\xad\x32\x60\xea\xb6\xc9\x10\xb2\x3a\x47\x50\x06\x4a\x95\xa1\x36\x98\x43\xab\x73\x6c\xc0\x6e\x11\xbe\xdf\xa5\xd9\x16\xe1\x9b\xe4\xa9\x5f\x85\xa2\x6e\x75\x4e\x2a\x94\x66\x96\xff\xad\x7e\x38\x3b\x7f\x79\x06\x85\x2a\xd1\xd3\x9a\xba\xb6\x90\xab\x06\x33\x5b\x37\xb7\x50\x17\x60\x03\x7b\xb6\x41\x4c\xa2\x68\x97\x66\x97\xe9\x06\xa1\xac\xd3\x3c\x8a\x54\xb5\xab\x1b\x0b\xd3\x68\x72\x82\x3a\xab\x73\xa5\x37\xf3\x77\xa6\xd6\x27\xd1\xe4\xa4\xa8\x2c\xfd\x6b\xb0\x28\x31\xb3\x27\x51\x34\x39\xd9\x28\xbb\x6d\xd7\x49\x56\x57\xf3\xc2\x39\xac\x74\xd6\xae\x53\x5b\x37\x73\xd4\xcc\xff\x21\x9e\xb9\xc9\xb6\x58\xa5\x73\xcc\x37\xf8\x57\xf8\x0b\x85\x65\x7e\x12\xc5\x11\xa1\xf0\x92\x69\xd0\xa0\xc3\xdf\x40\xaa\x01\xb5\x4d\xdc\x82\xdd\xa6\x16\xae\x53\xc3\x6e\x62\x0e\x45\x53\x57\x90\x42\x56\x57\xbb\x52\x11\xd6\x06\x1b\x70\x50\x24\x91\xbd\xdd\xa1\x57\x69\x6c\xd3\x66\x16\xee\xa2\xc9\x79\x5a\x21\x00\x10\x45\xe9\x0d\x3d\xc1\xef\x84\xcd\xe2\x44\xa7\x15\xce\xea\x4a\x59\xac\x76\xf6\xf6\xe4\xf7\x68\xf2\x43\xad\x0b\xb5\x01\xde\x82\x7b\x76\xbc\x19\xbf\x0d\xb9\xcf\xf2\x0d\x1a\x00\x78\xfd\xe6\x09\x3d\x06\x9a\x09\x14\x33\x64\x7e\x4e\x7e\x1b\x66\xe6\xc7\x9e\x99\x11\xd9\xe3\x5e\xe9\x1c\x6f\xd0\x10\x37\x3f\xf6\xdc\x4a\x56\x86\xec\xff\xa9\xeb\x4b\xda\x89\xd2\x16\xdc\x9f\x63\xdf\xd2\xca\x80\xf9\x9e\x91\xff\xa5\x36\xca\xaa\x5a\x43\x8e\x26\x6b\xd4\x1a\x0d\xa4\xc0\x3b\x81\x9d\x5f\x72\xf1\x28\x07\xe7\xe0\xed\xe4\x7a\x80\xfd\x06\xbd\xfd\xf9\x1c\xc4\x43\xde\xaa\xd7\x22\xba\x4b\x65\x6c\x12\x4d\x7e\x56\x37\x98\xaf\x34\x89\xac\xeb\xba\x24\x91\x95\xce\x55\x96\x5a\x34\xa0\x8a\x40\x80\x0e\xbf\x22\xee\xaf\x94\x16\x41\xa5\x57\x4e\xaf\xd8\x62\xd2\xd0\x56\xc5\x24\xb1\x25\xee\xca\x86\xc6\x71\x26\xf4\x4f\x08\x33\x11\x1c\x47\x99\xfc\x05\xb1\x76\x3c\xe0\x56\xba\xa8\x7b\xb6\x27\xec\x73\xf2\xea\x76\x87\xbc\xe0\xc4\xc8\xe0\x50\xec\x55\x1a\x28\x7f\xc8\x9a\x4d\xf7\xe2\xf5\xa5\xfa\x23\xd8\xe3\x13\xa5\xed\x77\xdf\x8e\xa4\x8c\xfa\x63\xcf\xd8\x99\x6e\x2b\xd3\xb1\xbd\x7e\x33\x34\xe7\x23\x9e\x98\x86\x72\x17\x5a\xbd\x6f\x3b\x83\x7c\xce\x30\x32\xd7\x32\xd3\x50\xf0\x5c\x95\x65\xba\x2e\xf1\xa8\xa0\x76\x4c\x43\xd1\x17\x3b\x0a\xce\xb4\x3c\x2a\x5a\x3b\xa6\xa1\xe8\x8f\x58\xa4\x6d\x69\x8f\x6f\x37\x17\xa6\x83\x92\xbf\xa5\x25\xb9\xab\xb4\xc5\x86\x4a\xe0\xdd\xfd\x01\xc9\xb7\x57\xc4\xb5\x07\xd4\x2e\x4f\x2d\x7a\xfb\x0f\x01\xc5\x4c\x6f\x0f\x6e\x60\x55\x55\xad\xed\x10\x7b\x40\x81\xf2\x4c\x43\xd9\xdf\xd2\x52\xe5\x54\xa4\xf9\x88\x83\x02\x12\xca\x5e\x75\x4c\x7b\x11\x65\xeb\x26\xdd\xe0\x4f\x78\x7b\x24\x0e\x8d\x30\xbd\xbd\xc4\xdb\xa1\x74\x57\x4b\x24\x1e\x87\xaf\x5e\xda\x57\xa3\x3d\xc3\xa8\x89\x7c\x75\xd4\x63\xe3\x99\x0e\xd4\x3f\x2e\xd8\xe3\x7a\xc0\xe4\x4f\x28\x07\x2c\x77\xa0\x1a\x38\x48\x1e\xcc\x7f\x4a\xf5\x03\x8c\x47\x32\x7e\x8f\x71\x3f\xc7\x7f\xc5\x42\x8c\x0f\xf9\x1a\x2c\xde\x8e\xad\xff\x8a\x85\xc3\x5e\xfa\x57\xcf\xfc\x40\x26\x3b\xa0\x8f\xe4\xee\x4a\x5f\x61\x63\x70\x9f\x55\x09\x79\xdf\xfc\xfb\x56\x35\x98\xef\xf1\x36\x8e\x7c\xe0\xd4\xa4\xf2\x8f\x8f\x4d\xe8\x9f\x70\x6e\x22\xd8\x1f\x5c\x50\xb3\xba\xa0\x3a\xe2\xad\x9f\x00\xc2\xba\xf8\xe1\x11\xe0\x00\xf7\xa1\x19\x20\x48\xae\x2e\xb3\x3e\x90\x52\x82\xd2\x39\x5e\xf3\x79\x66\x0d\x72\x43\x4d\xb5\x47\x84\x36\x25\xb0\xf0\x93\xf4\xfe\x9d\xad\x9b\x24\x2a\x5a\x9d\x79\xc9\x29\xe6\xf0\x84\x38\x92\x1f\x3b\x8e\xd8\x05\xc9\x5d\x34\xd1\x08\x8b\x25\x9c\xd2\xeb\x5d\x34\xa1\xd0\x5c\x08\x06\x98\x27\xaf\xd2\xcd\x8c\x68\xb7\x3b\x5c\x74\x34\x8a\xe6\x68\xc2\x59\xd1\x11\xe9\x85\x88\x82\xf8\x42\x88\xf2\x42\x64\x17\x47\x0b\x26\xbb\x17\xa2\xfb\x98\x59\x10\xdd\xbf\xc8\x42\xe1\xf4\xf3\x42\xe1\xf4\xdf\x47\x13\x55\x40\x83\x05\x6d\x59\x56\x9e\xf1\xeb\xa3\x25\x68\x55\x92\x3b\x13\x8d\x44\x86\x65\xe7\x7e\x83\x45\xcc\xa2\x0d\xda\xb6\xd1\xa0\xb1\x47\x56\x1a\xff\x18\x5a\x19\x57\x8e\x63\xcb\xb2\xd3\x22\xf7\x8d\x3e\x44\x77\x2a\x63\xe1\x0c\xb0\x69\xe8\xfd\x2e\x9a\x18\xde\xf4\x29\xd3\xef\x06\xf8\xf1\x5f\xd1\x83\x48\xd3\xc2\x70\x85\x28\xb3\xc1\xe1\xf8\x15\x77\x42\xdc\xd5\x17\xe1\x02\x53\x86\x47\xe2\x97\xfa\x73\xf1\xbd\x79\xd1\xef\xc1\x37\xe2\x68\xd2\xb5\xdf\x7e\xd5\x53\x68\xd5\x75\xb8\x45\xaf\xd7\xf7\x3c\x39\x0c\xb6\x1d\xf6\xc2\x05\xdb\x1e\x74\xc7\x9e\xb3\x6b\x7a\x8b\xce\xe7\xae\xc3\x45\x93\x20\x7b\x16\x6e\xb9\xa7\xd0\x7a\xdf\xf7\x78\xbd\x44\x3d\x2d\xf2\xa4\xa7\xc6\xac\xc4\x77\x90\xce\x46\x47\xe9\x62\xcb\x14\x0c\x36\x2c\xfb\x80\xf2\x61\xa3\xca\x19\x14\x95\x4d\xce\xe8\x48\x8b\xe9\x49\xa5\x8c\xa1\x3c\xe6\xd2\xa3\x48\xa8\xa8\x1b\x17\x39\x8f\xdf\x9f\xcc\x48\x17\x1d\x69\xdc\xe9\xa6\x89\x6d\xb1\x04\x1e\xd5\x68\x7f\x34\xc2\xc5\xcf\x84\xfe\x68\x09\x4f\xd9\x9c\x29\x98\x0e\x4b\x38\xa5\x05\x16\xa6\x62\x29\x73\xb4\x9b\x18\x80\x07\x0f\xc8\x52\x0d\x6b\x04\xfe\x4a\xc4\x1c\x6c\xcd\x3c\x1b\xd4\xd8\xa4\x1c\xab\x24\xf9\xbc\x6e\x00\x6f\xd2\x6a\x57\xe2\x0c\x74\x6d\xe9\xd3\xa0\xd5\x19\x37\xe7\x52\x5d\x22\x58\x55\x61\x72\x5e\x5f\x27\xbc\xcb\xb7\x1c\xb4\xb4\x4f\xaa\x4e\xc9\xcf\x69\x63\xb6\x69\x39\xed\xcf\x37\x7e\xc6\x0c\x01\x42\xa6\x48\x06\x53\xd3\x32\x88\x06\xef\xbc\x8b\x62\x2e\x1f\x24\xdb\x0f\xc7\x17\x17\xab\x1f\xe1\xf4\x74\x1c\x41\xac\xdb\xde\xee\x68\x2f\xee\x83\x97\x05\x5e\x14\xe1\x6e\xa2\x09\xa9\xb7\xb7\xbb\xe4\x27\xa5\xf3\x69\x4c\xc2\x9e\xfb\x39\xa5\xea\x9f\x7f\xf2\xea\x79\x5b\xad\xb4\x2c\x3f\x0d\x68\x2f\x5a\x2b\xc4\xaf\x3d\x91\x28\x4f\xe3\xe4\x25\x57\x69\x59\xf3\x9b\xef\x68\xb4\xb3\x07\x03\x03\x6f\x76\x98\x59\x89\x8b\x29\x41\x3d\x8d\xe1\xb1\x89\x39\x3c\xda\x56\xe5\xc3\x43\x3c\x99\x8d\xd4\x93\x4f\xf7\x61\xc9\x32\xc5\x8c\xcc\xb8\xba\xe5\x8e\xc4\x7d\x1b\xcb\xe1\xf3\xc1\x07\xdf\xda\xdd\xdc\x4a\x4f\x35\xa4\xf0\xdf\x97\x2f\xce\x49\x98\xdb\xaa\x8b\x9b\x1c\x25\x6e\x98\x85\x14\x38\xe1\x7a\xfd\x8e\x1c\x90\x7f\xae\xe0\x0d\x8c\x4e\x8d\xb7\x4d\xdd\xda\x59\x8a\x61\xba\x86\xd7\x6f\xd6\xb7\x16\x25\x84\x82\xda\xc7\xa5\x4f\x64\x09\x3a\xf9\x1a\x5f\xf8\x8f\x51\x79\x9d\xc6\x61\x5b\x51\x5a\x2e\x4d\xa6\x7b\x27\x2f\x22\x71\xcc\xa9\xc5\x22\x12\x5f\x2e\x66\x4d\x42\x15\x5c\x7a\xb3\xe7\x95\x78\x7d\xf4\xe1\x8c\x76\x5e\x3d\x7e\xbf\x80\xc7\x57\x94\xc0\x52\x92\x49\x5c\x92\x58\xc6\x80\xce\x56\x5a\x20\xcf\x0c\xde\x50\xb7\x91\xbf\xc3\x16\x45\x0b\xe5\x22\x47\x7f\xaa\x37\xc8\x9d\xc8\x48\xc2\x25\x32\xab\x2c\x21\xdd\xed\x50\xe7\x53\x47\x98\xf5\x3d\x3f\x68\x47\xd3\x38\x76\x35\xc8\xdd\x36\x84\x0e\xb8\xbb\x89\x2f\xe9\x82\xca\x6f\x7a\x27\xdc\x1e\x58\xb1\x5b\x50\xf9\xcd\x60\xb7\xec\xa0\xbf\x33\x09\x5c\x5c\xf9\xed\x9f\xf2\x13\xe7\x20\xbb\xed\x7a\x10\xe9\x11\x18\x68\x45\x62\x60\xd1\xad\xc8\x3b\x2f\x85\x2d\x91\x96\xfa\x86\x38\x68\x34\xb4\x34\x6c\x33\xf7\xf1\xc1\x70\xe3\x0b\x9b\xbf\x3f\xda\x9c\xe0\xa0\x0c\x9b\xd8\x15\x81\x0b\x5d\x0d\xca\x80\xe4\xb2\x91\x06\xa0\xae\x50\xc3\xba\x2d\x0a\x6c\x80\xb3\xdf\x8d\x35\xfe\xf2\x87\x33\x7a\x4f\xc3\x74\xdd\x16\x2e\x7d\x69\x7e\x11\xe2\xec\xa1\x24\x1e\xa0\xc0\x3b\xec\xd4\x91\xa2\x19\x98\xe3\x40\x60\xd3\x84\x21\x52\xf4\x01\x62\xdc\x49\x49\x84\x74\x36\x8a\xc4\x55\x4d\x33\x1d\x6b\x1e\xab\xde\xab\x9f\x61\xf9\xec\x0b\x04\x3f\x1a\xd7\xb2\x6d\xed\xe0\x71\x63\x5f\x58\xda\x1c\x62\x53\x03\x0e\x97\x18\x46\x65\x66\xbf\x18\x32\x70\xb4\x3b\xbe\xbf\x1a\xe4\x1c\x5f\x72\x7d\x44\xc6\x85\x20\xa9\x19\x54\x41\x1a\xc9\xa5\x18\xf1\xba\x8f\x8d\x50\xbf\xdb\x57\x75\x13\xf7\x10\x1e\x40\xab\x03\x8a\x0d\xbc\x1b\x9c\x42\xd1\x9f\xc1\x84\xba\x8f\xd3\xde\x8f\xbd\xc3\xfa\x42\x6c\x07\x0c\x0d\x2d\xb1\x29\x1a\x16\xba\xbb\x81\x25\x9c\xfa\x67\xe1\xe7\xc4\x76\xe9\xfc\x8e\x13\xd2\xdf\x2e\x32\xd1\x36\x2e\x4d\x83\xab\xc3\x05\xa8\x59\xaf\xdc\x07\x4f\x50\x36\x5c\xe2\x83\x29\xfa\xbe\xfa\x30\x68\x7f\xf9\x54\x0e\x83\xf6\x71\x98\x7d\xcc\xd9\x3c\x84\x97\x77\x9e\x79\x3e\xe4\x76\xf0\xf5\x23\x79\x70\x30\x9e\xc3\x3a\xf6\x60\x38\xcb\x1d\x74\x88\xdc\xa0\xfc\x7d\x04\x70\x26\x91\x1b\xee\x25\xcf\xe9\xac\x2f\x3e\xbc\xbf\x02\xe4\x3b\x2a\x86\x3e\xf9\xfb\x9d\xa8\x02\x1e\x75\x93\x27\x4d\x6f\x8f\x64\x78\xa7\xb1\x0e\x1b\x95\xb9\x39\x2d\x50\x4c\xd6\xf5\x0c\xea\x4b\xa9\x28\xe1\xd0\x9a\x4c\x8b\xb2\x4e\xed\x77\xdf\x8a\x07\x8f\xea\xcb\x50\x38\xac\xdb\xad\x96\x01\x0f\xf7\x06\x39\x19\xf8\xba\x6f\x80\x85\x7c\x04\x84\xdf\x00\xe6\x5a\xd9\x6c\x0b\x56\xac\x77\xe3\xf0\x33\xb2\x94\xa5\x06\xc1\xc2\xbf\xc3\xc9\x78\xa5\xed\x3f\x68\x32\xb6\xf0\xaf\x3d\xf2\x77\xdf\x2e\x28\x6d\xf7\xc7\x6e\xf9\xb2\xd0\xf1\x61\x75\x17\xea\xb0\xbe\x0b\xf5\xa0\xc2\xb6\xd7\x38\x0a\xa1\xf9\x3c\xc8\x1b\xb8\x6e\xd2\x9d\x09\x7f\x61\x70\xf4\x54\xe7\x52\xac\x3c\xa1\x42\xbb\xad\x73\xb8\x56\x76\x0b\x0d\x66\xf5\x95\xf4\x28\xd4\xa6\x6d\x10\x74\x0d\xbb\x54\xab\xcc\x80\xd2\xe0\x1a\x8a\xd2\x1b\x57\x80\x83\x3c\x2d\xf2\xe0\x6e\x16\x1c\x31\x86\xd7\x6f\xfa\x1f\x02\xee\x63\x98\xba\x94\x0c\xc8\xfb\xb3\x69\x8e\xd4\x25\xdd\x98\xee\x7a\xce\x95\x7c\x72\xf0\xe6\xa8\xdd\x5c\x0d\x52\x94\xbf\x7e\x06\x21\xf1\xf8\x95\xf7\x4e\x36\xef\x3a\x7a\x91\xcf\xe0\x8a\x6b\x63\xe1\xd3\x93\xa3\x90\x8b\xd0\xb4\x8f\xf9\x22\x4f\xbc\x03\xb3\x3d\x74\x65\xce\x1b\x81\x2b\xe4\xcf\x85\x32\x1c\x5e\x47\xb3\xbc\x4c\x9b\x02\x1c\x31\x7e\x09\xdc\x06\xde\x0c\xa0\x13\xd8\xd0\x4d\xb9\x07\x51\x0b\x85\xc7\xc0\xf9\xf9\x71\x04\x9d\x5f\xf8\x5c\xf0\x86\x83\xf3\x08\x3e\xd5\xfd\xe6\xd7\x5d\x69\x7e\x41\x04\xbd\x53\x07\x30\x54\xdd\x20\x7d\x0c\x45\xef\xcd\x08\x47\xf9\x41\x6e\x84\xa2\x90\x3f\x17\xc3\x70\x10\x1a\x21\x28\x23\x8e\xe0\xf7\x73\x3f\x43\x7d\x11\xfc\xc4\x9d\x03\xe8\xc9\x26\x8e\x63\x27\x5e\x8c\x90\x93\x26\x37\x42\x4e\xc8\x9f\x8b\xdc\xb1\x56\x2d\x2d\xd5\x21\x47\x8c\x5f\x10\x38\xf1\xe6\x00\x70\x5b\xd7\xe2\x8f\x01\x27\x4e\xf4\xc0\xb1\x77\xdd\x87\xbf\x1d\x5c\xfa\xc4\x83\x37\xda\x15\x75\x5a\xeb\x2f\x7d\x96\xfd\xa5\xcf\x2f\xb6\x91\x9b\x23\x58\x82\x4d\xce\x4a\xac\xa6\x83\xf6\x65\xa3\xfb\xe8\xff\x01\x00\x00\xff\xff\x32\x5b\xd0\x85\x34\x22\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 8756, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
