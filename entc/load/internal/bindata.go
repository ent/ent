// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\xde\xfd\x14\x13\x03\x35\xa4\x60\xab\xed\x15\x45\x71\xb7\xb9\x3d\xa0\x68\x53\xd4\xd7\xab\x1b\x34\x49\x5f\x82\xc0\x95\xa5\xe1\x2e\x63\x89\xdc\x92\x5c\xc7\xae\xeb\xef\x7e\xe0\xf0\x8f\x28\xad\x76\x6d\xc7\xf1\xbe\x58\x1a\x0e\x87\xc3\x1f\x67\x86\x3f\x52\x9e\xcf\xe1\x7b\xb9\xb9\x56\x7c\xb5\x36\xf0\xf5\x57\xff\xf8\xd7\x97\x1b\x85\x1a\x85\x81\x1f\xcb\x0a\xcf\xa5\xbc\x80\x13\x51\x15\xf0\x5d\xd3\x00\x29\x69\xb0\xed\xea\x12\xeb\x62\x3a\x9f\xc3\x9b\x35\xd7\xa0\xe5\x56\x55\x08\x95\xac\x11\xb8\x86\x86\x57\x28\x34\xd6\xb0\x15\x35\x2a\x30\x6b\x84\xef\x36\x65\xb5\x46\xf8\xba\xf8\x2a\xb4\x02\x93\x5b\x51\x5b\x13\x5c\x90\xca\xff\x4e\xbe\x7f\x79\xfa\xfa\x25\x30\xde\x60\x90\x29\x29\x0d\xd4\x5c\x61\x65\xa4\xba\x06\xc9\xc0\x24\xe3\x19\x85\x58\x4c\xa7\x9b\xb2\xba\x28\x57\x08\x8d\x2c\xeb\xe9\x94\xb7\x1b\xa9\x0c\x64\xd3\xc9\x11\x8a\x4a\xd6\x5c\xac\xe6\x1f\xb4\x14\x47\xd3\xc9\x11\x6b\x8d\xfd\xa3\x90\x35\x58\x99\xa3\xe9\x74\x72\xb4\xe2\x66\xbd\x3d\x2f\x2a\xd9\xce\x99\x9f\x30\x17\xd5\xf6\xbc\x34\x52\xcd\x51\x90\xfe\x5d\x3a\x73\x5d\xad\xb1\x2d\xe7\x58\xaf\xf0\x21\xfa\x8c\x63\x53\x3f\xa4\x03\x17\x35\x5e\x1d\x4d\xf3\xa9\x85\xed\x35\xc9\x40\xa1\x5f\x30\x0d\xa5\x00\x14\xa6\xf0\x0d\x66\x5d\x1a\xf8\x58\x6a\xc2\x05\x6b\x60\x4a\xb6\x50\x42\x25\xdb\x4d\xc3\xed\xe2\x68\x54\xe0\xb1\x2b\xa6\xe6\x7a\x83\xc1\xa4\x36\x6a\x5b\x19\xb8\x99\x4e\x4e\xcb\x16\x01\xc0\x4a\xb8\x58\x01\xfd\xfe\xb0\x68\x2e\x8e\x44\xd9\xe2\x4c\xb6\xdc\x60\xbb\x31\xd7\x47\x7f\x4c\x27\xdf\x4b\xc1\xf8\x0a\xc8\x87\xf0\xec\x95\x2b\x7a\xed\xab\xbf\xac\x57\xa8\x01\xe0\xdd\xfb\xe7\xf6\x31\xb5\x6d\x81\xd4\x7d\xed\x1f\x2d\x56\x9a\xb4\xe9\x31\xd1\x26\x18\x07\xea\x27\x16\x29\xd4\x56\x9d\x1e\x13\x75\xee\x9a\xfa\xfa\x3f\x49\x79\xe1\x9d\x79\x25\x35\x37\x5c\x8a\xa0\xbf\xb6\x4d\x7d\xed\x57\xb2\xe1\xd5\x35\xc0\xb9\x94\x0d\x40\x0f\x96\x0d\x35\xf5\xd4\x6f\x69\xb9\xa2\xd9\x1a\x75\xa5\xf8\x39\x6a\x28\x81\x5c\x87\x4d\x68\xf2\x51\xef\x56\xdb\xaf\x49\xec\xd7\xad\x4a\x9c\x11\x00\x17\x06\x60\x3e\x07\x87\x09\x4d\x2d\x58\x71\xb6\x1b\xae\x4d\x31\x9d\xfc\xc2\xaf\xb0\x3e\x11\xb6\x0b\x39\x3d\x9f\xc3\x89\xa8\x79\x55\x1a\xd4\xc0\x59\xd2\xc1\x46\x4c\x6b\xb5\xbf\xe4\xc2\x75\xe4\xe2\xc4\xdb\x75\x63\x91\xa8\x3f\x56\x4b\x22\x37\x96\x9b\xae\x73\x68\x37\x38\x9d\xfc\x13\x62\xd3\x75\xdc\x0d\x4d\xf7\x4b\x03\x34\xf9\xed\x8d\xd5\x13\xc1\x64\xa7\xf6\x9c\xa6\x5e\xbc\xb9\xde\x60\xda\xe0\x7b\xdb\xe1\xfb\xbd\xdf\x94\xe9\x50\x87\xc7\x36\xe5\x20\xee\x5f\xf3\xbf\x12\xc7\x9f\x73\x61\xbe\xfd\x66\x5f\x67\xcd\xff\x1a\x0c\xfd\x52\x6c\x5b\x1d\xd5\xda\x72\xf3\xce\x0d\xff\x7e\x24\x45\xd1\xea\xf6\xbb\xbf\x15\xfc\xcf\x6d\x1c\x3e\x8d\xdf\xdd\xc1\xb7\xa4\xdb\xef\x7f\xca\x9b\xa6\x3c\x6f\xf0\x3e\xfd\x85\xd7\xed\x5b\xf8\x75\x63\xa3\xb9\x6c\xee\x63\x41\x7a\xdd\xbe\x85\x1f\x90\x95\xdb\xc6\xdc\x6b\x0e\xb5\xd3\x1d\x35\xf0\x7b\xd9\x58\x28\xb8\x30\xa8\x6c\xd9\xbd\xb9\xdd\x6f\xe0\xec\xd2\x2a\x0f\xb0\xdc\xd4\xa5\xc1\xe0\xcd\x1d\x58\x92\xee\xd9\xa8\x3b\x27\x6d\xbb\x35\x11\xd4\xc3\x76\x78\xd0\xed\x9b\xf8\xbd\x6c\x78\x6d\x77\x0b\x0a\x0d\x4a\xd4\xbd\x26\x2e\xa3\xee\x20\x2e\x8d\x54\xe5\x0a\x7f\xc6\x6b\xb8\x33\xa8\xb5\xd3\x3d\xbb\xc0\xeb\x61\x65\xf4\xd5\x8a\x7e\xcf\xfb\xaf\x03\x23\xa1\xec\x0d\xdc\x40\x61\xc5\x97\xf7\x41\x43\x07\xdd\x81\x09\xaa\x9f\x36\x9b\xe1\xce\x1c\x71\xb5\xf6\x6c\x37\xc7\xbf\x13\x42\x9a\xd2\xfa\xa7\xfb\x46\xd2\x78\xf1\x46\xca\x4e\x77\xa4\xf2\xd3\xee\xb6\x5b\x09\x49\xfc\x09\x85\x90\xfa\x8d\xd7\xc1\x87\x56\xc1\x00\xd1\xdd\x7d\x0f\xd7\xc0\x07\x56\xc0\xdf\x90\x45\xaf\x0f\x77\x55\xc8\xce\x76\xdd\xfe\x0d\x59\x54\xec\xb8\xc3\x9e\xfe\xfb\xeb\xdf\xc3\xab\xdf\x89\xb8\x44\xa5\xef\x95\xa7\x4e\x73\xe8\xf7\x9f\x5b\xae\xb0\xbe\xbb\xbb\xf2\x9a\xfb\x33\xf4\xb9\xe5\x48\x45\x3f\x67\xef\x91\x9f\x69\x54\x3f\x26\xa6\x1d\x23\xd8\x0d\x6a\x27\xff\x84\xa8\x76\x1d\xbb\xb0\x4e\x16\x2a\x42\x75\x60\x65\x02\x99\x24\x0a\xe7\x63\xea\x6e\x32\x39\xa2\x3d\x46\x26\x13\x94\x63\xb8\xde\x01\xb4\x43\xe9\x14\x3f\x52\x78\x56\x0a\x89\x68\x95\x22\x20\x62\x9d\x72\xb0\xd0\x93\xe3\x84\x1b\x23\x55\x31\x65\x5b\x51\x85\x9e\x19\xd6\x7e\xa5\x7f\x88\x1a\xb9\x8f\xf9\x9b\xe9\x44\x20\x2c\x96\x70\x6c\x5f\x6f\xa6\x13\x9b\x92\x8b\x18\x49\x58\x17\x6f\xca\xd5\xcc\x8a\xaf\x37\xb8\x48\xc5\x36\x97\xa7\x13\xaa\x1c\xa9\xdc\xbe\x5b\xb9\x83\x7e\x11\xe5\xee\xdd\xb6\xf8\xf8\x5f\x84\x16\xff\x6e\x9b\x42\x6c\x2f\x7c\x53\x78\x77\x6d\xac\x1b\x8b\xda\x58\x18\xab\x83\x76\x41\x4d\xdd\xbb\x6d\x4d\xa2\x75\x01\x6d\x79\x81\xd9\x78\xcc\xe6\xb3\xe9\xe4\x76\x3a\x61\x52\xc1\xd9\x0c\x4a\x63\x51\x51\xa5\x58\xa1\x35\x99\x86\xbc\x45\x49\x60\x2a\x7a\x57\x1a\x9a\x78\x96\xbf\x87\x25\x94\x86\x0c\x71\x06\x0a\x99\xb5\xe2\xbc\x7d\x41\xaf\xcf\x96\x20\x78\x13\x6c\xd8\x22\xb4\x8c\xeb\xa4\x90\xe5\x4e\x9e\x04\xcb\x12\x9c\x5e\x22\x23\xf3\x0a\xcd\x56\x09\x10\xd8\x85\x89\x63\xb7\xbb\x71\xe2\x38\x39\x05\x8a\x7b\x1c\x8b\x14\xea\x9c\xb1\x3a\xf0\xd8\x34\x56\x32\x77\x5c\x9a\x01\x2a\x65\xdf\x6f\x68\x76\xa8\x94\x9d\x1d\xab\x8b\x97\x4a\x65\xf9\x0b\x12\x24\xf3\x0b\x1e\xf2\x66\x06\xac\x35\x56\x4b\x2a\x96\xb9\xec\x80\x2f\xfe\x5c\xc0\x17\x97\x47\x33\xdb\x9f\x16\xd2\x76\xcf\x69\x6a\x9a\x50\x3b\xa6\x31\x6f\x86\x31\x06\xb1\x03\xc5\x12\x93\xfd\x16\x2b\x99\x0d\xc3\x98\x5a\x7c\x20\x13\xf7\x5d\xa4\x0d\x24\xd9\x89\x59\x6a\xea\xa2\x36\x70\xd6\x45\xe7\x43\x60\xa6\xd3\x49\xe4\xa3\x5d\x6b\x90\xd8\x56\xcf\xee\x16\x9d\xdd\xc0\xf7\x1c\x5a\x34\x76\xca\x03\x17\x34\x76\x8f\x19\x76\x9a\x91\xe9\x2d\xe2\x9c\x23\x9f\x1b\x26\x03\x35\xf7\xd3\xa1\x63\x79\xd4\xde\xa0\xc8\x58\x5d\x74\xd2\x9c\x8c\x04\x4e\x14\xc7\x88\x12\x6a\x8e\xdc\x28\x8e\x11\x25\x3b\x29\x07\x9f\x96\x74\x6c\x37\xe9\x34\xbb\x4f\xd2\x69\x46\x41\x00\xcb\xbb\x23\xb1\xe5\x5a\xdb\x4a\x4c\x9b\x07\xb7\x9d\xac\x23\x21\x3e\x8f\x66\xd6\x96\x1d\x22\x8f\xb6\xed\xb1\x6b\xb1\x04\x3a\x6f\x59\xdc\xec\x39\x2c\x7f\xe1\xe4\xcf\x96\xf0\x55\xf0\x93\xce\x67\x4b\x38\xb6\x0d\xd4\xd9\x6e\x77\xee\x84\xec\xe9\x3b\xd0\x61\x00\xaa\x52\xc0\x39\x02\xdd\x32\x61\x0d\x46\x92\xce\x0a\x05\xaa\x92\xf2\xd3\xf6\xfc\x51\x2a\xc0\xab\xb2\xdd\x34\x38\x03\x21\x8d\x3d\xf4\x6f\x45\x45\xa4\xb8\xe1\x17\x08\x86\xb7\x58\x9c\xca\x8f\x05\x79\x79\x36\x0b\xb9\x69\xf7\x97\xe2\x97\x52\xe9\x75\xd9\x64\x5d\xdc\xf9\x5c\x4d\x10\xd2\xac\xe8\x1d\x68\x96\x49\x94\xa6\xe5\x46\xb3\x99\xed\xd3\xd5\x1c\xb7\xe5\xee\xd6\x1c\x77\xb2\xa7\x9a\xe3\x1e\xc7\x6a\x0e\x75\xce\x78\x7d\x65\x4f\xb0\x35\x5e\xf5\x37\x28\x67\xfa\x26\x8e\x7d\x4c\x02\xeb\x2d\x6d\xd4\x3e\x9d\x78\x7d\x45\x2c\x98\x32\xd8\xed\xc9\x8b\xd8\xe0\xde\x87\xb9\x6d\x5b\xba\xcc\x4e\x13\xc6\xb6\xf4\xd2\xe5\xd6\xcf\xd4\x63\xe8\xef\xb6\xdc\x6a\xd1\x4a\x25\x77\x65\x31\xac\xed\x93\x84\x12\xfe\xfb\xfa\xd7\x53\xdb\x99\x98\x8c\x5f\xe8\x1a\xdd\x42\x93\x8a\x35\xe0\x3b\xcb\xf3\x0f\x58\x19\xff\xc7\x23\xd4\x1b\x34\xd3\x61\x6c\x4b\x90\xfc\x48\x39\x64\xe7\xf0\xee\xfd\xf9\xb5\x71\xf5\x33\x29\xd0\x9a\x6a\xa8\xeb\x6b\x31\x73\x97\x69\x8b\x70\x2f\xe4\x5e\xb3\x3c\xdd\xc3\xb9\x70\xb7\xa4\x99\xbf\xdb\xa4\x4d\xfe\x57\xe6\x47\xce\x73\x9f\x6e\xb3\x90\x0d\x3e\xc8\x74\x61\xd7\x9c\x2e\x74\x82\xea\xbd\xf7\x02\x3f\xa9\xb8\x19\xe8\xe1\x5e\x30\x1c\xc6\xad\xe8\xe7\x1f\xc7\x11\xbc\x38\x56\xc9\x90\x82\x2a\x0c\x14\x1d\xf9\x1c\x63\xf9\x6a\x87\x29\xc3\xb0\xcc\x93\x12\xd1\x05\xb3\xad\x68\x9b\x0d\x8a\x3a\xf3\x82\x59\xc7\xe6\x92\x2c\xc9\xf2\xdc\xc3\xe4\xef\x23\xd3\x09\xf8\xeb\xcb\xa7\x9c\x82\x4d\xdd\x38\x09\xef\x83\x9f\x46\xb8\x3c\x4d\x26\x72\x12\x9c\x4c\x53\x7f\x74\x36\x83\x45\xa7\x8b\xd5\xa7\x8f\x2d\x77\x23\xfb\xf9\xc7\xf1\x1d\x7b\xc5\x58\xe7\xbe\xb2\xbc\x15\x6d\xaf\xb6\xb8\x02\xa1\xdd\x36\xc0\x2f\x51\xc0\xf9\x96\x31\x54\x40\x25\xc5\x57\xd7\x70\xb9\x4b\x65\x62\x60\x21\x3b\xdf\x32\x5f\x13\x2c\x73\x73\xc2\xd9\xbe\xca\xd0\x83\x81\x3c\x8c\xe6\xac\xa1\x19\xe8\xc3\x40\xa0\x52\x69\x40\xb0\x2e\x1c\xb4\xaf\xbe\xd4\x25\xa1\x8b\x85\xdf\x00\xf5\x08\x65\xdc\x35\x6d\x6d\x27\xdb\x4f\xba\xfb\xc4\xaa\x43\x4f\xda\xdf\x1f\x1b\xe9\xd1\xf1\x27\xa3\xb4\x5c\x7a\xc0\x32\x0d\x1e\x96\x1c\x86\xa5\x6b\x58\x5f\x09\x36\xeb\x1b\x59\xef\xe5\x57\xaf\xe2\x1d\xc8\xae\x14\x22\x3e\x83\x36\x49\x19\xe7\x32\x1d\x06\xca\xd6\x33\x8b\xf1\x1a\xdc\x5e\xc5\xfa\x3b\x9d\x4c\xfc\x01\x33\xf5\xc6\x17\xc6\xf6\x2a\xef\xe0\x1e\x41\xb6\x4f\x7f\xec\xe8\x31\x6e\x45\x12\xb5\xd6\x5f\x72\xf8\x43\x6f\x4d\x59\xb7\xa2\x13\x4b\x05\xfc\xf8\xdd\xf1\xa1\x9f\xcd\x56\x6d\xc4\x95\x87\xfa\x42\xce\x58\x8a\x12\x6f\x02\x97\x70\x1c\x9e\x9d\x45\x2a\x27\x9e\x11\x7c\x98\x91\xc8\x7f\xad\x20\xa1\x51\x6e\xaf\x9f\x24\x9f\x22\x16\xc0\x67\x9d\xf1\x10\xac\x49\xb9\xf2\xe4\x01\x34\x0b\x80\xec\xdb\x24\x3e\x37\xe8\xfb\x36\x87\x4f\xda\x1d\xc8\xea\xa1\xfd\xe1\x09\xbc\xdf\xbb\x2f\x3c\x66\x63\xa0\x01\xdc\x87\xb4\x74\x1a\x6e\x73\xf8\xec\x71\xdf\xf9\x4f\x43\x06\xef\xdd\x37\xbe\xc4\xf7\x9f\x9c\x43\x9f\x31\x1e\xf3\x61\xd5\xeb\x97\x3c\x1f\xa8\xae\xe6\xb9\xb3\xca\x27\xd4\xbc\x1e\x8f\xda\x5b\xf4\xf6\xd7\x99\x07\x97\xbd\xf1\x2a\x72\xbf\x22\xb2\x7f\x59\xe3\x1e\xb1\xb7\x3c\x04\x6c\x49\xe7\xae\x2c\xdf\xc1\x7c\x14\xbb\x94\x8e\xec\x85\x6e\x5f\xa0\x3e\x10\xb8\xb1\x30\xbc\x6f\x14\xc6\x20\x74\x81\x15\x03\x90\x95\x8d\xbb\x6f\xbb\xbd\xf7\x94\x7b\xd4\x68\xef\x9c\xfd\x77\xeb\x74\xd2\x7d\x4e\x75\x8f\x59\xeb\xc2\x7f\x18\x5f\x82\x33\xe7\x75\xc7\xdd\x64\xe0\xae\xa6\x72\xe8\x58\x45\xe7\x0f\x67\xf0\x2c\x1e\x6c\xe1\xef\xbf\xed\xdb\x89\x60\xb2\x38\xdd\xb6\xa8\x78\x95\xe5\x03\x3e\x43\x1e\x88\x19\xc8\x0b\x47\x55\xd2\x33\x71\x91\xb1\x46\x96\xe6\xdb\x6f\xdc\x2c\x9e\xc9\x8b\xb4\x73\x5a\x5f\xb6\x02\xaf\x36\x58\x19\xac\x07\x87\x7d\xba\x67\x88\x57\x0c\x0b\x77\xc7\x90\x5e\x31\xe8\x8f\xdc\x54\x6b\x30\x6e\x74\x72\xd5\xee\xff\x2f\xec\x48\x55\xa9\x11\x0c\xfc\x67\x09\xe9\x87\x66\xf3\x4f\x38\x3e\x06\x03\xff\x1e\x88\xbf\xfd\x66\x61\x2b\xd9\xf0\x54\xef\x2e\x2e\x44\x3e\x6e\xee\x2d\x1f\xb7\xf7\x96\xef\x35\xb8\xed\x2c\x8e\x15\xac\xae\x62\xc0\x47\x55\x6e\x74\xfa\xaf\x09\x5e\x5e\x8a\xda\xf1\xa0\x20\x68\xd1\xac\x65\x0d\x1f\xb9\x59\x83\xc2\x4a\x5e\x3a\xf2\x8b\x42\x6f\x15\x82\x90\xb0\x29\x05\xaf\x34\x70\x01\x9e\xa9\x72\xb1\xf2\x65\x2e\xa9\x50\xac\x4e\xbe\xca\x82\x17\xe6\xf0\xee\x7d\xf7\x1f\x04\xb7\x39\x64\xbe\x18\x25\xe2\xe1\x49\xba\x46\x4b\xbf\xad\x79\x1f\x2f\x9c\xc1\x25\xe5\xa5\x73\xce\xf2\xd8\xcb\x5e\x71\xa2\xcb\x95\x5e\x48\x7c\xf1\x26\xcc\xce\x39\x1f\xef\x3e\x67\x70\x49\x14\x87\x85\xc2\x44\x51\x48\xf5\xdf\x32\xbd\x10\x5d\x75\x11\x26\x30\x1b\xa0\xeb\x08\xc1\x0e\xb8\x4e\xfc\x58\x28\xd3\x33\x70\x8a\xa6\x93\x07\x30\xe9\x4b\x82\xc5\xd2\x31\x95\x4e\xf8\x14\x48\xf6\xe6\xd7\x03\xd3\x01\x89\x9e\x20\x8d\xe2\x98\x76\xde\x85\x32\x30\x93\x1d\x30\x43\xc3\x63\xe1\xec\x9f\xc8\x53\x40\x43\x4b\x80\xd4\xdd\x7d\x59\x4c\x79\xfc\x27\xa4\x28\x7f\x42\x58\xc3\x4c\x47\x80\xe5\x91\xb7\x1d\x82\x36\x4e\x64\x08\xae\x3b\xa9\xed\x40\xeb\xc4\x8f\x05\xf6\xd0\x09\x2e\x73\x74\xcf\xe1\xf7\x4b\x77\x8a\x7b\x12\xfc\xdc\x74\x46\xd0\x73\x4e\x1c\xc6\xce\xcd\x62\x07\x39\xb7\xd9\xef\x20\xe7\xc4\x8f\x45\xae\xc7\x65\x92\x80\x74\xf2\x10\x8e\xf6\x8d\xa2\xd1\x91\x90\x4e\xf8\x84\x50\xba\xf9\x8d\x40\xb9\xf6\xe4\xe7\x10\x94\xde\xfd\x21\x94\x9e\x5a\xec\x60\xe9\xe5\x8f\x05\xf3\x20\x4b\xca\x3c\x9d\xb1\xe2\x57\x09\x51\x7a\x12\xf0\xfc\x84\x46\xd0\xdb\x04\x76\x75\x08\x3e\x3f\x91\x0e\x3f\x9a\x62\xbc\x9b\x30\x90\xde\x4e\xe4\xbd\x37\x3a\x36\x48\x05\xa6\xf8\x99\x8b\x3a\xcb\x61\xb9\x8c\xed\xaf\x0c\xd1\xb2\x89\x81\x25\x98\xe2\x65\x83\x6d\xd6\xe3\x0d\x66\x7a\x3b\xfd\x7f\x00\x00\x00\xff\xff\xe7\x1a\x9d\x9d\x4c\x2c\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11340, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
