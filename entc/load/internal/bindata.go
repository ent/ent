// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x6f\xe3\x36\x12\xfe\x6c\xff\x8a\xd9\x00\x0d\xa4\x85\x2b\xf7\x8a\xa2\xb8\xf3\x9e\x0f\x28\xda\x2d\x9a\xeb\x35\x5d\x74\x77\xfb\x65\xb1\x48\x15\x89\xb4\xb9\x91\x48\x97\xa4\xb3\x49\xd3\xfc\xf7\xc3\x0c\x5f\x44\xc9\xb2\xe3\x7d\x89\xbf\x44\x1a\x0e\x87\x33\x0f\x1f\x0e\x87\x54\xe6\x73\xf8\x5e\x6d\x6e\xb5\x58\xad\x2d\x7c\xfd\xd5\x3f\xfe\xf5\xe5\x46\x33\xc3\xa4\x85\x1f\xcb\x8a\x5d\x2a\x75\x05\x67\xb2\x2a\xe0\xbb\xa6\x01\x52\x32\x80\xed\xfa\x9a\xd5\xc5\x74\x3e\x87\x57\x6b\x61\xc0\xa8\xad\xae\x18\x54\xaa\x66\x20\x0c\x34\xa2\x62\xd2\xb0\x1a\xb6\xb2\x66\x1a\xec\x9a\xc1\x77\x9b\xb2\x5a\x33\xf8\xba\xf8\x2a\xb4\x02\x57\x5b\x59\xa3\x09\x21\x49\xe5\x7f\x67\xdf\x3f\x3f\x7f\xf9\x1c\xb8\x68\x58\x90\x69\xa5\x2c\xd4\x42\xb3\xca\x2a\x7d\x0b\x8a\x83\x4d\xc6\xb3\x9a\xb1\x62\x3a\xdd\x94\xd5\x55\xb9\x62\xd0\xa8\xb2\x9e\x4e\x45\xbb\x51\xda\x42\x36\x9d\x9c\x30\x59\xa9\x5a\xc8\xd5\xfc\x9d\x51\xf2\x64\x3a\x39\xe1\xad\xc5\x3f\x9a\xf1\x86\x55\xf6\x64\x3a\x9d\x9c\xac\x84\x5d\x6f\x2f\x8b\x4a\xb5\x73\xee\x03\x9e\x33\x49\x6a\x7b\x9a\xe6\xa6\x5a\xb3\xb6\x9c\xb3\x7a\xc5\x8e\x50\xe3\x82\x35\xf5\x11\x7a\x42\xd6\xec\xe6\x64\x9a\x4f\x11\x92\x97\x24\x03\xcd\xfc\x64\x18\x28\x25\x30\x69\x0b\xdf\x60\xd7\xa5\x85\xf7\xa5\xa1\x98\x59\x0d\x5c\xab\x16\x4a\xa8\x54\xbb\x69\x04\x02\x6f\x98\x06\x8f\x4b\x31\xb5\xb7\x1b\x16\x4c\x1a\xab\xb7\x95\x85\xbb\xe9\xe4\xbc\x6c\x19\x00\xa0\x44\xc8\x15\xd0\xef\x0f\x44\x6a\x71\x22\xcb\x96\xcd\x54\x2b\x2c\x6b\x37\xf6\xf6\xe4\x8f\xe9\xe4\x7b\x25\xb9\x58\x01\xf9\x10\x9e\xbd\x72\x45\xaf\x7d\xf5\xe7\xf5\x8a\x19\x00\x78\xf3\xf6\x29\x3e\xa6\xb6\x11\x36\xd3\xd7\xfe\x11\x21\x32\xa4\x4d\x8f\x89\x36\xa1\x37\x50\x3f\x43\xa4\x98\x41\x75\x7a\x4c\xd4\x85\x6b\xea\xeb\xff\xa4\xd4\x95\x77\xe6\x85\x32\xc2\x0a\x25\x83\xfe\x1a\x9b\xfa\xda\x2f\x54\x23\xaa\x5b\x80\x4b\xa5\x1a\x80\x1e\x2c\x1b\x6a\xea\xa9\xdf\xd3\x74\x45\xb3\x35\x33\x95\x16\x97\xcc\x40\x09\xe4\x3a\x6c\x42\x93\x67\xb4\x9b\x6d\x3f\x27\xb1\x5f\x37\x2b\x31\x22\x00\x21\x2d\xc0\x7c\x0e\x0e\x13\x0a\x2d\x58\x71\xb6\x1b\x61\x6c\x31\x9d\xfc\x22\x6e\x58\x7d\x26\xb1\x0b\x39\x3d\x9f\xc3\x99\xac\x45\x55\x5a\x66\x40\xf0\xa4\x03\x32\xa6\x45\xed\x2f\x85\x74\x1d\x85\x3c\xf3\x76\xdd\x58\x24\xea\x8f\xd5\x92\xc8\x8d\xe5\xc2\x75\x0e\xed\x92\xd3\xc9\x3f\x82\x9b\xae\xe3\x2e\x35\xdd\x2f\x25\x68\xfa\xdb\x4b\xd6\x33\xc9\x55\xa7\xf6\x94\x62\x2f\x5e\xdd\x6e\x58\xaf\xc1\x77\x47\x07\xfa\xdd\x5f\x95\xe9\x60\x0f\x8c\x6e\xcb\x01\xf5\x5f\x8a\xbf\x12\xdf\x9f\x0a\x69\xbf\xfd\x66\x6f\x6f\x23\xfe\x1a\x0c\xfe\x5c\x6e\x5b\x13\xd5\xde\xbc\x75\xa0\xdc\xc1\xf9\x0c\x7e\x0f\xbe\xdc\xc7\xb5\x84\xca\xfd\xfe\xaf\xa5\xf8\x73\x1b\x1d\x48\x49\x3c\x32\xfc\x96\x94\xfb\x06\xce\x45\xd3\x94\x97\x0d\x3b\xca\x80\xf4\xca\x7d\x13\xbf\x6e\x90\xd4\x65\x73\x94\x09\xe5\x95\xfb\x26\x7e\x60\xbc\xdc\x36\xf6\xb8\x30\x6a\xa7\x3c\x6a\xe1\xf7\xb2\x41\x38\x84\xb4\x4c\x63\xda\xbd\xbb\x3f\x60\xe1\xe2\x1a\xb5\x07\x80\x6e\xea\xd2\xb2\xe0\xcf\x43\x80\x92\xf2\xc5\xa8\x43\x67\x6d\xbb\xb5\x11\xd9\x07\x0c\x89\xa0\xdc\xb7\xf1\x7b\xd9\x88\xba\xb4\x4a\x13\x45\x68\xd1\xee\xb7\x71\x1d\x95\x07\x0c\xb5\x4a\x97\x2b\xf6\x33\xbb\x85\x87\xf9\x6d\x9c\xf2\xc5\x15\xbb\x1d\xe6\x49\x9f\xbb\xe8\xf7\xb4\xff\x3a\xb4\x12\xb2\xe0\xc0\x11\x26\x51\x7c\x7d\x14\x22\x26\x28\x0f\x6c\x50\x3e\xc5\xc5\x8d\xba\x6d\xb9\x79\xe3\x02\x7a\xdb\x8b\x2b\xd8\x20\xe5\x8b\xdd\x25\xff\x9d\x94\xca\x96\xe8\xa1\xe9\x5b\xe9\xf1\xc6\x5b\x29\x3b\xe5\x91\xbd\x80\xf6\xbb\xdd\xdc\x48\xe2\x8f\x48\x8d\xd4\x6f\x3c\x33\xee\x99\xb9\xbd\x69\x31\x80\xf4\x70\xdf\xc3\x39\xf1\x81\xbe\xc3\x84\xf8\x1b\xe3\xd1\xeb\xc3\x5d\x35\xe3\x17\xbb\x6e\xff\xc6\x78\x54\xec\xaa\x89\x3d\xfd\xf7\x27\xc3\x3d\xf4\x3a\x90\x09\xcf\xe4\x35\xd3\xe6\x20\x39\x63\xd9\x41\x9a\x43\xbf\xff\xdc\x0a\xcd\xea\x87\xbb\x6b\xaf\xb9\x7f\x99\x3e\xc5\xaa\xa9\xe8\x2f\xdc\x23\xd6\x68\x4a\xeb\x3d\xa4\x3e\x8a\xd3\xae\x46\xd8\x25\xb5\x93\x7f\x04\xab\x5d\xc7\x8e\xd6\xc9\x44\x45\xa8\x0e\xcc\x4c\x28\x2f\xc3\x0e\x89\x9c\x7a\xb8\xbc\x1c\xd1\x1e\x2b\x2f\x13\x94\x23\x5d\x1f\x00\xda\xa1\x74\xce\xde\x13\x3d\x2b\xcd\xa8\xf4\x2a\x65\x40\x04\x9d\x72\xb0\xd0\x93\xab\x12\x37\x56\xe9\x62\xca\xb7\xb2\x0a\x3d\x33\x56\xfb\x99\xfe\x21\x6a\xe4\x9e\xf3\x77\xd3\x89\x64\xb0\x58\xc2\x29\xbe\xde\x4d\x27\xb8\x24\x17\x91\x49\xac\x2e\x5e\x95\xab\x19\x8a\x6f\x37\x6c\x91\x8a\x71\x2d\x4f\x27\x94\x39\x52\x39\xbe\xa3\xdc\x41\xbf\x88\x72\xf7\x8e\x2d\x9e\xff\x8b\xd0\xe2\xdf\xb1\x29\x70\x7b\xe1\x9b\xc2\xbb\x6b\xe3\xdd\x58\xd4\xc6\xc3\x58\x1d\xb4\x0b\x6a\xea\xde\xb1\x35\x61\xeb\x02\xda\xf2\x8a\x65\xe3\x9c\xcd\x67\xd3\xc9\xfd\x74\xc2\x95\x86\x8b\x19\x94\x16\x51\xd1\xa5\x5c\x31\x34\x99\x52\x1e\x51\x92\x2c\x15\xbd\x29\x2d\x05\x9e\xe5\x6f\x61\x09\xa5\x25\x43\x82\x83\x66\x1c\xad\x38\x6f\x9f\xd1\xeb\x93\x25\x48\xd1\x04\x1b\x98\x84\x96\x71\x9e\x34\xe3\xb9\x93\x27\x64\x59\x82\xd3\x4b\x64\x64\x5e\x33\xbb\xd5\x12\x24\xeb\x68\xe2\xea\xdd\x5d\x9e\xb8\x2a\x9d\x88\xe2\x1e\xc7\x98\x42\x9d\x33\x5e\x87\xc2\x36\xe5\x4a\xe6\x0e\x50\x33\x60\x5a\xe3\xfb\x1d\x45\xc7\xb4\xc6\xe8\x78\x5d\x3c\xd7\x3a\xcb\x9f\x91\x20\x89\x2f\x78\x28\x9a\x19\xf0\xd6\xa2\x96\xd2\x3c\x73\xab\x03\xbe\xf8\x73\x01\x5f\x5c\x9f\xcc\xb0\x3f\x4d\x24\x76\xcf\x29\x34\x43\xa8\x9d\xd2\x98\x77\x43\x8e\x41\xec\x40\x5c\xe2\xaa\xdf\x82\x92\xd9\x90\xc6\xd4\xe2\x89\x4c\x95\xf0\x22\x6d\x20\xc9\x0e\x67\xa9\xa9\x63\x6d\xa8\x5f\x17\x9d\x0f\xa1\x48\x9d\x4e\x62\x69\xda\xb5\x06\x09\xb6\xfa\x2a\x6f\xd1\xd9\x0d\x75\x9f\x43\x8b\xc6\x4e\xeb\xc1\x05\x8d\xdd\xab\x10\x3b\xcd\x58\xf0\x2d\x62\xcc\xb1\xaa\x1b\x2e\x06\x6a\xee\x2f\x87\xae\xd6\xa3\xf6\x86\xc9\x8c\xd7\x45\x27\xcd\xc9\x48\xa8\x8a\xe2\x18\x51\x42\xcd\xb1\x3a\x8a\x63\x44\xc9\xce\x92\x83\x8f\x5b\x74\x7c\x77\xd1\x19\x7e\xcc\xa2\x33\x9c\x48\x00\xcb\x87\x99\xd8\x0a\x63\x30\x13\xd3\xe6\x21\xb0\x13\x3a\x12\xf8\x79\x32\x43\x5b\x38\x44\x1e\x6d\xe3\x29\x6c\xb1\x04\x3a\x7e\x21\x6e\x78\x2c\xcb\x9f\x39\xf9\x93\x25\x7c\x15\xfc\xa4\xe3\xda\x12\x4e\xb1\x81\x3a\xe3\x76\xe7\xce\xcc\xbe\x8a\x07\x3a\x14\x40\x55\x4a\xb8\x64\x40\x77\x4a\xac\x06\xab\x48\x67\xc5\x24\xd3\x25\xad\x4f\xec\xf9\xa3\xd2\xc0\x6e\xca\x76\xd3\xb0\x19\x48\x65\xa1\x04\x5c\xb6\x54\x18\x37\xe2\x8a\x81\x15\x2d\x2b\xce\xd5\xfb\x82\xbc\xbc\x98\x85\xb5\x89\xfb\x4b\xf1\x4b\xa9\xcd\xba\x6c\xb2\x8e\x77\x7e\xad\x26\x08\x19\x5e\xf4\x4e\x36\xcb\x84\xa5\x69\xba\x31\x7c\x86\x7d\xba\x9c\xe3\xb6\xdc\xdd\x9c\xe3\xce\xfa\x94\x73\xdc\xe3\x58\xce\xa1\xce\x99\xa8\x6f\xf0\x40\x5b\xb3\x9b\xfe\x06\xe5\x4c\xdf\xc5\xb1\x4f\x49\x80\xde\xd2\x46\xed\x97\x93\xa8\x6f\xa8\x0a\xa6\x15\xec\xf6\xe4\x45\x6c\x70\xef\xc3\xb5\x8d\x2d\xdd\xca\x4e\x17\x0c\xb6\xf4\x96\xcb\xbd\x8f\xd4\x63\xe8\x6f\xbb\xdc\x6c\xd1\x4c\x25\xb7\x67\x91\xd6\xf8\xa4\xa0\x84\xff\xbe\xfc\xf5\x1c\x3b\x53\x25\xe3\x27\xba\x66\x6e\xa2\x49\x05\x0d\xf8\xce\xea\xf2\x1d\xab\xac\xff\xe3\x11\xea\x0d\x9a\x99\x30\x36\x16\x48\x7e\xa4\x1c\xb2\x4b\x78\xf3\xf6\xf2\xd6\xba\xfc\x99\x24\x68\x43\x39\xd4\xf5\x45\xcc\xdc\xf5\xda\x22\xdc\x14\xb9\xd7\x2c\x4f\xf7\x70\x21\xdd\x9d\x68\xe6\x6f\x32\x69\x93\xff\x95\xfb\x91\xf3\xdc\x2f\xb7\x59\x58\x0d\x9e\x64\xa6\xc0\x39\xa7\x2b\x9e\xa0\x7a\xf4\x5e\xe0\x83\x8a\x9b\x81\x19\xee\x05\xc3\x61\xdc\x8c\x7e\xfe\x71\x5c\x81\x17\xc7\x2a\x39\x23\x52\x85\x81\xa2\x23\x9f\x63\x2c\x9f\xed\x58\x5a\x61\x60\xe5\x49\x0b\xd1\x91\x19\x33\xda\x66\xc3\x64\x9d\x79\xc1\xac\xab\xe6\x92\x55\x92\xe5\xb9\x87\xc9\xdf\x50\xa6\x01\xf8\x0b\xcd\xc7\x0c\x01\x97\x6e\x0c\xc2\xfb\xe0\xc3\x08\xd7\xa9\x49\x20\x67\xc1\xc9\x74\xe9\x8f\x46\x33\x98\x74\xba\x6a\x7d\x7c\x6e\xb9\x3b\xda\xcf\x3f\x8e\xef\xd8\x4b\xc6\x26\xf7\x99\xe5\xb5\x6c\x7b\xb9\xc5\x25\x08\xe3\xb6\x01\x71\xcd\x24\x5c\x6e\x39\x67\x1a\x28\xa5\xf8\xec\x1a\xae\x7b\x29\x4d\x0c\x2c\x64\x97\x5b\xee\x73\x02\x56\x6e\x4e\x38\xdb\x97\x19\x7a\x30\x90\x87\xd1\x1c\x1a\x9a\x81\x39\x0c\x04\xd3\x3a\x25\x04\xef\xe8\x60\x7c\xf6\xa5\x2e\x49\xb9\x58\xf8\x0d\xd0\x8c\x94\x8c\xbb\xa6\xd1\x76\xb2\xfd\xa4\xbb\x4f\xcc\x3a\xf4\x64\xfc\x8d\xb2\x55\x1e\x1d\x7f\x32\x4a\xd3\xa5\x07\x2c\x33\xe0\x61\xc9\x61\x98\xba\x86\xf9\x95\x60\x43\xdf\xc8\x7a\x6f\x7d\xf5\x32\xde\x81\xd5\x95\x42\x24\x66\xd0\x26\x4b\xc6\xb9\x4c\x87\x81\xb2\xf5\x95\xc5\x78\x0e\x6e\x6f\x62\xfe\x9d\x4e\x26\xfe\x80\x99\x7a\xe3\x13\x63\x7b\x93\x77\x70\x8f\x20\xdb\x2f\x7f\x70\xf4\xc8\x5b\x99\xb0\x16\xfd\x25\x87\xdf\xf5\xe6\x94\x77\x33\x3a\xc1\x52\xc0\x8f\xdf\x1d\x1f\xfa\xab\x19\xd5\x46\x5c\xf9\x50\x5f\xc8\x19\x2c\x51\xe2\x6d\xe0\x12\x4e\xc3\xb3\xb3\x48\xe9\xc4\x57\x04\xef\x66\x24\xf2\xdf\x2f\x48\x68\xb5\xdb\xeb\x27\xc9\xc7\x89\x05\x88\x59\x67\x3c\x90\x35\x49\x57\xbe\x78\x00\xc3\x03\x20\xfb\x36\x89\xcf\x0d\xfa\xbe\xcd\xe1\xa3\x76\x07\xb2\x7a\x68\x7f\x78\x04\xef\xf7\xee\x0b\x9f\xb2\x31\xd0\x00\xee\xd3\x5a\x1a\x86\xdb\x1c\x3e\x3b\xef\x3b\xff\x69\xc8\xe0\xbd\xfb\xea\x97\xf8\xfe\x93\x73\xe8\x33\xf2\x31\x1f\x66\xbd\x7e\xca\xf3\x44\x75\x39\xcf\x9d\x55\x3e\x22\xe7\xf5\xea\xa8\xbd\x49\x6f\x7f\x9e\xf9\xe0\xb4\x37\x9e\x45\x8e\x4b\x22\xfb\xa7\x35\xee\x11\x7b\xd3\x43\xc0\x96\x74\x1e\x5a\xe5\x3b\x98\x8f\x62\x97\x96\x23\x7b\xa1\xdb\x47\xd4\x0f\x04\x6e\x8c\x86\xc7\xb2\x30\x92\xd0\x11\x2b\x12\x90\x97\x8d\xbb\x6f\xbb\x3f\x3a\xe4\x5e\x69\xb4\x37\x66\xff\x25\x3b\x0d\xba\x5f\x53\x1d\x11\xb5\x29\xfc\xa7\xf2\x25\x38\x73\x5e\x77\xdc\x4d\x0e\xee\x6a\x2a\x87\xae\xaa\xe8\xfc\x11\x1c\x9e\xc4\x83\x2d\xfc\xfd\x37\xbe\x9d\x49\xae\x8a\xf3\x6d\xcb\xb4\xa8\xb2\x7c\x50\xcf\x90\x07\x72\x06\xea\xca\x95\x2a\xe9\x99\xb8\xc8\x78\xa3\x4a\xfb\xed\x37\x2e\x8a\x27\xea\x2a\xed\x9c\xe6\x97\xad\x64\x37\x1b\x56\x59\x56\x0f\x0e\xfb\x74\xcf\x10\xaf\x18\x16\xee\x8e\x21\xbd\x62\x30\xef\x85\xad\xd6\x60\xdd\xe8\xe4\x2a\xee\xff\xcf\x70\xa4\xaa\x34\x0c\x2c\xfc\x67\x09\xe9\x97\x67\xfb\x4f\x38\x3d\x05\x0b\xff\x1e\x88\xbf\xfd\x66\x81\x99\x6c\x78\xaa\x77\x17\x17\x32\x1f\x37\xf7\x5a\x8c\xdb\x7b\x2d\xf6\x1a\xdc\x76\x16\xc7\x12\x56\x97\x31\xe0\xbd\x2e\x37\x26\xfd\x67\x05\x2f\x2f\x65\xed\xea\xa0\x20\x68\x99\x5d\xab\x1a\xde\x0b\xbb\x06\xcd\x2a\x75\xed\x8a\x5f\x26\xcd\x56\x33\x90\x0a\x36\xa5\x14\x95\x01\x21\xc1\x57\xaa\x42\xae\x7c\x9a\x4b\x32\x14\xaf\x93\xcf\xb3\xe0\x85\x39\xbc\x79\xdb\xfd\x4f\xc1\x7d\x0e\x99\x4f\x46\x89\x78\x78\x92\xae\x19\x96\xdf\x68\xde\xf3\x45\x70\xb8\xa6\x75\xe9\x9c\xc3\x3a\xf6\xba\x97\x9c\xe8\x72\xa5\x47\x89\x2f\x5e\x85\xe8\x9c\xf3\xf1\xee\x73\x06\xd7\x54\xe2\xf0\x90\x98\x88\x85\x94\xff\xb1\xd2\x0b\xec\xaa\x8b\x10\xc0\x6c\x80\xae\x2b\x08\x76\xc0\x75\xe2\x4f\x85\x32\x3d\x03\xa7\x68\x3a\x79\x00\x93\xbe\x24\x20\x96\xae\x52\xe9\x84\x8f\x81\x64\x2f\xbe\x1e\x98\x0e\x48\xe6\x0b\xa4\x51\x1c\xd3\xce\xbb\x50\x86\xca\x64\x07\xcc\xd0\xf0\xa9\x70\xf6\x4f\xe4\x29\xa0\xa1\x25\x40\xea\xee\xbe\x10\x53\x11\xff\x2d\x29\xca\x1f\x11\xd6\x10\xe9\x08\xb0\x22\xd6\x6d\x87\xa0\x8d\x81\x0c\xc1\x75\x27\xb5\x1d\x68\x9d\xf8\x53\x81\x3d\x74\x82\xcb\x5c\xb9\xe7\xf0\xfb\xa5\x3b\xc5\x3d\x0a\x7e\x2e\x9c\x11\xf4\x9c\x13\x87\xb1\x73\x51\xec\x20\xe7\x36\xfb\x1d\xe4\x9c\xf8\x53\x91\xeb\xd5\x32\x09\x21\x9d\x3c\xd0\x11\xdf\x88\x8d\xae\x08\xe9\x84\x8f\x08\xa5\x8b\x6f\x04\xca\xb5\x2f\x7e\x0e\x41\xe9\xdd\x1f\x42\xe9\x4b\x8b\x1d\x2c\xbd\xfc\x53\xc1\x3c\x58\x25\x65\xbe\x9c\x41\xf1\x8b\xa4\x50\x7a\x14\xf0\x7c\x40\x23\xe8\x6d\x42\x75\x75\x08\x3e\x1f\x48\x87\x1f\x85\x18\xef\x26\x2c\xa4\xb7\x13\x79\xef\x8d\x8e\x0d\x4a\x83\x2d\x7e\x16\xb2\xce\x72\x58\x2e\x63\xfb\x0b\x4b\x65\xd9\xc4\xc2\x12\x6c\xf1\xbc\x61\x6d\xd6\xab\x1b\xec\xf4\x7e\xfa\xff\x00\x00\x00\xff\xff\x37\x71\x9b\x6f\x3a\x2c\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11322, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
