// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xef\x6f\xdb\x36\xf3\x7f\x6d\xfd\x15\xd7\x00\x0d\xa4\xc2\x93\xbb\x61\x18\xbe\x5f\xf7\xf1\x03\x0c\x5b\x8b\xf9\xd9\xd3\xb4\x58\xdb\xbd\x29\x8a\x4e\x91\x48\x9b\x8d\x44\xb9\x22\x9d\xc6\xcb\xf2\xbf\x3f\xb8\x3b\x52\xa2\x64\xd9\x6d\x9a\xc6\x6f\x22\x1d\xef\x78\xbc\x0f\xef\x17\xa9\xcc\x66\xf0\x4b\xbd\xd9\x35\x6a\xb5\xb6\xf0\xc3\xe3\xef\xff\xff\xbb\x4d\x23\x8c\xd0\x16\x9e\x65\xb9\x38\xaf\xeb\x0b\x58\xea\x3c\x85\x9f\xcb\x12\x88\xc9\x00\x8e\x37\x97\xa2\x48\xa3\xd9\x0c\x5e\xaf\x95\x01\x53\x6f\x9b\x5c\x40\x5e\x17\x02\x94\x81\x52\xe5\x42\x1b\x51\xc0\x56\x17\xa2\x01\xbb\x16\xf0\xf3\x26\xcb\xd7\x02\x7e\x48\x1f\xfb\x51\x90\xf5\x56\x17\x38\x85\xd2\xc4\xf2\xdf\xe5\x2f\x4f\xcf\x5e\x3d\x05\xa9\x4a\xe1\x69\x4d\x5d\x5b\x28\x54\x23\x72\x5b\x37\x3b\xa8\x25\xd8\x40\x9f\x6d\x84\x48\xa3\x68\x93\xe5\x17\xd9\x4a\x40\x59\x67\x45\x14\xa9\x6a\x53\x37\x16\xe2\x68\x72\x22\x74\x5e\x17\x4a\xaf\x66\x1f\x4c\xad\x4f\xa2\xc9\x89\xac\x2c\xfe\x69\x84\x2c\x45\x6e\x4f\xa2\x68\x72\xb2\x52\x76\xbd\x3d\x4f\xf3\xba\x9a\x49\x67\xb0\xd2\xf9\xf6\x3c\xb3\x75\x33\x13\x9a\xf8\x3f\xc7\x33\x33\xf9\x5a\x54\xd9\x4c\x14\x2b\x71\x1b\x7e\xa9\x44\x59\xdc\x46\x40\xe9\x42\x5c\x9d\x44\x49\x84\xb0\xbd\x22\x1a\x34\xc2\x6d\x98\x81\x4c\x83\xd0\x36\x75\x03\x76\x9d\x59\xf8\x94\x19\xc2\x45\x14\x20\x9b\xba\x82\x0c\xf2\xba\xda\x94\x0a\x37\xc7\x88\x06\x1c\x76\x69\x64\x77\x1b\xe1\xa7\x34\xb6\xd9\xe6\x16\xae\xa3\xc9\x59\x56\x09\x00\x40\x8a\xd2\x2b\xa0\xdf\x5f\x88\xe6\xfc\x44\x67\x95\x98\xd6\x95\xb2\xa2\xda\xd8\xdd\xc9\x5f\xd1\xe4\x97\x5a\x4b\xb5\x02\x5a\x83\x7f\x76\xcc\x39\xbd\xf6\xd9\x9f\x16\x2b\x61\x00\xe0\xed\xbb\x47\xf8\x18\xce\x8d\x40\x9a\x3e\xf7\x33\xc4\xca\x10\x37\x3d\x06\xdc\x04\xe3\x80\x7d\x89\x48\x09\x83\xec\xf4\x18\xb0\x2b\x1e\xea\xf3\xff\x56\xd7\x17\x6e\x31\x2f\x6b\xa3\xac\xaa\xb5\xe7\x5f\xe3\x50\x9f\xfb\x65\x5d\xaa\x7c\x07\x70\x5e\xd7\x25\x40\x0f\x96\x0d\x0d\xf5\xd8\x6f\x68\xbb\xda\x69\x0b\x61\xf2\x46\x9d\x0b\x03\x19\xd0\xd2\x61\xe3\x87\x9c\xd7\xf3\x6e\xbb\x3d\x69\xe5\xba\x5d\x69\x2d\x02\x50\xda\x02\xcc\x66\xc0\x98\x90\x69\x7e\x16\x9e\xbb\x54\xc6\xa6\xd1\xe4\xb9\xba\x12\xc5\x52\xa3\x08\x2d\x7a\x36\x83\xa5\x2e\x54\x9e\x59\x61\x40\xc9\x40\x00\x3d\xa6\x42\xee\xef\x94\x66\x41\xa5\x97\x6e\x5e\xd6\x45\xa4\xbe\xae\x8a\x48\xac\x8b\xcd\xe5\x05\xed\x3b\x27\xd3\xbf\xc2\x37\x59\x70\xdf\x35\xf9\x17\x3a\xe8\x51\x27\x5d\x6a\x59\x77\x6c\x8f\xc8\xe6\xf4\xf5\x6e\x23\x68\xc0\x89\xa1\xc2\xbe\xd8\xeb\x2c\x98\xfc\x90\x36\x9b\x0d\x5c\xfc\x95\xfa\x3b\x58\xe3\x23\xa5\xed\x4f\x3f\xee\x49\x19\xf5\xf7\x40\xd9\x53\xbd\xad\x4c\xcb\xf6\xf6\x5d\x5f\x9d\x8f\x11\x64\xea\xcb\xbd\xd1\xea\xe3\xb6\x55\x18\x3a\x67\x20\xb7\x25\xa6\xbe\xe0\x99\x2a\xcb\xec\xbc\x14\x47\x05\xb5\x63\xea\x8b\xbe\xd8\xa0\x73\x66\xe5\x51\xd1\xda\x31\xf5\x45\x7f\x15\x32\xdb\x96\xf6\xf8\x72\x0b\x66\x1a\x95\xfc\x33\x2b\xd1\x5c\xa5\xad\x68\x30\x6f\x5e\xdf\x8c\x48\xbe\xbf\x44\xae\x01\x50\x9b\x22\xb3\xc2\xeb\x3f\x04\x14\x31\xbd\x1f\x5d\xc0\xb2\xaa\xb6\xb6\x45\xec\xc0\x04\xca\x33\xf5\x65\xff\xcc\x4a\x55\x60\x66\xa7\x2d\xa6\xa0\xda\x97\xbd\x6c\x99\x06\x1e\x65\xeb\x26\x5b\x89\xdf\xc5\xee\x88\x1f\x1a\x66\x7a\x7f\x21\x76\xc3\xbc\xe5\x72\x09\xfb\x63\xff\xb5\xcb\x60\x4c\x1d\x28\x16\x1a\xc9\x97\x47\x2d\x36\x9e\x69\x24\xff\x51\x8e\xdf\xcf\x07\x44\xfe\x8a\x74\x40\x72\x23\xd9\xc0\x41\x72\x30\xfe\x31\xd4\x47\x18\x8f\x44\xfc\x80\x71\x18\xe3\x7f\x08\xc9\xca\xfb\x7c\x8d\x90\xef\xf7\xb5\xff\x21\xa4\xc3\x9e\x4b\x5e\xc7\x7c\x20\x92\x1d\xd0\x47\x62\x77\xa9\x2f\x45\x63\xc4\x90\x55\x31\x79\xa8\xfe\xe3\x56\x35\xa2\x18\xf0\x36\x8e\x3c\xb2\x6b\x9c\xf9\xf7\xb7\x8d\xe9\x5f\xb1\x6f\x2c\xd8\x6d\x5c\x90\xb3\x5a\xa7\x3a\x62\xad\x6f\x1a\xc2\xbc\xf8\xf9\xa6\x61\x84\x7b\xac\x69\x08\x82\xab\x8d\xac\xcf\x84\x14\xa3\x74\x26\x3e\xd1\x7e\xe6\x8d\xa0\x82\x9a\x69\x8f\x08\x2e\x8a\x61\xa1\x27\xae\xfd\x1b\x5b\x37\x69\x24\xb7\x3a\xf7\x92\xb1\x28\xe0\x11\x72\xa4\xbf\xb6\x1c\x89\x73\x92\xeb\x68\xa2\x05\xcc\x17\x70\x8a\xaf\xd7\xd1\x04\x5d\x73\xce\x18\x88\x22\x7d\x9d\xad\xa6\x48\xdb\x6d\xc4\xbc\xa5\xa1\x37\x47\x13\x8a\x8a\x96\x88\x2f\x48\x64\xc4\xe7\x4c\xe4\x17\x24\x3b\x3f\x9a\x13\xd9\xbd\x20\xdd\xfb\xcc\x1c\xe9\xfe\x85\x07\xa4\x9b\x9f\x06\xa4\x9b\xff\x26\x9a\x28\x09\x8d\x90\xb8\x64\x1e\x79\x42\xaf\x0f\x16\xa0\x55\x89\xe6\x4c\xb4\x40\x32\x2c\x5a\xf3\x1b\x21\x13\x12\x6d\x84\xdd\x36\x1a\xb4\xe8\x90\xe5\xc2\xbf\x0f\x2d\xb7\x2b\x84\x2d\x3f\x8e\x81\x4b\xc2\xb1\x2c\x7c\xa5\x0f\xe1\x8d\xb9\x93\x9c\x82\x68\x1a\x7c\xbf\x8e\x26\x86\x56\x7d\x4a\xf4\xeb\x1e\x80\xf4\x93\x1d\x8a\xd8\x2e\xf4\x47\x90\x32\xed\xed\x8e\x1f\x71\x5b\x44\x65\x7d\x1e\x0e\x10\xa5\xbf\x27\x7e\xa8\xdb\x18\x5f\x9c\xe7\xdd\x1a\x7c\x25\x8e\x26\x6d\xfd\xed\x46\x3d\x05\x47\x5d\x89\x9b\x77\xf3\xfa\xa2\xc7\xbb\x41\xba\xc3\x62\x38\x27\xdd\xbd\xf2\xd8\x71\xb6\x55\x6f\xde\xda\xdc\x96\xb8\x68\x12\x84\xcf\xdc\x0d\x77\x14\x1c\xef\x0a\x1f\x8d\x97\x42\xc7\xb2\x48\x3b\x6a\x42\x93\xf8\x12\xd2\xea\x68\x29\xad\x73\x19\x49\x60\xc3\xa2\xf3\x28\xef\x37\xaa\x9c\x82\xac\x6c\xfa\x14\xb7\x54\xc6\x27\x95\x32\x06\x03\x99\x72\x8f\x42\x21\x59\x37\xce\x5f\x1e\x7e\x3c\x99\xe2\x5c\xb8\xa5\x49\x3b\x37\xb6\x6c\xf3\x05\x50\xaf\x86\xeb\xc3\x1e\x2e\x79\xc2\xf4\x07\x0b\x78\x4c\xea\x8c\x24\x3a\x2c\xe0\x14\x07\x48\x18\xb3\x25\x37\xd2\xae\x65\x00\xea\x3c\x20\xcf\x34\x9c\x0b\xa0\xc3\xa8\x28\xc0\xd6\xc4\xb3\x12\x5a\x34\x19\xf9\x2a\x4a\x3e\xab\x1b\x10\x57\x59\xb5\x29\xc5\x14\x74\x6d\xf1\x6c\xb0\xd5\x39\x55\xe7\x52\x5d\x08\xb0\xaa\x12\xe9\x59\xfd\x29\xa5\x55\xbe\x27\xa7\xc5\x75\x62\x7a\x4a\x9f\x67\x8d\x59\x67\x65\xdc\xed\x6f\xf2\x84\x18\x02\x84\x8c\x4c\x7b\x6d\xd3\x22\xf0\x06\x6f\xbc\xf3\x62\xca\x1f\x28\xdb\x75\xc7\x6f\xde\x2c\x7f\x85\xd3\xd3\x7d\x0f\xa2\xb9\xed\x6e\x83\x6b\x71\xe7\x6a\x12\x78\x21\xc3\xd5\x44\x13\x9c\xde\xee\x36\xe9\xef\x4a\x17\x71\x82\xc2\x9e\xfb\x19\x86\xea\x3f\xff\xd0\xe8\xd9\xb6\x5a\x6a\x1e\x7e\x1c\xd0\x5e\x6c\x2d\x13\xbf\xf7\x44\xa4\x3c\x4e\xd2\x57\x94\xa6\x79\xcc\x2f\xbe\xa5\xe1\xca\x0e\x3a\x86\xb8\xda\x88\xdc\xb2\x5f\xc4\x08\x75\x9c\xc0\x43\x93\x90\x7b\x6c\xb7\xaa\xe8\x6f\xe2\xc9\x74\x6f\x7a\xb4\xe9\x26\xcc\x59\x46\x4e\x51\x4d\x97\xb8\xb8\xd4\xed\x27\x2e\x3e\x39\x51\xe2\xe2\xc7\xb1\xc4\x45\xc2\xb1\x2a\xae\xf0\xd8\x50\x88\xab\x7e\x61\xe0\xa9\xaf\x5b\xdd\xa7\x44\x40\x83\xa9\x40\xba\x78\x57\xc5\x15\xf5\x57\x94\x62\xb8\x16\xce\xdb\x01\x7e\x1f\x26\x1f\x1c\xe9\x52\x4f\x18\xd1\x38\xd2\x8b\xe7\x1b\x67\xa9\x73\x3e\x77\x77\xc0\x6e\x4e\x2e\x1e\xdc\x45\xb4\x2d\x3a\x3e\xd5\x90\xc1\x7f\x5e\xbd\x38\x43\x61\xea\x20\x5c\x84\x14\x82\x23\x84\x58\x70\x02\x27\x5c\x9f\x7f\xc0\xad\xe2\x3f\x0e\xa1\x9e\xd2\xd8\x78\xdd\xd8\x98\x38\x4d\x09\xc4\xe7\xf0\xf6\xdd\xf9\xce\x0a\x0e\x96\x20\xcb\x53\x92\x67\x59\xc4\x8c\x2f\x2b\xe6\xfe\xdc\xcd\xaf\x71\x12\x56\x50\xa5\xf9\x16\x2a\x1e\xf8\x38\x8b\x24\x09\x25\x11\x12\xe1\x48\x72\xd1\x69\x52\xdc\x73\x3a\x30\x7b\x56\x0e\xcc\x07\x9f\x4f\x5d\xce\xa8\x87\x1f\xe7\xf0\xf0\x12\x33\x15\xd7\x1e\x14\x4f\x46\xd5\xf0\x8e\x7e\x7b\x3d\xdc\x58\xb5\xba\x32\x29\xc8\xa9\xbc\xa2\x76\x21\xdf\x42\x17\x86\x1f\x26\x37\x4a\x27\x99\x5e\x09\xea\x9b\x0c\x67\x30\x76\x66\x58\x40\xb6\xd9\x08\x5d\xc4\x8e\x30\xed\xba\xa8\x20\x4a\xe2\x24\x71\x30\xb9\xfb\x9e\xd0\x00\x77\x3d\x74\x9f\x26\x60\xe8\xb6\x46\xb8\x35\x38\x33\xfc\xe5\x54\x60\xc8\xd2\x2f\x32\x0c\xfd\x51\x6b\x06\x9b\x4e\x17\x57\xf7\xef\x5b\x7c\xe3\xf5\xed\xf5\x38\xc1\x5e\x15\x33\x89\xcb\x2c\x6f\x74\xd5\xcb\x2d\x9c\x20\x0c\xd7\x4f\x75\x29\x34\x9c\x6f\xa5\x14\x0d\x50\x4a\x71\xd9\xd5\x5f\x9e\x51\x9a\x18\xcc\x10\x9f\x6f\xa5\xcb\x09\xd8\xfe\x31\x71\x7a\x28\x33\xf4\x60\xa0\x15\xb6\xd3\xe1\x44\x53\x30\xc7\x81\x10\x4d\x13\x3a\x84\xec\xdc\xc1\xb8\xec\x4b\x22\x9d\x0e\x99\xba\xa2\x63\xe2\xfd\x99\xf7\xa7\x1e\x94\x9f\xb0\xfa\xb4\x59\x87\x9e\x8c\xbb\x9f\xb3\xb5\x43\xc7\x9d\x48\xc2\x74\xe9\x00\x8b\x0d\x38\x58\x12\x18\xa6\xae\x61\x7e\x25\xd8\x70\x6d\x34\x7b\x2f\xbe\x7a\x19\xef\x48\x74\x85\x10\xa9\x29\x54\x41\xc8\xf0\x92\x91\xd7\x1d\xd5\xc2\xf9\x5d\xaa\xab\xae\x92\x0e\xc0\x11\xac\x5a\x98\x48\xc1\x87\xde\x1e\xc8\x6e\x07\x26\x58\xba\xdd\xec\xdd\x99\xa1\x1f\x7d\xc8\x36\xa2\xa8\xaf\x89\x54\x61\xa7\xd5\xde\xac\x2c\xe0\xd4\x3f\x33\x3f\x05\xb7\xab\xcf\x1f\xa6\x44\x72\x77\xb3\x44\xb4\x0d\x57\xde\x49\x70\xf1\x3a\x07\x35\xed\x26\xf7\xae\x13\x24\x0f\x57\xca\xc1\x48\xd7\x94\x1c\x4c\xd9\xb7\x03\xec\x50\x22\xfe\xaa\x4c\x4c\xb3\x1e\xcb\xc5\xb7\x5e\xdb\xc1\x0c\x7b\x97\x14\x4b\x0a\xf8\xca\x3f\x5c\x24\xa7\xd9\x5b\xfa\x5b\xb7\x3a\x9a\xd0\xaf\x8d\xbf\x35\x04\x2b\xfb\x8d\xd5\x7d\x43\x4f\xd9\x6b\x4e\xfb\xa9\xc1\xb9\x10\xe7\x06\x3e\x0c\x7d\x45\x6e\xe8\xf5\x1b\x07\x93\xc3\xe1\xe8\xbd\x75\x7a\x18\x8f\xde\x2f\x0b\xde\x2f\xd9\xb4\x43\x81\xeb\xb1\x25\x9e\xcf\xc5\xdf\x1e\xe6\xa3\xd8\x85\x65\xfb\x20\x74\x87\xdc\xf0\x96\xc0\x8d\xb9\xe1\x97\x7a\x61\xeb\x84\xec\x58\xad\x03\xca\xac\xe4\xeb\xa1\x9b\x2f\x36\xb9\xd7\x42\x1c\xb4\xd9\x7d\x3f\x0b\x8d\xee\xf7\x1e\x5f\x60\xb5\x49\xdd\x07\xba\x05\xf0\x74\x8e\x77\x7c\x99\x12\xf8\x1e\x28\x81\xae\xfa\x76\xeb\x51\x12\x1e\xb4\x27\x67\x3c\x7d\x3e\xe0\xcb\x07\x3c\x96\x8a\x46\xe5\xee\x9c\x19\x4c\x8c\x2b\xd0\x53\xa8\x2f\xb8\xa4\x87\x87\xee\x34\x96\x65\x9d\xd9\x9f\x7e\x64\x2b\x1e\xd4\x17\xa1\x70\xd8\x38\x6d\x35\x1f\x50\xc5\xe0\x20\xca\x07\xd6\xf6\x0e\x63\xce\x97\x18\xe1\x1d\x86\xf9\xa4\x6c\xbe\x06\xcb\xda\xdb\xe3\xfc\x13\xd4\x94\x67\x46\x80\x85\x7f\x87\x27\xfb\xa5\xb6\xff\x87\x27\x7b\x0b\xff\x1a\x90\x7f\xfa\x71\x8e\x99\x6c\x78\x6d\xc0\x37\x23\x3a\x19\x9f\xee\x8d\x1a\x9f\xef\x8d\x3a\x38\xe1\xb6\x9b\x71\x2c\x61\x75\x19\x03\x3e\x35\xd9\xc6\x84\x9f\x48\x1d\x3d\xd3\x05\xf7\x0b\x9e\x50\x09\xbb\xae\x0b\xf8\xa4\xec\x1a\x1a\x91\xd7\x97\xdc\x24\x0a\x6d\xb6\x8d\x00\x5d\xc3\x26\xd3\x2a\x37\xa0\x34\xb8\x8e\x4e\xe9\x95\x4b\x73\x41\x86\x92\x45\xf0\x71\x09\x1c\x31\x81\xb7\xef\xba\x2f\x99\x37\x09\xc4\x2e\x19\x05\xe4\xe1\x89\xb3\x10\xd8\xa6\xba\x6b\x06\xd7\xf4\x5d\xf2\x95\x09\x2d\x0e\xfb\xbd\xcb\x5e\x72\xa2\xdb\x9b\x9e\x4b\x3c\x7c\xed\xad\xe3\xc5\xbb\x96\x5a\x16\x53\xb8\xa4\xf6\x44\xfa\xc4\x44\x5e\x48\xf9\x3f\x4e\x5a\x40\x65\x91\x7a\x03\xa6\x03\x74\xb9\x98\xef\x81\xcb\xe4\xbb\x42\x19\x9e\x15\x43\x34\x99\xee\xc1\xa4\x9b\x6e\xc4\x92\xbb\x8c\x8e\x78\x1f\x48\xf6\xec\xeb\x81\xc9\x40\x0a\xd7\xdc\x8c\xe2\x18\x0a\xef\x43\xe9\xfb\x8e\x3d\x30\xfd\xc0\x5d\xe1\xec\x9f\x5c\x43\x40\xfd\x88\x87\x94\xef\x88\x10\x53\xd5\xfe\x33\x44\x4b\xbf\x47\x58\xbd\xa5\x23\xc0\xaa\xb6\x2b\x3b\x06\x6d\x6b\xc8\x10\x5c\x3e\xd1\xec\x41\xcb\xe4\xbb\x02\x7b\xec\xa4\x13\xf3\x61\x84\xf1\x7b\xde\x9d\x76\xee\x05\x3f\x36\x67\x04\x3d\x5e\xc4\x71\xec\xd8\x8a\x3d\xe4\xb8\xd8\xef\x21\xc7\xe4\xbb\x22\xd7\xeb\x65\x02\x87\x64\xba\x77\x47\x7c\x23\x6f\xe4\x26\xa4\x23\xde\x23\x94\x6c\xdf\x08\x94\x6b\xd7\xfc\x1c\x83\xd2\x2d\x7f\x08\xa5\x6b\x2d\xf6\xb0\x74\xf4\xbb\x82\x79\xb4\x4b\x8a\x5d\x3b\x83\xe4\x97\x41\xa3\x74\x2f\xe0\x39\x83\x46\xd0\xdb\xf8\xee\xea\x18\x7c\xce\x90\x0e\x3f\x32\xb1\xbd\x47\xb5\xbd\xaf\x05\x49\xef\x8d\x8e\x0d\x75\x03\xd6\x7f\x2d\x58\x74\x5f\x0b\x5e\xda\x86\x3f\x39\xc0\x02\x6c\xfa\xb4\x14\x55\xdc\xeb\x1b\x6c\x74\x13\xfd\x2f\x00\x00\xff\xff\x60\x05\x27\x40\xd4\x28\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 10452, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
