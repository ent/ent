// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\xde\xfd\x14\x53\x03\x0d\xb4\xc1\x56\xee\x15\x45\x71\xb7\xb9\x3d\xa0\x68\x53\xd4\xd7\x8b\x1b\x34\x49\x5f\x0c\xc3\xa5\xa5\x91\xcd\x58\xa2\xb6\x24\xd7\xb1\xeb\xfa\xbb\x1f\x38\x43\x4a\x94\x56\xda\xdd\xf8\x4f\x5e\xb2\x1a\xce\x0c\x67\x7e\x9a\x7f\xa4\x7c\x78\x08\x3f\xd4\xab\x5b\x2d\x2f\x2e\x2d\x7c\xf3\xf5\x3f\xfe\xf5\xd5\x4a\xa3\x41\x65\xe1\x27\x91\xe1\x79\x5d\x5f\xc1\x91\xca\x52\xf8\xbe\x2c\x81\x98\x0c\xb8\x75\x7d\x8d\x79\x3a\x3d\x3c\x84\xf7\x97\xd2\x80\xa9\xd7\x3a\x43\xc8\xea\x1c\x41\x1a\x28\x65\x86\xca\x60\x0e\x6b\x95\xa3\x06\x7b\x89\xf0\xfd\x4a\x64\x97\x08\xdf\xa4\x5f\x87\x55\x28\xea\xb5\xca\x9d\x0a\xa9\x88\xe5\x7f\x47\x3f\xbc\x3e\x7e\xf7\x1a\x0a\x59\x62\xa0\xe9\xba\xb6\x90\x4b\x8d\x99\xad\xf5\x2d\xd4\x05\xd8\x68\x3f\xab\x11\xd3\xe9\x74\x25\xb2\x2b\x71\x81\x50\xd6\x22\x9f\x4e\x65\xb5\xaa\xb5\x85\x64\x3a\x39\x40\x95\xd5\xb9\x54\x17\x87\x1f\x4d\xad\x0e\xa6\x93\x83\xa2\xb2\xee\x3f\x8d\x45\x89\x99\x3d\x98\x4e\x27\x07\x17\xd2\x5e\xae\xcf\xd3\xac\xae\x0e\x0b\xef\xf0\x21\x2a\x62\x1b\x59\x3a\x34\xd9\x25\x56\x62\x37\xc7\x21\xe6\x17\xb8\x07\x5b\x21\xb1\xcc\xf7\xe0\x93\x2a\xc7\x9b\x83\xe9\x6c\xea\x40\x7b\x47\x34\xd0\xe8\x5f\x97\x01\xa1\x00\x95\x4d\xfd\x82\xbd\x14\x16\x3e\x09\x43\xa8\x60\x0e\x85\xae\x2b\x10\x90\xd5\xd5\xaa\x94\xee\xd5\x18\xd4\xe0\x91\x4b\xa7\xf6\x76\x85\x41\xa5\xb1\x7a\x9d\x59\xb8\x9b\x4e\x8e\x45\x85\xe0\xff\x19\xab\xa5\xba\x80\xfe\xbf\x3f\x1c\xb4\x8b\x03\x25\x2a\x9c\xd7\x95\xb4\x58\xad\xec\xed\xc1\x1f\xd3\xc9\x0f\xb5\x2a\xa4\xe7\x77\x66\xc5\xcf\x5d\xd9\x8c\x56\xba\xd2\xaf\xf3\x0b\x34\x9e\xed\xe4\xf4\xa5\x7b\x1c\xd9\xd9\x61\x6c\xba\xc2\x3f\x39\x3c\x4d\x23\x4c\x8f\xc3\xc2\x84\x7c\x4f\xfa\xc8\xa1\xec\x37\x3f\x39\x7d\x49\x8f\xc3\xd2\x92\x39\xbb\xe2\x3f\xd7\xf5\x55\x64\xf9\xdb\xda\x48\x2b\x6b\x35\x20\x7e\xe9\x38\xbb\xc2\x6f\xeb\x52\x66\xb7\xfb\x08\xaf\x88\xb3\x2b\xfd\xbd\x52\xb5\x15\x4e\xc0\x40\x25\x56\x27\xfc\xca\x4e\xa5\xb2\xa8\x5d\x3c\xdd\xdd\x07\x69\xd1\x72\x76\x54\xdc\x53\x68\x35\xdb\xe6\x68\x32\x2d\xcf\xd1\x80\x80\x55\x20\xfa\xcc\xe4\x98\xf4\x91\xd3\x48\xb4\xb1\x13\xe1\x26\x95\x05\x38\x3c\x04\x26\x79\x79\x82\xfe\xd0\x61\x00\xa5\x34\x36\x9d\x4e\xde\xc8\x1b\xcc\x8f\xc8\xd9\xf3\xba\x2e\xbd\x84\xcc\x84\x45\x03\xb2\x88\x76\x85\xfa\xfc\x23\x66\x1c\xde\x95\x93\xfa\x4a\x2a\x56\x20\x55\xd8\x84\xb7\x24\x12\xc8\x78\xe3\x8a\x48\xbc\x27\xfb\xcb\x01\xb2\x99\x49\x4c\x7f\x40\x22\xb1\xe0\x70\x1e\x8d\x66\xd2\x78\x2a\x1d\xa9\xa2\x6e\xd9\x5e\x12\x72\xe9\xfb\xdb\x15\x76\x16\xbc\xb8\x33\xa0\x2b\xfe\x5e\xc4\x9b\xed\xd8\xdd\x8a\x5e\x26\xbe\x93\x7f\x45\xb6\xbf\x94\xca\x7e\xf7\xed\xa8\xb4\x91\x7f\xf5\x36\x7f\xad\xd6\x95\x69\xd8\x4e\x4e\x19\x94\x3b\x38\x9e\xc3\xef\xc1\x96\x26\x2c\xd1\x31\x77\xe5\x3f\x28\xf9\xe7\xba\x31\x80\xe2\x62\xe0\x9f\x97\x5f\x13\x73\x57\xc1\xb1\x2c\x4b\x71\x5e\xe2\x5e\x0a\x94\x67\xee\xaa\xf8\x75\xe5\x62\x5b\x94\x7b\xa9\xa8\x3d\x73\x57\xc5\x8f\x58\x88\x75\x69\xf7\x73\x23\x67\xe6\x41\x0d\xbf\x8b\xd2\xc1\x11\xe7\xf4\xb8\x86\xb3\x6b\xc7\x3d\xa8\xe7\x17\xa9\x5c\x4d\xf4\x9d\x30\xf5\x8f\x63\x7a\xae\xa4\xca\x7b\xef\x65\x95\x0b\x8b\xc1\xad\x5d\xef\x85\x98\xcf\x06\xfd\x3a\xaa\xaa\xb5\x6d\x5e\xd0\x0e\x45\x32\x30\x77\x75\xfc\x2e\x4a\x99\x0b\x5b\x6b\x8a\x34\xca\xfd\x71\x1d\xd7\x0d\x73\x2f\xd0\x6d\xad\xc5\x05\xfe\x82\x54\x7f\x77\xa4\x89\x61\xe6\xb3\x2b\xbc\xed\x57\xf0\xb8\x64\x0f\x56\xf0\xb8\x88\xf3\x6a\xcf\x10\x54\x8e\x7c\xbd\x17\x22\x26\x30\xf7\x74\x50\x9d\x74\x35\xc2\xf1\x46\xcd\xa0\xe3\x57\xd0\x41\xcc\x67\x9b\x95\x23\x6e\x28\x30\xd6\x52\xf6\xeb\x29\xd4\xc1\x37\x4b\x2c\x91\x1f\x50\x61\x49\xee\x69\x06\x95\x00\xd2\x6e\xd9\xed\xa5\x75\x87\x6c\xbf\xae\xfe\x86\x45\x63\xf5\x76\x51\x8d\xc5\xd9\xa6\xd9\xbf\x61\xd1\x30\x0e\xce\x47\xb1\xfc\x78\x4d\x1d\x09\xaf\x2d\x05\xf5\x48\x5d\xa3\x36\x5b\x83\xb3\x99\x8f\x88\xb3\x6f\xf7\x9f\x6b\xa9\x31\xdf\x2d\xae\x3d\xe7\x78\x9a\xbe\x74\xc3\x5f\xda\x4d\xdc\x3d\x72\xf4\xa9\xe6\x24\x1e\x35\x36\x83\x9a\xe9\x0f\x88\x6a\x16\x6c\xc3\x3a\x7a\x51\x0d\x54\x5b\xde\x4c\x34\x34\x9f\x84\x44\xdf\x6b\x4a\xee\x73\x0f\x8d\xc5\x11\xca\x4d\xb8\xee\x00\x9a\x51\x3a\xc6\x4f\x14\x9e\x99\x46\x9a\xe4\x84\x0a\x88\x38\xa3\x18\x16\xfa\xc5\xd3\xe6\xca\xd6\x3a\x9d\x16\x6b\x95\x05\xc9\x04\x73\xff\xa6\x7f\x6c\x38\x66\x3e\xe6\xef\xa6\x13\x85\xb0\x58\xc2\x0b\xf7\x78\x37\x9d\xb8\x94\x5c\x34\x91\x84\x79\xfa\x5e\x5c\xcc\x1d\xf9\x76\x85\x8b\x98\xec\x72\x79\x3a\xa1\xca\x11\xd3\xdd\xb3\xa3\x33\xf4\x8b\x86\xce\xcf\x6e\xc5\xc7\xff\x22\xac\xf8\x67\xb7\x14\x62\x7b\xe1\x97\xc2\x33\xaf\x15\xed\x5e\xb4\x56\x84\xbd\x5a\x68\x17\xb4\xd4\x3e\xbb\xd5\x28\x5a\x17\x50\x89\x2b\x4c\x86\x63\x76\x36\x9f\x4e\xee\xa7\x93\xa2\xd6\x70\x36\x07\x61\x1d\x2a\x5a\xa8\x0b\x74\x2a\xe3\x90\x77\x28\x29\x4c\x45\x9e\xb7\xd4\x44\xd8\x19\x89\xcb\xc2\xcd\x04\x4e\x96\x6d\x7c\x45\x8f\x5f\x2c\x41\xc9\x32\x48\xba\xd2\xb3\x6c\xde\x8e\xc6\x62\xc6\xf4\x28\x44\x96\xc0\x7c\x11\x8d\xd4\x6b\xb4\x6b\xad\x40\x61\x1b\x1c\x3c\x2c\x6f\x46\x07\x05\x21\x87\x07\xff\x1c\x8a\x0f\x12\x4e\x8a\x3c\x4c\xc5\x71\x84\x24\x7c\xf2\x9b\x03\x6a\xed\x9e\xef\xc8\xbb\x22\x4f\x5f\x6b\x1d\x7b\x14\x6c\x92\xe5\x1c\x8a\xca\xba\xe5\x5a\x17\x09\x67\x01\x7c\xf9\xe7\x02\xbe\xbc\x3e\x98\x3b\x41\x7a\x61\x5e\x03\xc3\x65\x08\xaa\x17\xb4\xd1\x5d\x3f\x9c\xa0\x91\xa1\xb0\x29\xea\xee\x8a\xa3\xcc\xfb\x11\x4b\x2b\x3e\x66\x69\x76\x5e\xc4\x0b\x44\xd9\x08\x4f\x5a\x6a\x03\x34\x4c\xbc\x8b\xd6\x86\x30\xd6\x4e\x27\xcd\x30\xdb\xae\x06\x8a\x5b\xf5\x03\xdd\xa2\xd5\x1b\x46\x3c\x06\x8c\xf6\x8e\x47\xbf\x05\xed\xdd\x19\x06\x5b\xce\x66\xb6\x5b\x34\x3e\x37\x03\x5c\x3f\xee\x69\xb9\x1b\xf9\xed\x58\x47\xeb\x25\xaa\xa4\xc8\xd3\x96\x3a\x23\x25\x61\x00\x6a\xf6\x68\x28\xb4\xdc\x0c\x42\xcd\x1e\x0d\x65\x23\xbb\xe0\x61\xf9\x55\x6c\xe6\x97\x29\xc6\xf3\xcb\x14\xf4\xea\x61\xb9\x3b\x04\x2b\x69\x8c\x2b\xb5\xd4\x1d\xa4\x13\x72\xdb\x87\xc0\x3c\x98\x3b\x5d\x2e\xc0\x5a\xdd\xee\xb4\xb6\x58\x02\x1d\xd3\x1c\x5a\xee\xf8\x36\x7b\xc5\xf4\x2f\x96\xf0\x75\xb0\x8e\x8e\x75\x4b\x78\xe1\x16\x22\xc3\xc2\x3b\xf4\x5c\xf1\x61\x61\xd9\x1c\x16\x1c\x76\xbf\x16\x49\x1b\x1c\x33\x3a\x3f\x24\x6c\x85\x6b\x8c\x7c\x58\xf7\xf3\x3e\xd0\x29\x04\x32\xa1\xe0\x1c\x81\xee\xe4\x30\x07\x5b\x13\xcf\x05\x2a\xd4\x82\x72\xda\x49\xfe\x54\x6b\xc0\x1b\x51\xad\x4a\x9c\x83\xaa\x2d\x08\x70\xa9\x4e\x23\x74\x29\xaf\x10\xac\xac\x30\x3d\xae\x3f\xa5\x64\xf1\x19\x25\xb7\x73\xd8\x75\xa2\xf4\x8d\xd0\xe6\x52\x94\xb1\x65\xaf\x88\x21\x82\xba\xf5\x8a\x8f\x52\xcb\x28\xc8\xe3\x12\x65\x8a\xb9\x93\x69\xeb\x14\x37\xe7\xcd\x3a\xc5\x97\x0b\x54\xa7\xf8\xe7\x50\x9d\x22\xe1\x44\xe6\x37\xee\x04\x9d\xe3\x4d\xb7\x95\xb1\xea\xbb\x66\xef\x17\x44\x70\xd6\x52\x4b\xf7\xd9\x28\xf3\x1b\x9a\x97\xa9\x00\x70\xf7\x5e\x34\x0b\xfc\xdc\x2f\x0d\x6e\xa5\x2d\x0c\x71\xbe\xb9\x95\x4e\xb6\xdd\x7b\x4f\x3d\x86\xfe\x2e\x90\xdf\x16\xbd\xa9\xe8\x6e\xb1\xc9\x0a\xf7\xab\x06\x01\xff\x7d\xf7\xeb\xb1\x13\xa6\x99\xc7\xbf\xe8\x1c\xf9\x45\x13\x8b\x53\xf0\xae\x73\x77\xc3\xff\x79\x84\x3a\x9b\x26\x26\xec\xed\x46\x29\xbf\xd3\x0c\x92\x73\x38\x39\x3d\xbf\xb5\xc8\xef\xbc\x2d\xea\x86\x4a\x30\xcb\x3a\xcc\xf8\xa6\xd1\x83\xe6\xaf\xa9\x98\x96\xcc\x36\x5a\xbe\x54\x7c\xbb\x9c\xf4\x82\x9b\xe5\x66\x33\x4a\x2f\x96\xfb\xcc\x46\x2c\x8b\x10\x9b\x26\x75\xa1\x42\x57\x51\x41\x2f\x87\xe5\x1e\x4d\xc8\x63\xd1\x74\x21\xe3\x9b\x10\x86\x0e\xd4\x5e\x05\x47\xc3\x2a\xd4\xd7\xa8\xb5\xcc\xb1\xb9\x1e\x8b\x57\xd3\xc1\x2a\xe6\x91\x8a\xbc\x4c\x66\x9c\x31\xe3\xa5\xac\xe3\x20\x87\xe0\xd3\x7b\xc8\xb3\x6b\xb3\x97\x28\x90\xb2\x20\x6c\xd4\x18\xf2\x14\x7b\x79\x5c\x30\x1e\x9e\xdc\x50\xcd\x38\xf0\x80\xbd\x04\xb1\x5a\xa1\xca\x13\x4f\x98\xb7\x83\x6a\x94\xd6\xc9\x6c\xe6\x61\xf2\xb7\xc4\xb1\x03\xfe\x8e\xf9\x39\x5d\x70\xb5\xa6\x71\xc2\xdb\xe0\xdd\x08\x37\xdc\x91\x23\x47\xc1\xc8\xb8\x56\x0d\x7a\xd3\x7b\xe9\x74\xdd\xfd\xf4\xef\xbc\xbf\x0d\x5f\x8c\x3f\xfd\x3e\x5e\xb0\xd3\x3d\xcc\xcc\x97\xc2\x0f\xaa\xea\x14\x43\xae\x68\x86\xfb\x96\xbc\x46\x05\xe7\xeb\xa2\x40\x0d\x54\x03\x7d\x3b\x08\xf7\xe2\x54\xd7\x7a\x1a\x92\xf3\x75\xe1\x8b\x98\x1b\x4f\x99\x38\x1f\x2b\x65\x1d\x18\xc8\xc2\x46\x9d\x53\x34\x07\xb3\x1d\x08\xd4\x3a\x0e\x88\x22\x4a\x75\xdf\x2e\x48\xa4\xdd\xa3\x48\x7d\xc7\x36\xc9\xa6\xe6\x4d\xd5\x4e\x77\xd4\x2f\xe3\x76\xd9\xd4\x3b\xfa\x65\xfc\x9d\xbb\xad\xc3\xfd\x3d\x1f\xfa\xe2\xfa\xee\x01\x4b\x0c\x78\x58\x66\xd0\x2f\x9a\xfd\x86\x40\xb0\x39\xdb\x48\x7b\x27\xbf\x3a\xb5\x76\x4b\x76\xc5\x10\xc9\x39\x54\x51\xca\xb0\xc9\x74\xe2\x11\x95\x9f\xa9\x86\x5b\x45\x75\xd3\xb4\x89\xe9\x64\xe2\xcf\xce\xb1\x35\xbe\x30\x56\x37\xb3\x16\xee\x01\x64\xbb\x83\x9f\xdb\xbd\x89\x5b\x15\x45\xad\xb3\x97\x0c\xfe\xd8\x79\xa7\x45\xfb\x46\x27\x6e\x76\xf1\xfb\xb7\x67\xa4\x6e\x36\x3b\xb6\x01\x53\x3e\xd7\x16\x32\xc6\xcd\x54\xcd\x45\xe7\x12\x5e\x84\xdf\xac\x91\xca\x89\xef\xb7\x1f\xe7\x44\xf2\x5f\x7a\x88\x68\x35\x0f\x27\x93\xe8\xf3\xcd\x02\xe4\xbc\x55\x1e\x82\x35\x2a\x57\x7e\xda\x01\x53\x04\x40\xc6\x9a\xc4\x53\x83\x3e\xd6\x1c\x1e\xd4\x1d\x48\xeb\xb6\xfe\xf0\x0c\xd6\x8f\xf6\x85\xc7\x34\x06\xda\x80\xbf\x67\xc6\x6e\x70\x73\x78\xf2\xb8\x6f\xed\xa7\x2d\x83\xf5\xfc\xe5\x35\xb2\xfd\x67\x36\xe8\x09\xe3\x31\x98\xe1\xbf\xbe\xc6\xbe\xfa\x0e\xf5\x94\xce\xca\x02\x78\xa3\x8e\x22\x93\xfa\xaf\xc4\x91\xa7\x6f\xbd\x3d\x3d\x57\x3f\xdb\xaf\x81\xb1\xb0\xba\x19\x18\x09\x87\x67\xc2\x6e\x43\xe8\x76\x03\x9f\xc3\xdc\x0e\xf8\x00\xfb\x80\x76\xd0\x19\x31\x47\xfb\xc1\x78\x09\xfe\xec\x8e\x30\x5c\x60\xf7\xab\xaf\xe3\x41\xd0\xb4\xcf\xd1\xca\x19\x5e\x0f\xf1\xec\x2a\x80\x1b\x98\x0f\x62\x17\x4f\x6a\xa3\xd0\x8d\xe5\xf0\x67\x02\x37\x94\xa1\xfb\x26\x68\x93\x9f\x1c\x9b\x4d\x0c\x17\xa2\xe4\x5b\xd6\xfb\xbd\x5d\xee\x4c\x8d\xa3\x3e\x8f\x27\xf3\xfe\x5e\x0f\xa6\xea\x7e\x99\xba\x9f\x3b\xbd\x74\x53\x9b\xc7\x35\xca\xcc\x6c\xad\xf5\x1c\xea\x2b\x9e\x9c\xa3\xc4\x3d\x11\xca\xcf\x28\xa7\x64\xed\x17\xf5\x95\xb7\x71\x98\xc9\xd9\xac\x1a\x3f\x83\x8f\x55\xd0\xed\xf6\x49\x3d\x3e\xe9\x1b\xd4\x17\xa8\x67\xaf\x60\xb7\xce\x8a\x99\x13\xa1\x66\xfe\xca\x81\x3d\x45\xbe\xcf\x7f\x90\x9f\xb8\x8f\x9f\x63\x4c\x8f\xf1\x73\x8b\xce\x31\x3f\x0b\xe0\x4b\xe9\x07\x39\x5a\xec\xe3\xe8\x18\xd3\x63\x1c\xdd\xa2\x73\xb7\xa3\xed\x99\xa2\x4d\x39\x67\x6f\x7b\xd9\xf8\xf7\xdf\xee\xe9\x48\x15\x75\x7a\xbc\xae\x50\xcb\xcc\xb7\x99\x28\x27\x9c\xbd\xaa\x05\x22\xbe\xc2\x4b\x93\xa2\xac\x85\xfd\xee\xdb\x59\x07\x88\x81\x86\xbb\x56\x78\xb3\xc2\xcc\x62\xde\xbb\x9b\xa4\xfb\xd5\xe6\x6a\x75\xc1\x77\xab\xf1\xd5\xaa\xf9\x24\x6d\x76\x09\x96\x77\x27\x53\xdd\xf4\xff\x8a\x5e\x91\x30\x08\x16\xfe\xb3\x84\xf8\x2f\x73\xec\x3f\xe1\xc5\x0b\xb0\xf0\xef\x1e\xf9\xbb\x6f\x17\x84\x68\xef\x12\x92\x2f\x6c\x1d\x88\x43\xea\x3e\xc8\x61\x7d\x1f\xe4\xa8\xc2\x75\xab\x71\xa8\x27\xb7\x4d\x11\x3e\x69\xb1\x32\xf1\xdf\x74\x79\xba\x50\x39\x9f\x82\x02\xa1\x42\x7b\x59\xe7\xf0\x49\xda\x4b\xd0\x98\xd5\xd7\x7c\xf4\x45\x65\xd6\x1a\x41\xd5\xb0\x12\x4a\x66\x06\xa4\x02\x7f\x4e\x95\xea\xc2\x77\xf2\xa8\x09\x17\x79\xf4\xe7\x2b\xe0\x89\x33\x38\x39\x6d\xff\xe6\xea\x7e\x06\x89\xef\xb7\x11\xb9\x7f\xf1\x97\xa3\x3b\x7c\x3b\xf5\x3e\x5e\x64\x01\xd7\xd4\x7a\xd8\x38\x77\x8a\xbd\xee\xf4\x5f\xba\x0b\xee\x84\xc4\x97\xef\x83\x77\x6c\x7c\xf3\xb1\x67\x0e\xd7\x74\xc0\x29\x42\xef\xa5\x28\xa4\x11\xc7\x9d\xf3\x42\x74\xe5\x69\x70\x60\xde\x43\x97\x8f\x03\x1b\xe0\x32\xf9\xb1\x50\xc6\x37\x60\x31\x9a\x4c\x0f\x60\xd2\x27\x52\x87\x25\x9f\x53\x5a\xe2\x73\x20\xd9\xf1\xaf\x03\x26\x03\x89\xfe\x78\x34\x88\x63\x2c\xbc\x09\x65\x38\x97\x6c\x80\x19\x16\x1e\x0b\x67\xf7\x3e\x2e\x06\x34\xac\x04\x48\xf9\xaa\xde\x61\x1a\xce\x4e\x11\xfd\x19\x61\x0d\x9e\x0e\x00\x2b\x9b\x53\xdb\x36\x68\x1b\x47\xfa\xe0\xf2\x3d\xcd\x06\xb4\x4c\x7e\x2c\xb0\xdb\xee\x6f\x12\x3e\xff\x30\x7e\x6f\xda\x3b\x9c\x67\xc1\x8f\xdd\x19\x40\x8f\x8d\xd8\x8e\x1d\x7b\xb1\x81\x1c\xcf\xb3\x1b\xc8\x31\xf9\xb1\xc8\x75\xc6\xf5\x28\x20\x99\x1e\xc2\xd1\x3d\x51\x34\xf2\x9c\xdd\x12\x9f\x11\x4a\xf6\x6f\x00\xca\x4b\x3f\xdf\x6f\x83\xd2\x9b\xdf\x87\xd2\x0f\xca\x1b\x58\x7a\xfa\x63\xc1\xec\x1e\x04\x22\x34\xfd\xc2\x8c\x62\xd3\x6f\xe6\xe0\xf4\xc3\x7c\x4b\x7d\x46\x3c\xfd\xb6\x03\x80\xae\xc2\xf1\x61\x1b\xa2\xc1\x85\x79\xe7\xec\xd0\x5c\x56\xda\xce\x67\xdb\x59\xe7\x89\x0e\xcb\xb5\x06\xeb\xbf\xdf\xc2\xb2\xfd\xc8\xfb\xd6\xd2\xa4\x36\xb1\xb0\x04\x9b\xbe\x2e\xb1\x4a\x3a\xa3\x84\x9d\xde\x4f\xff\x1f\x00\x00\xff\xff\xa6\x55\xc8\xfc\x3c\x32\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12860, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
