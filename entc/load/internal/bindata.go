// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xe3\x36\x12\x7f\xb6\x3f\xc5\x34\x40\x17\xd6\xc2\x55\x7a\x45\x51\xdc\x79\xcf\x07\x14\xed\x16\xcd\xf5\x36\x5d\x74\x77\xfb\x12\x04\xa9\x22\x0d\x13\x6e\x24\xca\x25\xe9\x6c\xd2\x34\xdf\xfd\xc0\x19\x52\xa2\x64\xc9\xf6\xe6\xdf\x4b\xac\x21\x67\x38\xf3\xd3\xfc\xe3\xd8\x87\x87\xf0\x43\xbd\xba\xd5\xf2\xe2\xd2\xc2\x37\x5f\xff\xe3\x5f\x5f\xad\x34\x1a\x54\x16\x7e\xca\x72\x3c\xaf\xeb\x2b\x38\x52\x79\x0a\xdf\x97\x25\xd0\x26\x03\x6e\x5d\x5f\x63\x91\x4e\x0f\x0f\xe1\xfd\xa5\x34\x60\xea\xb5\xce\x11\xf2\xba\x40\x90\x06\x4a\x99\xa3\x32\x58\xc0\x5a\x15\xa8\xc1\x5e\x22\x7c\xbf\xca\xf2\x4b\x84\x6f\xd2\xaf\xc3\x2a\x88\x7a\xad\x0a\x27\x42\x2a\xda\xf2\xbf\xa3\x1f\x5e\x1f\xbf\x7b\x0d\x42\x96\x18\x68\xba\xae\x2d\x14\x52\x63\x6e\x6b\x7d\x0b\xb5\x00\x1b\x9d\x67\x35\x62\x3a\x9d\xae\xb2\xfc\x2a\xbb\x40\x28\xeb\xac\x98\x4e\x65\xb5\xaa\xb5\x85\xd9\x74\x72\x80\x2a\xaf\x0b\xa9\x2e\x0e\x3f\x9a\x5a\x1d\x4c\x27\x07\xa2\xb2\xee\x9f\x46\x51\x62\x6e\x0f\xa6\xd3\xc9\xc1\x85\xb4\x97\xeb\xf3\x34\xaf\xab\x43\xe1\x0d\x3e\x44\x45\xdb\x46\x96\x0e\x4d\x7e\x89\x55\xb6\x7b\xc7\x21\x16\x17\xb8\xc7\x36\x21\xb1\x2c\xf6\xd8\x27\x55\x81\x37\x07\xd3\x64\xea\x40\x7b\x47\x34\xd0\xe8\x5f\x97\x81\x4c\x01\x2a\x9b\xfa\x05\x7b\x99\x59\xf8\x94\x19\x42\x05\x0b\x10\xba\xae\x20\x83\xbc\xae\x56\xa5\x74\xaf\xc6\xa0\x06\x8f\x5c\x3a\xb5\xb7\x2b\x0c\x22\x8d\xd5\xeb\xdc\xc2\xdd\x74\x72\x9c\x55\x08\xfe\xcf\x58\x2d\xd5\x05\xf4\xff\xfe\x70\xd0\x2e\x0e\x54\x56\xe1\xbc\xae\xa4\xc5\x6a\x65\x6f\x0f\xfe\x98\x4e\x7e\xa8\x95\x90\x7e\xbf\x53\x2b\x7e\xee\xf2\xe6\xb4\xd2\xe5\x7e\x5d\x5c\xa0\xf1\xdb\x4e\x4e\x5f\xba\xc7\x91\x93\x1d\xc6\xa6\xcb\xfc\x93\xc3\xd3\x34\xcc\xf4\x38\xcc\x4c\xc8\xf7\xb8\x8f\x1c\xca\xfe\xf0\x93\xd3\x97\xf4\x38\xcc\x2d\x79\x67\x97\xfd\xe7\xba\xbe\x8a\x34\x7f\x5b\x1b\x69\x65\xad\x06\xd8\x2f\xdd\xce\x2e\xf3\xdb\xba\x94\xf9\xed\x3e\xcc\x2b\xda\xd9\xe5\xfe\x5e\xa9\xda\x66\x8e\xc1\x40\x95\xad\x4e\xf8\x95\x9d\x4a\x65\x51\x3b\x7f\xba\xbb\x0f\xdc\x59\xbb\xb3\x23\xe2\x9e\x5c\xab\x39\xb6\x40\x93\x6b\x79\x8e\x06\x32\x58\x05\xa2\x8f\x4c\xf6\x49\xef\x39\x0d\x47\xeb\x3b\x11\x6e\x52\x59\x80\xc3\x43\x60\x92\xe7\x27\xe8\x0f\x1d\x06\x50\x4a\x63\xd3\xe9\xe4\x8d\xbc\xc1\xe2\x88\x8c\x3d\xaf\xeb\xd2\x73\xc8\x3c\xb3\x68\x40\x8a\xe8\x54\xa8\xcf\x3f\x62\xce\xee\x5d\x39\xae\xaf\xa4\x62\x01\x52\x85\x43\xf8\x48\x22\x81\x8c\x0f\xae\x88\xc4\x67\xb2\xbd\xec\x20\x9b\x91\xc4\xf4\x07\x04\x12\x33\x0e\xc7\xd1\x68\x24\x8d\x87\xd2\x91\x12\x75\xbb\xed\x25\x21\x97\xbe\xbf\x5d\x61\x67\xc1\xb3\x3b\x05\xba\xec\xef\xb3\xf8\xb0\x1d\xa7\xdb\xac\x17\x89\xef\xe4\x5f\x91\xee\x2f\xa5\xb2\xdf\x7d\x3b\xca\x6d\xe4\x5f\xbd\xc3\x5f\xab\x75\x65\x9a\x6d\x27\xa7\x0c\xca\x1d\x1c\xcf\xe1\xf7\xa0\x4b\xe3\x96\xe8\x36\x77\xf9\x3f\x28\xf9\xe7\xba\x51\x80\xfc\x62\xe0\xcf\xf3\xaf\x69\x73\x57\xc0\xb1\x2c\xcb\xec\xbc\xc4\xbd\x04\x28\xbf\xb9\x2b\xe2\xd7\x95\xf3\xed\xac\xdc\x4b\x44\xed\x37\x77\x45\xfc\x88\x22\x5b\x97\x76\x3f\x33\x0a\xde\x3c\x28\xe1\xf7\xac\x74\x70\xc4\x31\x3d\x2e\xe1\xec\xda\xed\xee\x01\xba\x2a\x32\x8b\x41\x9f\x5d\x80\xd2\xe6\xb3\x41\x85\x8e\xaa\x6a\x6d\x1b\x64\x77\x08\x92\x61\x73\x57\xc6\xef\x59\x29\x8b\xcc\xd6\x9a\x5c\x84\x82\x76\x5c\xc6\x75\xb3\xb9\xe7\xa1\xb6\xd6\xd9\x05\xfe\x82\x94\x38\x77\xf8\xb7\xe1\xcd\x67\x57\x78\xdb\x4f\xbd\x71\xae\x1d\x4c\xbd\x71\xf6\xe5\xd5\x9e\x22\xa8\x1c\xf9\x7a\x2f\x44\x4c\xd8\xdc\x93\x41\x09\xce\x05\xb7\xdb\x1b\x65\xf1\x8e\x5d\x41\x06\x6d\x3e\xdb\x0c\xf9\xb8\x12\xc0\x58\x2d\xd8\xaf\x18\x50\xe9\xdd\xcc\x8d\x44\x7e\x40\x6a\x24\xbe\xa7\xe9\x30\x02\x48\xbb\x79\xb7\xe7\xc4\x1d\xbc\xfd\x84\xf8\x1b\x8a\x46\xeb\xed\xac\x1a\xc5\xd9\xa6\xda\xbf\xa1\x68\x36\x0e\x36\x36\x31\xff\x78\x32\x1c\x71\xaf\x2d\x99\xf0\x48\x5d\xa3\x36\x5b\x9d\xb3\x69\x6c\x68\x67\x5f\xef\x3f\xd7\x52\x63\xb1\x9b\x5d\xfb\x9d\xe3\x61\xfa\xd2\x75\x6d\x69\x37\x70\xf7\x88\xd1\xa7\x6a\x70\xb8\x47\xd8\x74\x6a\xa6\x3f\xc0\xab\x99\xb1\x75\xeb\xe8\x45\x35\x50\x6d\x79\x33\x51\xb7\x7b\x12\x02\x7d\xaf\xf6\xb6\xbf\x7b\xa8\x9f\x8d\x50\x6e\xdc\x75\x07\xd0\x8c\xd2\x31\x7e\x22\xf7\xcc\x35\x52\x0b\x96\xa9\x80\x88\x53\x8a\x61\xa1\x4f\xdc\x26\xae\x6c\xad\xd3\xa9\x58\xab\x3c\x70\xce\xb0\xf0\x6f\xfa\xc7\x66\x47\xe2\x7d\xfe\x6e\x3a\x51\x08\x8b\x25\xbc\x70\x8f\x77\xd3\x89\x0b\xc9\x45\xe3\x49\x58\xa4\xef\xb3\x8b\xb9\x23\xdf\xae\x70\x11\x93\x5d\x2c\x4f\x27\x94\x39\x62\xba\x7b\x76\x74\x86\x7e\xd1\xd0\xf9\xd9\xad\x78\xff\x5f\x84\x15\xff\xec\x96\x82\x6f\x2f\xfc\x52\x78\xe6\x35\xd1\x9e\x45\x6b\x22\x9c\xd5\x42\xbb\xa0\xa5\xf6\xd9\xad\x46\xde\xba\x80\x2a\xbb\xc2\xd9\xb0\xcf\x26\xf3\xe9\xe4\x7e\x3a\x11\xb5\x86\xb3\x39\x64\xd6\xa1\xa2\x33\x75\x81\x4e\x64\xec\xf2\x0e\x25\x85\x69\x56\x14\x2d\x75\x96\xd9\x84\xd8\xa5\x00\x8d\xc2\xf1\xb2\x8e\xaf\xe8\xf1\x8b\x25\x28\x59\x06\x4e\x97\x7a\x96\xcd\xdb\xd1\x28\x12\xa6\x47\x2e\xb2\x04\xde\x17\xd1\x48\xbc\x46\xbb\xd6\x0a\x14\xb6\xce\xc1\x5d\xee\xa6\x77\x90\x13\xb2\x7b\xf0\xc7\x21\xff\x20\xe6\x99\x28\x42\x3b\x1b\x7b\xc8\x8c\xaf\x6c\x73\x40\xad\xdd\xf3\x1d\x59\x27\x8a\xf4\xb5\xd6\xb1\x45\x41\x27\x59\xce\x41\x54\xd6\x2d\xd7\x5a\xcc\x38\x0a\xe0\xcb\x3f\x17\xf0\xe5\xf5\xc1\xdc\x31\xd2\x0b\xf3\x12\x18\x2e\x43\x50\xbd\xa0\x83\xee\xfa\xee\x04\x0d\x0f\xb9\x8d\xa8\xbb\x2b\x8e\x32\xef\x7b\x2c\xad\x78\x9f\xa5\xa6\x77\x11\x2f\x10\x65\xc3\x3d\x69\xa9\x75\xd0\xd0\xaa\x2e\x5a\x1d\x42\x3f\x3a\x9d\x34\x5d\x68\xbb\x1a\x28\x6e\xd5\x37\x74\x8b\x56\x6e\x68\xf1\x18\x30\x3a\x3b\x6e\xfd\x16\x74\x76\xa7\x19\x6c\x77\x36\xbd\xdd\xa2\xb1\xb9\x69\xe0\xfa\x7e\x4f\xcb\x5d\xcf\x6f\xdb\x3a\x5a\x2f\x51\xcd\x44\x91\xb6\xd4\x84\x84\x84\x06\xa8\x39\xa3\xa1\xd0\x72\xd3\x08\x35\x67\x34\x94\x8d\xe8\x82\x87\xc5\x97\xd8\x8c\x2f\x23\xc6\xe3\xcb\x08\x7a\xf5\xb0\xdc\xed\x82\x95\x34\xc6\xa5\x5a\xaa\x0e\xd2\x31\xb9\xe3\x83\x63\x1e\xcc\x9d\x2c\xe7\x60\xad\x6c\x77\xcd\x5a\x2c\x81\xee\x57\x0e\x2d\x77\xef\x4a\x5e\x31\xfd\x8b\x25\x7c\x1d\xb4\xa3\xfb\xd8\x12\x5e\xb8\x05\x62\x76\xf5\x8c\x2f\xc7\xbe\x4d\x07\xea\xfa\x21\xcf\x14\x9c\x23\xd0\x0c\x0c\x0b\xb0\x35\xed\xb9\x40\x85\x3a\xa3\x50\x74\x9c\x3f\xd5\x1a\xf0\x26\xab\x56\x25\xce\x41\xd5\x16\x32\x70\x11\x4a\x9d\x6f\x29\xaf\x10\xac\xac\x30\x3d\xae\x3f\xa5\xa4\xe5\x19\xc5\xa4\xd3\xd3\x15\x90\xf4\x4d\xa6\xcd\x65\x56\xce\x5a\x6f\x4b\x5e\xd1\x86\x08\x21\x23\xd2\xce\xd5\x65\x19\xf9\x66\x9c\x59\x8c\x98\x3b\x9e\x36\xbd\x70\x4d\xdd\x4c\x2f\x7c\x99\xa7\xf4\xc2\x1f\x87\xd2\x0b\x31\xcf\x64\x71\xe3\x6e\xac\x05\xde\x74\x2b\x10\x8b\xbe\x6b\xce\x7e\x41\x04\xa7\x2d\x55\x62\x1f\x44\xb2\xb8\xa1\x36\x97\xe2\x96\x8b\xee\xa2\x59\xe0\xe7\x7e\x44\xbb\x95\x36\x9e\xe3\x30\x71\x2b\x9d\x20\xb9\xf7\x96\x7a\x0c\xfd\xec\x8d\xdf\x16\xbd\xa9\x68\x96\xd7\x38\xb3\xfb\x54\x43\x06\xff\x7d\xf7\xeb\xb1\x63\xa6\x56\xc5\xbf\xe8\x02\xf9\x45\xd3\x16\x27\xe0\x5d\x67\x56\xc2\xff\x3c\x42\x9d\x43\x67\x26\x9c\xed\x3a\x20\x7f\x52\x02\xb3\x73\x38\x39\x3d\xbf\xb5\xc8\xef\xbc\xcd\xc5\x86\x32\x27\xf3\x3a\xcc\x78\xb2\xe7\x41\xf3\x63\x21\xa6\xcd\x92\x8d\x4a\x2d\x15\x4f\x73\x67\x7e\x06\x4b\xf5\xfc\x57\xe1\x75\x48\x12\x8a\x0a\xe6\xfb\xcc\xfa\x29\x45\xf0\x4d\x93\x3a\x57\xa1\xd1\x4f\x90\xcb\x6e\xb9\x47\xed\xf0\x58\x34\xc5\xc3\xf8\xda\x81\xa1\x70\xb4\xa3\xd7\xa8\xc7\x84\xfa\x1a\xb5\x96\x05\x36\xe3\xa8\x78\x35\x1d\x4c\x3e\x1e\xa9\xc8\xca\x59\xc2\x11\x33\x9e\x81\x3a\x06\xb2\x0b\x3e\xbd\x85\xdc\x72\x36\x67\x65\x02\x29\x0a\xc2\x41\x8d\x22\x4f\x71\x96\xc7\x05\xe3\x9e\xc7\xf5\xc2\x8c\x03\xf7\xc5\x4b\xc8\x56\x2b\x54\xc5\xcc\x13\xe6\x6d\x7f\x19\x85\xf5\x2c\x49\x3c\x4c\x7e\x2a\x1b\x1b\xe0\x67\xba\xcf\x69\x82\xcb\x35\x8d\x11\x5e\x07\x6f\x46\x98\x28\x47\x86\x1c\x05\x25\xe3\x5c\x35\x68\x4d\xef\xa5\xd3\x78\xf9\xe9\xdf\x79\xff\x18\x1e\x44\x3f\xfd\x39\x9e\xb1\x53\x3d\x4c\xe2\x53\xe1\x07\x55\x75\x92\x21\x67\x34\xc3\x75\x4b\x5e\xa3\x82\xf3\xb5\x10\xa8\x81\x72\xa0\x2f\x07\x61\x0e\x4d\x79\xad\x27\x61\x76\xbe\x16\x3e\x89\xb9\xae\x92\x89\xf3\xb1\x54\xd6\x81\x81\x34\x6c\xc4\x39\x41\x73\x30\xdb\x81\x40\xad\x63\x87\x10\x51\xa8\xfb\x72\x41\x2c\xed\x19\x22\xf5\x15\xdb\xcc\x36\x25\x6f\x8a\x76\xb2\xa3\x7a\x19\x97\xcb\x26\xdf\xd1\x27\xe3\x67\xdc\xb6\x0e\xf3\x72\xbe\xab\xc5\xf9\xdd\x03\x36\x33\xe0\x61\x49\xa0\x9f\x34\xfb\x05\x81\x60\x73\xba\x91\xf4\x4e\x7c\x75\x72\xed\x96\xe8\x8a\x21\x92\x73\xa8\xa2\x90\x61\x95\xe9\xa2\x92\x55\xbe\x15\x1a\x2e\x15\xd5\x4d\x53\x26\xa6\x93\x89\xbf\xf2\xc6\xda\xf8\xc4\x58\xdd\x24\x2d\xdc\x03\xc8\x76\xfb\x35\x77\x7a\xe3\xb7\x2a\xf2\x5a\xa7\x2f\x29\xfc\xb1\xf3\x4e\x45\xfb\x46\x27\xae\x77\xf1\xe7\xb7\x57\x9b\x6e\x34\xbb\x6d\x03\xaa\x7c\xae\x2e\xa4\x8c\xeb\xa9\x9a\xf9\xe4\x12\x5e\x84\xcf\x2c\x91\xd2\x89\xaf\xb7\x1f\xe7\x44\xf2\xdf\xac\x10\xd1\x6a\x6e\x4e\x26\xd1\xd7\x25\x0b\x90\xf3\x56\x78\x70\xd6\x28\x5d\xf9\x6e\x07\x8c\x08\x80\x8c\x15\x89\xa7\x06\x7d\xac\x38\x3c\xa8\x3a\x90\xd4\x6d\xf5\xe1\x19\xb4\x1f\xad\x0b\x8f\x29\x0c\x74\x00\x7f\x7f\x18\x9b\xc1\xc5\xe1\xc9\xfd\xbe\xd5\x9f\x8e\x0c\xda\xf3\x37\x9d\x91\xee\x3f\xb3\x42\x4f\xe8\x8f\x41\x0d\xff\x6d\x67\x6c\xab\xaf\x50\x4f\x69\xac\x14\xc0\x07\x75\x04\x99\xd4\x7f\x2b\x1b\x59\xfa\xd6\xeb\xd3\x33\xf5\xb3\xed\x1a\x68\x0b\xab\x9b\x81\x96\x70\xb8\x27\xec\x16\x84\x6e\x35\xf0\x31\xcc\xe5\x80\xef\x9d\x0f\x28\x07\x9d\x16\x73\xb4\x1e\x8c\xa7\xe0\xcf\xae\x08\xc3\x09\x76\xbf\xfc\x3a\xee\x04\x4d\xf9\x1c\xcd\x9c\xe1\xf5\xd0\x9e\x5d\x09\x70\x03\xf3\x41\xec\xe2\x4e\x6d\x14\xba\xb1\x18\xfe\x4c\xe0\x86\x22\x74\xdf\x00\x6d\xe2\x93\x7d\xb3\xf1\x61\x91\x95\x3c\x1c\xbd\xdf\xdb\xe4\x4e\xd7\x38\x6a\xf3\x78\x30\xef\x6f\xf5\x60\xa8\xee\x17\xa9\xfb\x99\xd3\x0b\x37\xb5\x79\x5d\xa3\xc8\xcc\xd7\x5a\xcf\xa1\xbe\xe2\xce\x39\x0a\xdc\x93\x4c\xf9\x1e\xe5\x94\xb4\xfd\xa2\xbe\xf2\x3a\x0e\x6f\x72\x3a\xab\xc6\xce\x60\x63\x15\x64\xbb\x73\x52\x8f\x4f\xfa\x06\xf5\x05\xea\xe4\x15\xec\x96\x59\xf1\xe6\x59\xa6\x12\x3f\x72\x60\x4b\x91\xc7\xf0\x0f\xb2\x13\xf7\xb1\x73\x6c\xd3\x63\xec\xdc\x22\x73\xcc\x4e\x01\x3c\x4b\x7e\x90\xa1\x62\x1f\x43\xc7\x36\x3d\xc6\xd0\x2d\x32\x77\x1b\xda\xde\x29\xda\x90\x73\xfa\x36\x73\x38\xf8\xfb\x6f\xf7\x74\xa4\x44\x9d\x1e\xaf\x2b\xd4\x32\xf7\x65\x26\x8a\x09\xa7\xaf\x6a\x81\x88\x47\x78\xe9\x4c\x94\x75\x66\xbf\xfb\x36\xe9\x00\x31\x50\x70\xd7\x0a\x6f\x56\x98\x5b\x2c\x7a\xb3\x49\x1a\x8b\x36\x13\xd1\x05\x8f\x44\xe3\x89\xa8\xf9\x24\x6d\x7e\x09\x96\x4f\x27\x55\x5d\xf7\xff\x8a\x5e\x51\x66\x10\x2c\xfc\x67\x09\xf1\x2f\x61\xec\x3f\xe1\xc5\x0b\xb0\xf0\xef\x1e\xf9\xbb\x6f\x17\x84\x68\x6f\x08\xc9\x73\x56\x07\xe2\x90\xb8\x0f\x72\x58\xde\x07\x39\x2a\x70\xdd\x4a\x1c\xaa\xc9\x6d\x51\x84\x4f\x3a\x5b\x99\xf8\x37\x54\x9e\x9e\xa9\x82\x6f\x41\x81\x50\xa1\xbd\xac\x0b\xf8\x24\xed\x25\x68\xcc\xeb\x6b\xbe\xfa\xa2\x32\x6b\x8d\xa0\x6a\x58\x65\x4a\xe6\x06\xa4\x02\x7f\x4f\x95\xea\xc2\x57\xf2\xa8\x08\x8b\x22\xfa\xb9\x08\x78\x62\x02\x27\xa7\xed\x6f\x9c\xee\x13\x98\xf9\x7a\x1b\x91\xfb\x83\xbf\x02\xdd\xe5\xdb\x89\xf7\xfe\x22\x05\x5c\x53\xe9\x61\xe5\xdc\x2d\xf6\xba\x53\x7f\x69\x16\xdc\x71\x89\x2f\xdf\x07\xeb\x58\xf9\xe6\x3b\x9a\x39\x5c\xd3\x05\x47\x84\xda\x4b\x5e\x48\x2d\x8e\xbb\xe7\x05\xef\x2a\xd2\x60\xc0\xbc\x87\x2e\x5f\x07\x36\xc0\x65\xf2\x63\xa1\x8c\x27\x60\x31\x9a\x4c\x0f\x60\xd2\x37\x9b\x0e\x4b\xbe\xa7\xb4\xc4\xe7\x40\xb2\x63\x5f\x07\x4c\x06\x12\xfd\xf5\x68\x10\xc7\x98\x79\x13\xca\x70\x2f\xd9\x00\x33\x2c\x3c\x16\xce\xee\x3c\x2e\x06\x34\xac\x04\x48\x79\x54\xef\x30\x0d\x77\xa7\x88\xfe\x8c\xb0\x06\x4b\x07\x80\x95\xcd\xad\x6d\x1b\xb4\x8d\x21\x7d\x70\x79\x4e\xb3\x01\x2d\x93\x1f\x0b\xec\xb6\xf9\xcd\x8c\xef\x3f\x8c\xdf\x9b\x76\x86\xf3\x2c\xf8\xb1\x39\x03\xe8\xb1\x12\xdb\xb1\x63\x2b\x36\x90\xe3\x7e\x76\x03\x39\x26\x3f\x16\xb9\x4e\xbb\x1e\x39\x24\xd3\x83\x3b\xba\x27\xf2\x46\xee\xb3\x5b\xe2\x33\x42\xc9\xf6\x0d\x40\x79\xe9\xfb\xfb\x6d\x50\x7a\xf5\xfb\x50\xfa\x46\x79\x03\x4b\x4f\x7f\x2c\x98\xdd\x8b\x40\x84\xa6\x5f\x48\xc8\x37\xfd\x61\x0e\x4e\xdf\xcc\xb7\xd4\x67\xc4\xd3\x1f\x3b\x00\xe8\x2a\x5c\x1f\xb6\x21\x1a\x4c\x98\x77\xee\x0e\xcd\xb0\xd2\x42\x3c\xae\x4c\x3a\x4f\x74\x59\xae\x35\xd8\xf4\x17\xa9\x8a\x59\x02\xcb\x65\xb3\xfe\xd6\x52\xa7\x36\xb1\xb0\x04\x9b\xbe\x2e\xb1\x9a\x75\x5a\x09\x3b\xbd\x9f\xfe\x3f\x00\x00\xff\xff\x45\x25\x59\xe5\xac\x31\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12716, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
