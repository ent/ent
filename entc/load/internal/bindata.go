// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x6f\xe3\x36\x12\x7f\xb6\xfe\x8a\xd9\x00\x0d\xa4\x85\x2b\xf7\x8a\xa2\xb8\xf3\x9e\x0f\x28\xda\x2d\x9a\xeb\x35\x5d\x74\x77\xfb\xb2\x58\xa4\x8a\x34\xb2\xb9\x91\x48\x97\xa4\xb3\x49\xd3\xfc\xef\x07\x0e\x3f\x44\xc9\xb2\xe3\x7c\xf9\x25\xd2\x70\x38\x1f\x3f\xce\x0c\x87\x54\x66\x33\xf8\x5e\xac\xaf\x25\x5b\xae\x34\x7c\xfd\xd5\x3f\xfe\xf5\xe5\x5a\xa2\x42\xae\xe1\xc7\xa2\xc4\x73\x21\x2e\xe0\x84\x97\x39\x7c\xd7\x34\x40\x4c\x0a\xcc\xb8\xbc\xc4\x2a\x4f\x66\x33\x78\xb7\x62\x0a\x94\xd8\xc8\x12\xa1\x14\x15\x02\x53\xd0\xb0\x12\xb9\xc2\x0a\x36\xbc\x42\x09\x7a\x85\xf0\xdd\xba\x28\x57\x08\x5f\xe7\x5f\xf9\x51\xa8\xc5\x86\x57\x46\x04\xe3\xc4\xf2\xbf\x93\xef\x5f\x9f\xbe\x7d\x0d\x35\x6b\xd0\xd3\xa4\x10\x1a\x2a\x26\xb1\xd4\x42\x5e\x83\xa8\x41\x47\xfa\xb4\x44\xcc\x93\x64\x5d\x94\x17\xc5\x12\xa1\x11\x45\x95\x24\xac\x5d\x0b\xa9\x21\x4d\x26\x47\xc8\x4b\x51\x31\xbe\x9c\x7d\x52\x82\x1f\x25\x93\xa3\xba\xd5\xe6\x8f\xc4\xba\xc1\x52\x1f\x25\xc9\xe4\x68\xc9\xf4\x6a\x73\x9e\x97\xa2\x9d\xd5\xce\xe1\x19\x72\x62\xdb\x31\x34\x53\xe5\x0a\xdb\x62\x86\xd5\x12\x0f\x60\xab\x19\x36\xd5\x01\x7c\x8c\x57\x78\x75\x94\x64\x89\x81\xe4\x2d\xd1\x40\xa2\x5b\x0c\x05\x05\x07\xe4\x3a\x77\x03\x7a\x55\x68\xf8\x5c\x28\xf2\x19\x2b\xa8\xa5\x68\xa1\x80\x52\xb4\xeb\x86\x19\xe0\x15\x4a\x70\xb8\xe4\x89\xbe\x5e\xa3\x17\xa9\xb4\xdc\x94\x1a\x6e\x92\xc9\x69\xd1\x22\x00\x18\x0a\xe3\x4b\xa0\xdf\x1f\x06\xa9\xf9\x11\x2f\x5a\x9c\x8a\x96\x69\x6c\xd7\xfa\xfa\xe8\x8f\x64\xf2\xbd\xe0\x35\x5b\x02\xd9\xe0\x9f\x1d\x73\x49\xaf\x7d\xf6\xd7\xd5\x12\x15\x00\x7c\xf8\xf8\xd2\x3c\xc6\xb2\x0d\x6c\xaa\xcf\xfd\xa3\x81\x48\x11\x37\x3d\x46\xdc\x84\xde\x80\xfd\xc4\x20\x85\xca\xb0\xd3\x63\xc4\xce\xec\x50\x9f\xff\x27\x21\x2e\x9c\x31\x6f\x84\x62\x9a\x09\xee\xf9\x57\x66\xa8\xcf\xfd\x46\x34\xac\xbc\x06\x38\x17\xa2\x01\xe8\xc1\xb2\xa6\xa1\x1e\xfb\x2d\x2d\x57\x10\x5b\xa1\x2a\x25\x3b\x47\x05\x05\x90\xe9\xb0\xf6\x43\x2e\xa2\xed\x6a\xbb\x35\x09\xf3\xba\x55\x09\x1e\x01\x30\xae\x01\x66\x33\xb0\x98\x90\x6b\x5e\x8a\x95\xdd\x30\xa5\xf3\x64\xf2\x0b\xbb\xc2\xea\x84\x9b\x29\x64\xf4\x6c\x06\x27\xbc\x62\x65\xa1\x51\x01\xab\xa3\x09\x26\x62\x5a\xc3\xfd\x25\xe3\x76\x22\xe3\x27\x4e\xae\xd5\x45\xa4\xbe\xae\x96\x48\x56\x97\x75\xd7\x1a\xb4\x1d\x9c\x96\xfe\x80\xd8\xb4\x13\xb7\x43\xd3\xfe\xe2\x00\x8d\x7e\x3b\x63\xf5\x84\xd7\xa2\x63\x7b\x49\xae\xe7\xef\xae\xd7\x18\x0f\xb8\xd9\x46\x7d\x7f\xf6\xbb\x22\x56\xb5\x5f\xb7\x2e\x06\x71\xff\x96\xfd\x15\x19\xfe\x92\x71\xfd\xed\x37\xbb\x26\x2b\xf6\xd7\x40\xf5\x6b\xbe\x69\x55\x60\x6b\x8b\xf5\x07\xab\xfe\xe3\x48\x8a\xa2\xe1\xed\x4f\x7f\xcf\xd9\x9f\x9b\xa0\x3e\x8e\xdf\x6d\xe5\x1b\xe2\xed\xcf\x3f\x65\x4d\x53\x9c\x37\x78\xc8\x7c\xee\x78\xfb\x12\x7e\x5d\x9b\x68\x2e\x9a\x43\x24\x08\xc7\xdb\x97\xf0\x03\xd6\xc5\xa6\xd1\x07\xf9\x50\x59\xde\x51\x01\xbf\x17\x8d\x81\x82\x71\x8d\xd2\x54\xdb\x9b\xdb\xdd\x02\xce\x2e\x0d\xf3\x00\xcb\x75\x55\x68\xf4\xd6\xdc\x81\x25\xf1\x9e\x8d\x9a\x73\xd2\xb6\x1b\x1d\x40\xdd\x2f\x87\x79\xde\xbe\x88\xdf\x8b\x86\x55\x85\x16\x92\x42\x83\x12\x75\xa7\x88\xcb\xc0\x3b\x88\x4b\x2d\x64\xb1\xc4\x9f\xf1\x1a\xee\x0c\x6a\x65\x79\xcf\x2e\xf0\x7a\x58\x19\x5d\xb5\xa2\xdf\xcb\xfe\xeb\x40\x88\x2f\x7b\x03\x33\x90\x1b\xf2\xe5\x21\x68\x28\xcf\x3b\x10\x41\xf5\xd3\x64\x33\xdc\x99\x23\xb6\xd6\x9e\x6d\xe7\xf8\x77\x9c\x0b\x5d\x18\xfb\x54\x5f\x48\x1c\x2f\x4e\x48\xd1\xf1\x8e\x54\x7e\xda\xdd\xb6\x2b\x21\x91\x1f\x50\x08\x69\xde\x78\x1d\xbc\x6f\x15\xf4\x10\xdd\x3d\x77\x7f\x0d\xbc\x67\x05\xfc\x0d\xeb\x60\xf5\xfe\xa9\x12\xeb\xb3\x6d\xb3\x7f\xc3\x3a\x30\x76\xbd\xc3\x8e\xf9\xbb\xeb\xdf\xfd\xab\xdf\x09\xbf\x44\xa9\x0e\xca\x53\xcb\x39\xb4\xfb\xcf\x0d\x93\x58\xdd\x3d\x5d\x3a\xce\xdd\x19\xfa\xd2\xf4\x48\x79\x3f\x67\x0f\xc8\xcf\x38\xaa\x1f\x13\xd3\xb6\x23\xd8\x0e\x6a\x4b\x7f\x40\x54\xdb\x89\x5d\x58\x47\x0b\x15\xa0\xda\xb3\x32\xbe\x99\xa4\x16\xce\xc5\xd4\xdd\xcd\xe4\x08\xf7\x58\x33\x19\xa1\x1c\xc2\xf5\x0e\xa0\x2d\x4a\xa7\xf8\x99\xc2\xb3\x94\x48\x8d\x56\xc1\x3d\x22\xc6\x28\x0b\x0b\x3d\xd9\x9e\x70\xad\x85\xcc\x93\x7a\xc3\x4b\x3f\x33\xc5\xca\xad\xf4\x0f\x81\x23\x73\x31\x7f\x93\x4c\x38\xc2\x7c\x01\xc7\xe6\xf5\x26\x99\x98\x94\x9c\x87\x48\xc2\x2a\x7f\x57\x2c\xa7\x86\x7c\xbd\xc6\x79\x4c\x36\xb9\x9c\x4c\xa8\x72\xc4\x74\xf3\x6e\xe8\x16\xfa\x79\xa0\xdb\x77\x33\xe2\xe2\x7f\xee\x47\xdc\xbb\x19\xf2\xb1\x3d\x77\x43\xfe\xdd\x8e\xd5\x9d\x2e\x1a\xab\xbd\xae\x0e\xda\x39\x0d\x75\xef\x66\x34\x8a\xd6\x39\xb4\xc5\x05\xa6\xe3\x31\x9b\x4d\x93\xc9\x6d\x32\xa9\x85\x84\xb3\x29\x14\xda\xa0\x22\x0b\xbe\x44\x23\x32\x0e\x79\x83\x12\xc7\x98\xf4\xa1\xd0\xe4\x78\x9a\x7d\x84\x05\x14\x9a\x04\xb1\x1a\x24\xd6\x46\x8a\xb5\xf6\x15\xbd\xbe\x58\x00\x67\x8d\x97\x61\x8a\xd0\x22\xac\x93\xc4\x3a\xb3\xf4\x28\x58\x16\x60\xf9\x22\x1a\x89\x97\xa8\x37\x92\x03\xc7\x2e\x4c\x6c\x77\xbb\x1d\x27\xb6\x27\xa7\x40\xb1\x8f\x63\x91\x42\x93\xd3\xba\xf2\x7d\x6c\x1c\x2b\xa9\x3d\x2e\x4d\x01\xa5\x34\xef\x37\xe4\x1d\x4a\x69\xbc\xab\xab\xfc\xb5\x94\x69\xf6\x8a\x08\x91\x7f\xde\x42\xd6\x4c\xa1\x6e\xb5\xe1\x12\xb2\x4e\x6d\x76\xc0\x17\x7f\xce\xe1\x8b\xcb\xa3\xa9\x99\x4f\x0b\x69\xa6\x67\xe4\x9a\x22\xd4\x8e\x49\xe7\xcd\x30\xc6\x20\x4c\xa0\x58\xaa\x45\x7f\xc4\x50\xa6\xc3\x30\xa6\x11\x17\xc8\xd4\xfb\xce\xe3\x01\xa2\x6c\xc5\x2c\x0d\x75\x51\xeb\x7b\xd6\x79\x67\x83\xef\x4c\x93\x49\xe8\x47\xbb\x51\x4f\x31\xa3\xae\xbb\x9b\x77\x72\x7d\xbf\x67\xd1\x22\xdd\x71\x1f\x38\x27\xdd\xbd\xce\xb0\xe3\x0c\x9d\xde\x3c\xf8\x1c\xfa\xb9\x61\x32\xd0\x70\x3f\x1d\xba\x2e\x8f\xc6\x1b\xe4\x69\x5d\xe5\x1d\x35\x23\x21\xbe\x27\x0a\x3a\x02\x85\x86\x43\x6f\x14\x74\x04\xca\x56\xca\xc1\xc3\x92\xae\xde\x4e\x3a\x55\x1f\x92\x74\xaa\xa6\x20\x80\xc5\xdd\x91\xd8\x32\xa5\x4c\x25\xa6\xcd\x83\x99\x49\xc6\x10\x1f\x9f\x47\x53\x23\xcb\xa8\xc8\x82\x6c\x73\xec\x9a\x2f\x80\xce\x5b\x06\x37\x73\x0e\xcb\x5e\x59\xfa\x8b\x05\x7c\xe5\xed\xa4\xf3\xd9\x02\x8e\xcd\x00\x4d\x36\xdb\x9d\x3d\x21\xbb\xf6\x1d\xe8\x30\x00\x65\xc1\xe1\x1c\x81\x6e\x90\xb0\x02\x2d\x88\x67\x89\x1c\x65\x41\xf9\x69\x66\xfe\x28\x24\xe0\x55\xd1\xae\x1b\x9c\x02\x17\xda\x1c\xfa\x37\xbc\xa4\xa6\xb8\x61\x17\x08\x9a\xb5\x98\x9f\x8a\xcf\x39\x59\x79\x36\xf5\xb9\x69\xf6\x97\xfc\x97\x42\xaa\x55\xd1\xa4\x5d\xdc\xb9\x5c\x8d\x10\x52\x75\xde\x3b\xd0\x2c\xa2\x28\x8d\xcb\x8d\xaa\xa7\x66\x4e\x57\x73\xec\x96\xbb\x5d\x73\xec\xc9\x9e\x6a\x8e\x7d\x1c\xab\x39\x34\x39\x65\xd5\x95\x39\xc1\x56\x78\xd5\xdf\xa0\xac\xe8\x9b\xa0\xfb\x98\x08\xc6\x5a\xda\xa8\x5d\x3a\xb1\xea\x8a\xba\x60\xca\x60\xbb\x27\xcf\xc3\x80\x7d\x1f\xe6\xb6\x19\xe9\x32\x3b\x4e\x18\x33\xd2\x4b\x97\x5b\xe7\xa9\xc3\xd0\xdd\x6d\xd9\xd5\xa2\x95\x8a\xee\xca\x42\x58\x9b\x27\x01\x05\xfc\xf7\xed\xaf\xa7\x66\x32\x75\x32\x6e\xa1\x2b\xb4\x0b\x4d\x2c\x46\x80\x9b\x2c\xce\x3f\x61\xa9\xdd\x1f\x87\x50\x4f\x69\xaa\xbc\x6e\xd3\x20\x39\x4d\x19\xa4\xe7\xf0\xe1\xe3\xf9\xb5\xb6\xf5\x33\x2a\xd0\x8a\x6a\xa8\x9d\x6b\x30\xb3\x97\x69\x73\x7f\x2f\x64\x5f\xd3\x2c\xde\xc3\x19\xb7\x37\xa0\xa9\xbb\xb7\xa4\x4d\xfe\xd7\xda\x69\xce\x32\x97\x6e\x53\x9f\x0d\x2e\xc8\x54\x6e\xd6\x9c\x2e\x74\x3c\xeb\xc1\x7b\x81\x73\x2a\x6c\x06\x6a\xb8\x17\x0c\xd5\xd8\x15\x7d\x7a\x3d\xb6\xc1\x0b\xba\x8a\x1a\x29\xa8\xbc\xa2\x60\xc8\x53\xe8\x72\xd5\x0e\xe3\x0e\xc3\x74\x9e\x94\x88\x36\x98\x4d\x45\x5b\xaf\x91\x57\xa9\x23\x4c\xbb\x6e\x2e\xca\x92\x34\xcb\x1c\x4c\xee\x3e\x32\x76\xc0\x5d\x5f\x3e\xa7\x0b\x26\x75\x83\x13\xce\x06\xe7\x86\xbf\x3c\x8d\x1c\x39\xf1\x46\xc6\xa9\x3f\xea\xcd\x60\xd1\xe9\x62\xf5\xf9\x63\xcb\xde\xc8\x3e\xbd\x1e\x37\xb1\x57\x8c\x55\xe6\x2a\xcb\x7b\xde\xf6\x6a\x8b\x2d\x10\xca\x6e\x03\xec\x12\x39\x9c\x6f\xea\x1a\x25\x50\x49\x71\xd5\xd5\x5f\xee\x52\x99\x18\x48\x48\xcf\x37\xb5\xab\x09\xa6\x73\xb3\xc4\xe9\xae\xca\xd0\x83\x81\x2c\x0c\xe2\x8c\xa0\x29\xa8\xfd\x40\xa0\x94\x71\x40\xd4\x5d\x38\x28\x57\x7d\x69\x4a\xd4\x2e\xe6\x6e\x03\x54\x23\x2d\xe3\xb6\x68\x23\x3b\xda\x7e\xe2\xdd\x27\x54\x1d\x7a\x52\xee\xfe\x58\x0b\x87\x8e\x3b\x19\xc5\xe5\xd2\x01\x96\x2a\x70\xb0\x64\x30\x2c\x5d\xc3\xfa\x4a\xb0\x19\xdb\x48\x7a\x2f\xbf\x7a\x15\x6f\x4f\x76\xc5\x10\xb1\x29\xb4\x51\xca\x58\x93\xe9\x30\x50\xb4\xae\xb3\x18\xaf\xc1\xed\x55\xa8\xbf\xc9\x64\xe2\x0e\x98\xb1\x35\xae\x30\xb6\x57\x59\x07\xf7\x08\xb2\xfd\xf6\xc7\x68\x0f\x71\xcb\xa3\xa8\x35\xf6\x92\xc1\x9f\x7a\x6b\x5a\x77\x2b\x3a\x31\xad\x80\xd3\xdf\x1d\x1f\xfa\xd9\x6c\xd8\x46\x4c\xb9\xaf\x2d\x64\x8c\x69\x51\xc2\x4d\xe0\x02\x8e\xfd\xb3\x95\x48\xe5\xc4\x75\x04\x9f\xa6\x44\x72\x5f\x2b\x88\xa8\xa5\xdd\xeb\x27\xd1\xa7\x88\x39\xb0\x69\x27\xdc\x07\x6b\x54\xae\x5c\xf3\x00\xaa\xf6\x80\xec\xda\x24\x9e\x1a\xf4\x5d\x9b\xc3\x83\x76\x07\x92\xba\x6f\x7f\x78\x06\xeb\x77\xee\x0b\x8f\xd9\x18\x48\x81\xfd\x90\x16\xbb\x61\x37\x87\x27\x8f\xfb\xce\x7e\x52\xe9\xad\xb7\xdf\xf8\x22\xdb\x7f\xb2\x06\x3d\x61\x3c\x66\xc3\xaa\xd7\x2f\x79\x2e\x50\x6d\xcd\xb3\x67\x95\x07\xd4\xbc\x5e\x1f\xb5\xb3\xe8\xed\xae\x33\xf7\x2e\x7b\xe3\x55\xe4\xb0\x22\xb2\x7b\x59\xc3\x1e\xb1\xb3\x3c\x78\x6c\x89\xe7\xae\x2c\xdf\xc2\x7c\x14\xbb\xb8\x1d\xd9\x09\xdd\xae\x40\xbd\x27\x70\x63\x61\x78\x68\x14\x86\x20\xb4\x81\x15\x02\xb0\x2e\x1a\x7b\xdf\x76\x7b\xb0\xcb\xbd\xd6\x68\xa7\xcf\xee\xbb\x75\xec\x74\xbf\xa7\x3a\xc0\x6b\x95\xbb\x0f\xe3\x0b\xb0\xe2\x1c\xef\xb8\x99\x35\xd8\xab\xa9\x0c\xba\xae\xa2\xb3\x87\xd5\xf0\x22\x1c\x6c\xe1\xef\xbf\xcd\xdb\x09\xaf\x45\x7e\xba\x69\x51\xb2\x32\xcd\x06\xfd\x0c\x59\xc0\xa7\x20\x2e\x6c\xab\x12\x9f\x89\xf3\xb4\x6e\x44\xa1\xbf\xfd\xc6\x7a\xf1\x42\x5c\xc4\x93\xe3\xfa\xb2\xe1\x78\xb5\xc6\x52\x63\x35\x38\xec\xd3\x3d\x43\xb8\x62\x98\xdb\x3b\x86\xf8\x8a\x41\x7d\x66\xba\x5c\x81\xb6\xda\xc9\x54\xb3\xff\xbf\x32\x9a\xca\x42\x21\x68\xf8\xcf\x02\xe2\x0f\xcd\xfa\x9f\x70\x7c\x0c\x1a\xfe\x3d\x20\x7f\xfb\xcd\xdc\x54\xb2\xe1\xa9\xde\x5e\x5c\xf0\x6c\x5c\xdc\x7b\x36\x2e\xef\x3d\xdb\x29\x70\xd3\x49\x1c\x2b\x58\x5d\xc5\x80\xcf\xb2\x58\xab\xf8\x5f\x13\x1c\xbd\xe0\x95\xed\x83\x3c\xa1\x45\xbd\x12\x15\x7c\x66\x7a\x05\x12\x4b\x71\x69\x9b\x5f\xe4\x6a\x23\x11\xb8\x80\x75\xc1\x59\xa9\x80\x71\x70\x9d\x2a\xe3\x4b\x57\xe6\xa2\x0a\x55\x57\xd1\x57\x59\x70\xc4\x0c\x3e\x7c\xec\xfe\x83\xe0\x36\x83\xd4\x15\xa3\x88\x3c\x3c\x49\x57\x68\xda\x6f\x23\xde\xc5\x0b\xab\xe1\x92\xf2\xd2\x1a\x67\xfa\xd8\xcb\x5e\x71\xa2\xcb\x95\x5e\x48\x7c\xf1\xce\x7b\x67\x8d\x0f\x77\x9f\x53\xb8\xa4\x16\xa7\xf6\x85\x89\xa2\x90\xea\xbf\xe9\xf4\x7c\x74\x55\xb9\x77\x60\x3a\x40\xd7\x36\x04\x5b\xe0\x5a\xf2\x63\xa1\x8c\xcf\xc0\x31\x9a\x96\xee\xc1\xa4\x2f\x09\x06\x4b\xdb\xa9\x74\xc4\xe7\x40\xb2\xe7\x5f\x0f\x4c\x0b\x24\xba\x06\x69\x14\xc7\x78\xf2\x36\x94\xbe\x33\xd9\x02\xd3\x0f\x3c\x16\xce\xfe\x89\x3c\x06\xd4\x8f\x78\x48\xed\xdd\x97\xc1\x94\x85\x7f\x42\x0a\xf4\x67\x84\xd5\x7b\x3a\x02\x2c\x0b\x7d\xdb\x3e\x68\x83\x23\x43\x70\xed\x49\x6d\x0b\x5a\x4b\x7e\x2c\xb0\xfb\x4e\x70\xa9\x6d\xf7\x2c\x7e\xbf\x74\xa7\xb8\x67\xc1\xcf\xba\x33\x82\x9e\x35\x62\x3f\x76\xd6\x8b\x2d\xe4\xec\x66\xbf\x85\x9c\x25\x3f\x16\xb9\x5e\x2f\x13\x05\xa4\xa5\xfb\x70\x34\x6f\x14\x8d\xb6\x09\xe9\x88\xcf\x08\xa5\xf5\x6f\x04\xca\x95\x6b\x7e\xf6\x41\xe9\xcc\x1f\x42\xe9\x5a\x8b\x2d\x2c\x1d\xfd\xb1\x60\xee\xed\x92\x52\xd7\xce\x18\xf2\x9b\xa8\x51\x7a\x16\xf0\x9c\x43\x23\xe8\xad\x7d\x77\xb5\x0f\x3e\xe7\x48\x87\x1f\xb9\x18\xee\x26\x34\xc4\xb7\x13\x59\xef\x8d\x8e\x0d\x42\x82\xce\x7f\x66\xbc\x4a\x33\x58\x2c\xc2\xf8\x1b\x4d\x6d\xd9\x44\xc3\x02\x74\xfe\xba\xc1\x36\xed\xf5\x0d\x3a\xb9\x4d\xfe\x1f\x00\x00\xff\xff\x1f\x81\x37\x98\x28\x2c\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11304, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
