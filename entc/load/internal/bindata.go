// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\xde\xfd\x14\x13\x03\x35\xa4\x60\x2b\xf7\x8a\xa2\xb8\xdb\xdc\x1e\x50\xb4\x29\xea\xeb\xd5\x0d\x9a\xa4\x2f\x86\xe1\xca\xd2\xd0\xcb\x58\x22\xb7\x24\xd7\xb1\xeb\xfa\xbb\x1f\x38\xfc\x23\x4a\xab\x5d\x6f\x1c\x3b\x2f\x59\x0d\x39\xc3\x99\x9f\xe6\x1f\x47\x3e\x3a\x82\xef\xe5\xea\x56\xf1\xcb\xa5\x81\xaf\xbf\xfa\xc7\xbf\xbe\x5c\x29\xd4\x28\x0c\xfc\x58\x56\x78\x21\xe5\x15\x1c\x8b\xaa\x80\xef\x9a\x06\x68\x93\x06\xbb\xae\xae\xb1\x2e\xa6\x47\x47\xf0\x6e\xc9\x35\x68\xb9\x56\x15\x42\x25\x6b\x04\xae\xa1\xe1\x15\x0a\x8d\x35\xac\x45\x8d\x0a\xcc\x12\xe1\xbb\x55\x59\x2d\x11\xbe\x2e\xbe\x0a\xab\xc0\xe4\x5a\xd4\x56\x04\x17\xb4\xe5\x7f\xc7\xdf\xbf\x3e\x79\xfb\x1a\x18\x6f\x30\xd0\x94\x94\x06\x6a\xae\xb0\x32\x52\xdd\x82\x64\x60\x92\xf3\x8c\x42\x2c\xa6\xd3\x55\x59\x5d\x95\x97\x08\x8d\x2c\xeb\xe9\x94\xb7\x2b\xa9\x0c\x64\xd3\xc9\x01\x8a\x4a\xd6\x5c\x5c\x1e\x7d\xd0\x52\x1c\x4c\x27\x07\xac\x35\xf6\x3f\x85\xac\xc1\xca\x1c\x4c\xa7\x93\x83\x4b\x6e\x96\xeb\x8b\xa2\x92\xed\x11\xf3\x06\x1f\xa1\xa0\x6d\x5b\x96\x8e\x74\xb5\xc4\xb6\x3c\xc2\xfa\x12\xf7\xd8\xc6\x38\x36\xf5\x1e\xfb\xb8\xa8\xf1\xe6\x60\x9a\x4f\x2d\x24\x6f\x89\x06\x0a\xfd\xcb\xd0\x50\x0a\x40\x61\x0a\xbf\x60\x96\xa5\x81\x8f\xa5\x26\x9b\xb1\x06\xa6\x64\x0b\x25\x54\xb2\x5d\x35\xdc\x02\xaf\x51\x81\xc7\xa5\x98\x9a\xdb\x15\x06\x91\xda\xa8\x75\x65\xe0\x6e\x3a\x39\x29\x5b\x04\xff\x4f\x1b\xc5\xc5\x25\x0c\xff\xfd\x61\x81\x9b\x1f\x88\xb2\xc5\x99\x6c\xb9\xc1\x76\x65\x6e\x0f\xfe\x98\x4e\xbe\x97\x82\x71\xbf\xdf\xaa\x95\x3e\xf7\x79\x2b\x5a\xe9\x73\xbf\xae\x2f\x51\xfb\x6d\xa7\x67\x2f\xed\xe3\x96\x93\x2d\xc6\xba\xcf\xfc\xa3\xc5\x53\x47\x66\x7a\x1c\x67\x26\xe4\x07\xdc\xc7\x16\x65\x7f\xf8\xe9\xd9\x4b\x7a\x1c\xe7\xe6\x6e\x67\x9f\xfd\x27\x29\xaf\x12\xcd\xdf\x48\xcd\x0d\x97\x62\x84\x7d\x69\x77\xf6\x99\xdf\xc8\x86\x57\xb7\xfb\x30\xaf\x68\x67\x9f\xfb\x3b\x21\xa4\x29\x2d\x83\x86\xb6\x5c\x9d\xba\x57\x76\xc6\x85\x41\x65\xfd\xe9\xee\x3e\x70\x97\xdd\xce\x9e\x88\x7b\x72\xad\x78\x6c\x8d\xba\x52\xfc\x02\x35\x94\xb0\x0a\x44\x1f\x77\xce\x27\xbd\xe7\x44\x8e\xce\x77\x12\xdc\xb8\x30\x00\x47\x47\xe0\x48\x9e\x9f\xa0\x3f\xb2\x18\x40\xc3\xb5\x29\xa6\x93\x5f\xf8\x0d\xd6\xc7\x64\xec\x85\x94\x8d\xe7\xe0\x55\x69\x50\x03\x67\xc9\xa9\x20\x2f\x3e\x60\xe5\xdc\xbb\xb5\x5c\x5f\x72\xe1\x04\x70\x11\x0e\x71\x47\x12\x09\x78\x7a\x70\x4b\x24\x77\xa6\xb3\xd7\x39\xc8\x66\x24\x39\xfa\x23\x02\xc9\x31\x8e\xc7\xd1\xd6\x48\xda\x1e\x4a\xc7\x82\xc9\x6e\xdb\x4b\x42\xae\x78\x77\xbb\xc2\xde\x82\x67\xb7\x0a\xf4\xd9\xdf\x95\xe9\x61\x0f\x9c\x6e\xca\x41\x24\xbe\xe5\x7f\x25\xba\xbf\xe4\xc2\x7c\xfb\xcd\x56\x6e\xcd\xff\x1a\x1c\xfe\x5a\xac\x5b\x1d\xb7\x9d\x9e\x39\x50\xee\xe0\x64\x06\xbf\x07\x5d\xa2\x5b\xa2\xdd\xdc\xe7\x7f\x2f\xf8\x9f\xeb\xa8\x00\xf9\xc5\xc8\x3f\xcf\xbf\xa6\xcd\x7d\x01\x27\xbc\x69\xca\x8b\x06\xf7\x12\x20\xfc\xe6\xbe\x88\x5f\x57\xd6\xb7\xcb\x66\x2f\x11\xd2\x6f\xee\x8b\xf8\x01\x59\xb9\x6e\xcc\x7e\x66\xd4\x6e\xf3\xa8\x84\xdf\xcb\xc6\xc2\x91\xc6\xf4\x76\x09\xe7\xd7\x76\xf7\x00\xd0\x55\x5d\x1a\x0c\xfa\x3c\x04\x28\x6d\x3e\x1f\x55\xe8\xb8\x6d\xd7\x26\x22\xfb\x80\x20\x1e\x36\xf7\x65\xfc\x5e\x36\xbc\x2e\x8d\x54\xe4\x22\x14\xb4\xdb\x65\x5c\xc7\xcd\x03\x0f\x35\x52\x95\x97\xf8\x33\x52\xe2\x7c\xc0\xbf\xb5\xdb\x7c\x7e\x85\xb7\xc3\xd4\x9b\xe6\xda\xd1\xd4\x9b\x66\x5f\xb7\x3a\x50\x04\x85\x25\x5f\xef\x85\x88\x0e\x9b\x07\x32\x28\xc1\xd9\xe0\xb6\x7b\x93\x2c\xde\xb3\x2b\xc8\xa0\xcd\xe7\x9b\x21\x9f\x56\x02\xd8\x56\x0b\xf6\x2b\x06\x54\x7a\x37\x73\x23\x91\x1f\x91\x1a\x89\xef\x69\x3a\x8c\x00\xd2\xc3\xbc\xbb\x73\xe2\x03\xbc\xc3\x84\xf8\x1b\xb2\xa8\xf5\x6e\x56\x85\xec\x7c\x53\xed\xdf\x90\xc5\x8d\xa3\x8d\x4d\xca\xbf\x3d\x19\x6e\x71\xaf\x1d\x99\xf0\x58\x5c\xa3\xd2\x3b\x9d\x33\x36\x36\xb4\x73\xa8\xf7\x9f\x6b\xae\xb0\x7e\x98\x5d\xf9\x9d\xdb\xc3\xf4\xa5\xed\xda\x8a\x7e\xe0\xee\x11\xa3\x4f\xd5\xe0\xb8\x1e\x61\xd3\xa9\x1d\xfd\x11\x5e\xed\x18\x3b\xb7\x4e\x5e\x54\x84\x6a\xc7\x9b\x49\xba\xdd\xd3\x10\xe8\x7b\xb5\xb7\xc3\xdd\x63\xfd\x6c\x82\x72\x74\xd7\x07\x80\x76\x28\x9d\xe0\x47\x72\xcf\x4a\x21\xb5\x60\xa5\x08\x88\x58\xa5\x1c\x2c\xf4\xcb\xb5\x89\x2b\x23\x55\x31\x65\x6b\x51\x05\xce\x0c\x6b\xff\xa6\x7f\x88\x3b\x72\xef\xf3\x77\xd3\x89\x40\x98\x2f\xe0\xd0\x3e\xde\x4d\x27\x36\x24\xe7\xd1\x93\xb0\x2e\xde\x95\x97\x33\x4b\xbe\x5d\xe1\x3c\x25\xdb\x58\x9e\x4e\x28\x73\xa4\x74\xfb\x6c\xe9\x0e\xfa\x79\xa4\xbb\x67\xbb\xe2\xfd\x7f\x1e\x56\xfc\xb3\x5d\x0a\xbe\x3d\xf7\x4b\xe1\xd9\xad\xb1\xee\x2c\x5a\x63\xe1\xac\x0e\xda\x39\x2d\x75\xcf\x76\x35\xf1\xd6\x39\xb4\xe5\x15\x66\xe3\x3e\x9b\xcf\xa6\x93\xfb\xe9\x84\x49\x05\xe7\x33\x28\x8d\x45\x45\x95\xe2\x12\xad\xc8\xd4\xe5\x2d\x4a\x02\x53\xd2\x69\x69\xc8\xf0\x2c\x3f\x83\x05\x94\x86\x04\x71\x06\x0a\x99\x95\xe2\xb4\x7d\x45\x8f\x2f\x16\x20\x78\x13\x64\xd8\x24\xb4\x88\xef\x49\x21\xcb\x1d\x3d\x71\x96\x05\xb8\x7d\x09\x8d\xc4\x2b\x34\x6b\x25\x40\x60\xe7\x26\xae\xdf\xdd\xf4\x13\x72\x47\xe7\x28\xee\xe7\x98\xa7\x10\x73\xc6\xea\xd0\xd8\xa6\xbe\x92\xb9\xcb\xdb\x0c\x50\x29\xfb\x7c\x47\xd6\xa1\x52\xd6\x3a\x56\x17\xaf\x95\xca\xf2\x57\x44\x48\xec\x0b\x1a\xf2\x66\x06\xac\x35\x76\x97\x54\x2c\x73\xd1\x01\x5f\xfc\x39\x87\x2f\xae\x0f\x66\x96\x9f\x5e\xa4\x65\xcf\xc9\x34\x4d\xa8\x1d\xd2\x99\x77\x43\x1f\x83\xc8\x40\xbe\xc4\x64\x7f\xc5\x52\x66\x43\x37\xa6\x15\xef\xc8\xd4\x09\xcf\xd3\x05\xa2\x6c\xf8\x2c\x2d\x75\x5e\x1b\xfa\xd7\x79\xa7\x43\x68\x52\xa7\x93\xd8\x9a\x76\xab\x81\x62\x57\x7d\x97\x37\xef\xe4\x86\xbe\xcf\xa1\x45\x67\xa7\xfd\xe0\x9c\xce\xee\x75\x88\xdd\xce\xd8\xf0\xcd\xa3\xcd\xb1\xab\x1b\x06\x03\x2d\xf7\xc3\xa1\xeb\xf5\x68\xbd\x41\x91\xb1\xba\xe8\xa8\x39\x09\x09\x5d\x51\x3c\x23\x52\x68\x39\x76\x47\xf1\x8c\x48\xd9\x08\x39\x78\x5c\xd0\xb1\xcd\xa0\xd3\x6c\x9f\xa0\xd3\x8c\x9c\x00\x16\x0f\x7b\x62\xcb\xb5\xb6\x99\x98\x8a\x07\xb7\x4c\x56\x91\xe0\x9f\x07\x33\x2b\xcb\x1e\x91\x47\xd9\xf6\x16\x36\x5f\x00\x5d\xbf\x2c\x6e\xf6\x5a\x96\xbf\x72\xf4\x17\x0b\xf8\x2a\xe8\x49\xd7\xb5\x05\x1c\xda\x05\x62\xb6\xe5\xce\xdd\x9d\x7d\x17\x0f\x74\x29\x80\xaa\x14\x70\x81\x40\x03\x30\xac\xc1\x48\xda\x73\x89\x02\x55\x49\xf1\x69\x39\x7f\x94\x0a\xf0\xa6\x6c\x57\x0d\xce\x40\x48\x03\x25\xd8\xb0\xa5\xc6\xb8\xe1\x57\x08\x86\xb7\x58\x9c\xc8\x8f\x05\x69\x79\x3e\x0b\xb1\x69\xeb\x4b\xf1\x4b\xa9\xf4\xb2\x6c\xb2\xce\xef\x7c\xac\x26\x08\x69\x56\xf4\x6e\x36\x8b\xc4\x4b\xd3\x74\xa3\xd9\xcc\xf2\x74\x39\xc7\x95\xdc\xcd\x9c\xe3\xee\xfa\x94\x73\xdc\xcf\xb1\x9c\x43\xcc\x19\xaf\x6f\xec\x85\xb6\xc6\x9b\x7e\x81\x72\xa2\xef\xe2\xd9\x87\x44\xb0\xda\x52\xa1\xf6\xe1\xc4\xeb\x1b\xea\x82\x29\x82\x5d\x4d\x9e\xc7\x05\xf7\x3c\x8c\x6d\xbb\xd2\x45\x76\x1a\x30\x76\xa5\x17\x2e\xf7\xde\x52\x8f\xa1\x1f\xcd\xb9\xb7\x45\x6f\x2a\x19\xf5\x45\xb7\xb6\xbf\x24\x94\xf0\xdf\xb7\xbf\x9e\x58\x66\xea\x64\xfc\x8b\xae\xd1\xbd\x68\xda\x62\x05\xbc\xed\x8d\x52\xdc\x7f\x1e\xa1\xde\xa1\x99\x0e\x67\xdb\x06\xc9\x9f\x94\x43\x76\x01\xa7\x67\x17\xb7\xc6\xe5\xcf\x24\x41\x6b\xca\xa1\x8e\xd7\x62\xe6\x06\x7f\x1e\x34\x3f\x35\x72\xb4\x2c\xdf\x28\xe4\x5c\xb8\x51\x6e\xe6\x07\xb0\x54\xee\x7f\x65\x5e\x87\x3c\xf7\x81\xf7\x88\xf2\xda\xd5\x0d\x5d\x58\x57\xa1\xc9\x50\x90\xbb\x77\x09\xf1\x58\xc4\x1a\xa2\x87\x25\xa4\x9b\xcc\x26\x2d\x28\xc8\x6b\x54\x8a\xd7\x18\xa7\x55\xe9\x6a\x31\x9a\x86\x3c\x52\x89\x95\x59\xee\x22\x66\x9f\x5c\xd4\x33\xd5\x39\xe3\xd3\xdb\xea\x7a\xd3\x78\x56\xc9\x90\xe2\x21\x1c\x14\x15\x79\x8a\xb3\x3c\x42\x98\x36\x47\xb6\x69\x76\x88\xb8\x06\x7a\x01\xe5\x6a\x85\xa2\xce\x3c\x61\xd6\x35\xa2\x49\x80\x67\x79\xee\xd3\xaa\x1f\xdf\xa6\x06\xf8\xe1\xef\x73\x9a\x60\xb3\x4e\x34\xc2\xeb\xe0\xcd\x08\xa3\xe7\xc4\x90\xe3\xa0\x64\x9a\xb5\x46\xad\x19\xbc\x74\x9a\x43\x3f\xfd\x3b\x1f\x1e\xe3\x26\xd6\x4f\x7f\x8e\x67\xec\xd5\x11\x9d\xfb\xa4\xf8\x5e\xb4\xbd\xb4\xe8\x72\x9b\x76\x15\x8c\x5f\xa3\x80\x8b\x35\x63\xa8\x80\xb2\xa1\x2f\x0c\x61\x60\x4d\x19\x6e\x20\x21\xbb\x58\x33\x9f\xce\x6c\xd3\xe9\x88\xb3\x6d\x49\xad\x07\x03\x69\x18\xc5\x59\x41\x33\xd0\xbb\x81\x40\xa5\x52\x87\x60\x49\xd0\xfb\xc2\x41\x2c\x49\xa7\x5b\xf8\xda\xad\x47\xba\xdd\x4d\xd1\x56\x76\x52\x39\xd3\xc2\x19\x33\x1f\xfd\xd2\x7e\x18\x6e\x64\x18\xac\xbb\x4b\x5d\x9a\xe9\x3d\x60\x99\x06\x0f\x4b\x0e\xc3\xf4\x39\x2c\x0d\x04\x9b\xd5\x8d\xa4\xf7\xe2\xab\x97\x75\x77\x44\x57\x0a\x11\x9f\x41\x9b\x84\x8c\x53\x99\xee\x31\x65\xeb\x9b\xa2\xf1\xa2\xd1\xde\xc4\x82\x31\x9d\x4c\xfc\xdd\x38\xd5\xc6\x27\xc6\xf6\x26\xef\xe0\x1e\x41\xb6\xdf\xb9\xd9\xd3\xa3\xdf\x8a\xc4\x6b\xad\xbe\xa4\xf0\x87\xde\x3b\x65\xdd\x1b\x9d\xd8\x2e\xc6\x9f\xdf\xdd\x7c\xfa\xd1\x6c\xb7\x8d\xa8\xf2\xa9\xba\x90\x32\xb6\xbb\x8a\x83\xcc\x05\x1c\x86\xdf\x4e\x22\xa5\x13\x5f\x79\x3f\xcc\x88\xe4\x3f\xc1\x10\xd1\x28\xd7\xa6\x4c\x92\xef\x2a\x73\xe0\xb3\x4e\x78\x70\xd6\x24\x5d\xf9\xbe\x07\x34\x0b\x80\x6c\x2b\x12\x4f\x0d\xfa\xb6\xe2\xf0\xa8\xea\x40\x52\x77\xd5\x87\x67\xd0\x7e\x6b\x5d\xf8\x9c\xc2\x40\x07\xb8\x0f\x8d\xa9\x19\xae\x38\x3c\xb9\xdf\x77\xfa\xd3\x91\x41\x7b\xf7\x49\x34\xd1\xfd\x27\xa7\xd0\x13\xfa\x63\x50\xc3\x7f\x16\x4d\x6d\xf5\x15\xea\x29\x8d\xe5\x0c\xdc\x41\x3d\x41\xba\xf0\x9f\x6f\x13\x4b\xdf\x78\x7d\x06\xa6\x7e\xb2\x5d\x23\x0d\x62\x7b\x33\xd2\x1c\x3e\xd4\x1d\xf6\x4b\x43\xbf\x2e\xf8\x68\x76\x85\xc1\xdd\x45\x1f\x51\x18\x7a\xcd\xe6\xd6\xca\xb0\x3d\x19\x7f\x72\x6d\x18\x4f\xb5\xfb\x65\xda\xed\xee\x10\x0b\xe9\xd6\x1c\x1a\x5e\x14\xed\x79\x28\x15\x6e\x60\x3e\x8a\x5d\xda\xb3\x6d\x85\x6e\x5b\x34\x7f\x22\x70\x63\xb1\xba\x6f\xa8\xc6\x48\x75\x5e\x1a\xbd\x99\x95\x8d\x9b\xa7\xde\xef\x6d\x72\xaf\x7f\xdc\x6a\xf3\xf6\xb0\xde\xdf\xea\xd1\xa0\xdd\x2f\x66\x77\x98\xc3\xc0\x8d\x28\x73\xe8\x5a\xb4\x4e\x6f\xce\xe0\x45\x1c\x70\xc0\xdf\x7f\xdb\xa7\x63\xc1\x64\x71\xb2\x6e\x51\xf1\xca\x47\x6d\x22\xd8\x9e\x23\x66\x20\xaf\x5c\xdf\x97\xce\x46\x8a\x8c\x35\xb2\x34\xdf\x7e\xe3\xac\x7d\x21\xaf\x52\xe6\x34\x7f\xad\x05\xde\xac\xb0\x32\x58\x0f\x86\x3e\x34\x6f\x8a\xa3\xa6\xb9\x9b\x35\xa5\xa3\x26\xfd\x91\x9b\x6a\x09\xc6\x9d\x4e\xaa\xda\x66\xea\x95\x3d\xa9\x2a\x35\x82\x81\xff\x2c\x20\xfd\x0b\x04\xf3\x4f\x38\x3c\x04\x03\xff\x1e\x90\xbf\xfd\x66\x6e\xf3\xd6\x70\xba\xe3\x06\x58\x22\x1f\x17\xf7\x9e\x8f\xcb\x7b\xcf\xb7\x0a\x5c\x77\x12\xc7\x12\x5b\x97\x59\xe0\xa3\x2a\x57\x3a\xfd\xdb\x15\x4f\x2f\x45\xed\x9a\xca\x40\x68\xd1\x2c\x65\x0d\x1f\xb9\x59\x82\xc2\xca\x5e\xde\x6d\x26\x44\xa1\xd7\x0a\x41\x48\x58\x95\x82\x57\x1a\xb8\x00\xdf\xf6\x73\x71\xe9\xd3\x61\x92\xc9\x58\x9d\x7c\xa6\x07\x4f\xcc\xe1\xf4\xac\xfb\xdb\x92\xfb\x1c\x32\x9f\xb4\x12\xf2\x70\xa2\x52\xa3\xbd\xcb\x58\xf1\xde\x5f\x38\x83\x6b\x8a\x5f\xa7\x9c\xbd\x14\x5c\xf7\x92\x18\x0d\xd9\x7a\x2e\xf1\xc5\xbb\x60\x9d\x53\x3e\xce\xc0\x67\x70\x4d\xfd\x22\x0b\x09\x8c\xbc\x90\xea\x84\x6d\x9b\x83\x77\xd5\x45\x30\x60\x36\x40\xd7\x75\x57\x1b\xe0\x3a\xf2\xe7\x42\x99\x0e\x14\x52\x34\x1d\x3d\x80\x49\x5f\x94\x2c\x96\xae\xed\xeb\x88\xcf\x81\x64\xcf\xbe\x1e\x98\x0e\x48\xf4\xdd\xe6\x28\x8e\x29\xf3\x26\x94\xa1\xcd\xdb\x00\x33\x2c\x7c\x2e\x9c\xfd\xf1\x46\x0a\x68\x58\x09\x90\xba\x19\xa8\xc5\x34\xb4\xa2\x09\xfd\x19\x61\x0d\x96\x8e\x00\xcb\x63\x13\xbc\x0b\xda\x68\xc8\x10\x5c\x77\xed\xdd\x80\xd6\x91\x3f\x17\xd8\x5d\xd7\xe1\xcc\xb5\x93\x0e\xbf\x5f\xba\x2b\xf1\xb3\xe0\xe7\xcc\x19\x41\xcf\x29\xb1\x1b\x3b\x67\xc5\x06\x72\xae\x29\xd8\x40\xce\x91\x3f\x17\xb9\x5e\xcf\x93\x38\xa4\xa3\x07\x77\xb4\x4f\xe4\x8d\xae\x59\xe9\x88\xcf\x08\xa5\xb3\x6f\x04\xca\xa5\x6f\x92\x76\x41\xe9\xd5\x1f\x42\xe9\xbb\x8d\x0d\x2c\x3d\xfd\x73\xc1\xec\x77\x53\x09\x9a\x7e\x21\x27\xdf\xf4\x87\x59\x38\x7d\x47\xd4\x51\x9f\x11\x4f\x7f\xec\x08\xa0\xab\xd0\x83\xed\x42\x34\x98\x30\xeb\x35\x60\x71\xf6\x63\x20\x9d\xfe\xe4\xbd\x27\xba\x71\x48\x05\xa6\xf8\x99\x8b\x3a\xcb\x61\xb1\x88\xeb\x6f\x0c\x75\x6a\x13\x03\x0b\x30\xc5\xeb\x06\xdb\xac\xd7\x4a\x98\xe9\xfd\xf4\xff\x01\x00\x00\xff\xff\x31\x4c\x72\xd7\x02\x2f\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12034, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
