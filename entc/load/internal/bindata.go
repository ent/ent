// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xf1\x6f\xdc\xb6\xee\xff\xf9\xfc\x57\xb0\x01\x1a\xd8\xc5\xcd\xd7\x0d\xc3\xf0\xfd\x5e\xdf\x3d\x60\xd8\x5a\xec\xde\x5e\xd3\x62\x6d\xf7\x4b\x51\x74\x8e\x2d\xdf\xa9\xb1\x65\xd7\x92\xd3\xdc\xb2\xfc\xef\x0f\x24\x25\x5b\xf6\xf9\x2e\x4d\xdb\xdc\x2f\xb1\x29\x52\x24\x3f\xa2\x48\x4a\xce\x62\x01\xbf\x54\xf5\xae\x91\x9b\xad\x81\x1f\x1e\x7f\xff\xff\xdf\xd5\x8d\xd0\x42\x19\x78\x96\xa4\xe2\xbc\xaa\x2e\x60\xad\xd2\x18\x7e\x2e\x0a\x20\x26\x0d\x38\xde\x5c\x8a\x2c\x0e\x16\x0b\x78\xbd\x95\x1a\x74\xd5\x36\xa9\x80\xb4\xca\x04\x48\x0d\x85\x4c\x85\xd2\x22\x83\x56\x65\xa2\x01\xb3\x15\xf0\x73\x9d\xa4\x5b\x01\x3f\xc4\x8f\xdd\x28\xe4\x55\xab\x32\x9c\x42\x2a\x62\xf9\xef\xfa\x97\xa7\x67\xaf\x9e\x42\x2e\x0b\xe1\x68\x4d\x55\x19\xc8\x64\x23\x52\x53\x35\x3b\xa8\x72\x30\x9e\x3e\xd3\x08\x11\x07\x41\x9d\xa4\x17\xc9\x46\x40\x51\x25\x59\x10\xc8\xb2\xae\x1a\x03\x61\x30\x3b\x11\x2a\xad\x32\xa9\x36\x8b\x0f\xba\x52\x27\xc1\xec\x24\x2f\x0d\xfe\x69\x44\x5e\x88\xd4\x9c\x04\xc1\xec\x64\x23\xcd\xb6\x3d\x8f\xd3\xaa\x5c\xe4\xd6\x61\xa9\xd2\xf6\x3c\x31\x55\xb3\x10\x8a\xf8\x6f\xe3\x59\xe8\x74\x2b\xca\x64\x21\xb2\x8d\xb8\x0b\x7f\x2e\x45\x91\xdd\x45\x40\xaa\x4c\x5c\x9d\x04\x51\x80\xb0\xbd\x22\x1a\x34\xc2\x2e\x98\x86\x44\x81\x50\x26\xb6\x03\x66\x9b\x18\xf8\x94\x68\xc2\x45\x64\x90\x37\x55\x09\x09\xa4\x55\x59\x17\x12\x17\x47\x8b\x06\x2c\x76\x71\x60\x76\xb5\x70\x53\x6a\xd3\xb4\xa9\x81\xeb\x60\x76\x96\x94\x02\x00\x90\x22\xd5\x06\xe8\xf7\x17\xa2\xb9\x3c\x51\x49\x29\xe6\x55\x29\x8d\x28\x6b\xb3\x3b\xf9\x2b\x98\xfd\x52\xa9\x5c\x6e\x80\x6c\x70\xcf\x96\x39\xa5\xd7\x21\xfb\xd3\x6c\x23\x34\x00\xbc\x7d\xf7\x08\x1f\xfd\xb9\x11\x48\x3d\xe4\x7e\x86\x58\x69\xe2\xa6\x47\x8f\x9b\x60\x1c\xb1\xaf\x11\x29\xa1\x91\x9d\x1e\x3d\x76\xc9\x43\x43\xfe\xdf\xaa\xea\xc2\x1a\xf3\xb2\xd2\xd2\xc8\x4a\x39\xfe\x2d\x0e\x0d\xb9\x5f\x56\x85\x4c\x77\x00\xe7\x55\x55\x00\x0c\x60\xa9\x69\x68\xc0\x7e\x43\xcb\xd5\x4d\x9b\x09\x9d\x36\xf2\x5c\x68\x48\x80\x4c\x87\xda\x0d\xd9\xa8\xe7\xd5\xb6\x6b\xd2\xc9\xf5\xab\xd2\x79\x04\x20\x95\x01\x58\x2c\x80\x31\x21\xd7\xdc\x2c\x3c\x77\x21\xb5\x89\x83\xd9\x73\x79\x25\xb2\xb5\x42\x11\x32\x7a\xb1\x80\xb5\xca\x64\x9a\x18\xa1\x41\xe6\x9e\x00\x46\x4c\x89\xdc\xdf\x49\xc5\x82\x52\xad\xed\xbc\xac\x8b\x48\x43\x5d\x25\x91\x58\x17\xbb\xcb\x06\xed\x07\x27\xd3\xbf\x20\x36\x59\x70\x3f\x34\xf9\xe7\x07\xe8\x2d\x61\xba\x56\x79\xd5\xb3\x3d\x22\xaf\xe3\xd7\xbb\x5a\xd8\x01\x2b\x88\x4a\x87\x82\xaf\x13\x5f\xc1\x41\x8d\x26\x19\x05\xfa\x2b\xf9\xb7\x67\xe9\x23\xa9\xcc\x4f\x3f\x4e\xc8\x69\xf9\xf7\x48\xe1\x53\xd5\x96\xba\x63\x7b\xfb\x6e\xac\xd2\xed\x16\x64\x1b\x4a\xbe\x51\xf2\x63\xdb\x29\xf5\xc3\x74\x20\xd9\x12\xdb\x50\xf4\x4c\x16\x45\x72\x5e\x88\x5b\x44\x95\x65\x1b\x0a\xbf\xa8\x31\x54\x93\xe2\x16\xe1\xca\xb2\x0d\x85\x7f\x15\x79\xd2\x16\xe6\x36\xa3\x33\x66\x9b\x94\xfd\x33\x29\xd0\x6d\xa9\x8c\x68\x30\x93\x5e\xdf\x4c\xca\xbe\xbf\x44\xbe\x11\x64\x75\x96\x18\xe1\x6c\x38\x0c\x19\xb1\xbd\x9f\x34\x62\x5d\x96\xad\xe9\xb0\x3b\x38\x85\x74\x6c\x43\xe9\x3f\x93\x42\x66\x98\xf1\x69\xc9\x69\xb3\x4d\x49\x5f\x76\x6c\xa3\x28\x33\x55\x93\x6c\xc4\xef\x62\x07\xc7\xa2\x53\x33\xdb\xfb\x0b\xb1\x1b\xe7\x34\x9b\x67\xe8\xf7\x68\xf8\xea\xe7\x37\xa6\x8f\x94\x0b\x85\xe4\xcb\x5b\x3c\xd7\x8e\x6d\x24\x4d\xf9\x0e\xb7\x20\xf2\x96\x49\xfd\x96\xcd\x77\x01\xef\xa4\x89\xed\xfd\xde\xc6\xe4\x84\x43\x35\x64\x3f\xdf\x10\xf9\x0b\xd2\x0d\xc9\x4d\x64\x9b\xa1\x49\xfb\xd9\xc5\x79\x31\x62\x3c\x92\x4d\x46\x8c\xe3\xec\xf1\x87\xc8\x59\xf9\x90\xaf\x11\xf9\xfb\x7d\xed\x7f\x88\xdc\xae\x1f\x97\xd4\x9e\xf9\x40\x7e\xb0\x4b\x75\x24\x1f\xac\xd5\xa5\x68\xb4\x18\xb3\x4a\x26\x8f\xd5\x7f\x6c\x65\x23\xb2\x11\x6f\x63\xc9\x13\xab\xc6\x95\x65\x7f\xd9\x98\xfe\x05\xeb\xc6\x82\xfd\xc2\x79\x99\xb0\x0b\xcb\x23\xde\xba\xa6\xc4\xcf\xb7\xb7\x37\x25\x13\xdc\x53\x4d\x89\xb7\x45\xbb\xfd\x79\xcb\xb6\x64\x94\xce\xc4\x27\x5a\xcf\xb4\x11\x54\xb0\x13\xe5\x10\x41\xa3\x18\x16\x7a\xe2\xde\xa2\x36\x55\x13\x07\x79\xab\x52\x27\x19\x8a\x0c\x1e\x21\x47\xfc\x6b\xc7\x11\xd9\x20\xb9\x0e\x66\x4a\xc0\x72\x05\xa7\xf8\x7a\x1d\xcc\x30\x34\x97\x8c\x81\xc8\xe2\xd7\xc9\x66\x8e\xb4\x5d\x2d\x96\x1d\x0d\xa3\x39\x98\xd1\xae\xe8\x88\xf8\x82\x44\x46\x7c\xc9\x44\x7e\x41\xb2\x8d\xa3\x25\x91\xed\x0b\xd2\x5d\xcc\x2c\x91\xee\x5e\x78\x20\xb7\xf3\xd3\x40\x6e\xe7\xbf\x09\x66\x32\x87\x46\xe4\x68\x32\x8f\x3c\xa1\xd7\x07\x2b\x50\xb2\x40\x77\x66\x4a\x20\x19\x56\x9d\xfb\x8d\xc8\x23\x12\x6d\x84\x69\x1b\x05\x4a\xf4\xc8\x72\x63\xb1\x0f\x2d\xb7\x43\x84\x2d\x3f\x4e\x81\x4b\xc2\x61\x9e\xb9\x3e\xc2\x87\x37\xe4\x4e\x75\x0e\xa2\x69\xf0\xfd\x3a\x98\x69\xb2\xfa\x94\xe8\xd7\x03\x00\xe9\x97\xf7\x28\x62\x33\x32\x1c\x41\xca\x7c\xb0\x3a\x6e\xc4\x2e\x11\xb5\x0b\x4b\x7f\x80\x28\xc3\x35\x71\x43\xfd\xc2\xb8\x82\xbf\xec\x6d\x70\xb5\x3d\x98\x75\x15\xbd\x1f\x75\x14\x1c\xb5\xe5\x72\xd9\xcf\xeb\x0a\x28\xaf\x06\xe9\xf6\x0b\xeb\x92\x74\x0f\x4a\x6d\xcf\xd9\xd5\xcf\x65\xe7\x73\x57\x2a\x83\x99\xb7\x7d\x96\x76\xb8\xa7\xe0\x78\x5f\x40\x69\xbc\x10\x2a\xcc\xb3\xb8\xa7\x46\x34\x89\x2b\x41\x9d\x8e\x8e\x42\xc3\x5d\x29\xea\x74\x74\x94\x2e\xf8\x74\x4e\x8b\x01\xab\x3e\xe2\x5c\x5c\xc9\x62\x0e\x79\x69\xe2\xa7\xb8\xe4\x79\x78\x52\x4a\xad\x71\xa3\x53\x6e\x92\x28\x94\x57\x8d\x8d\xa7\x87\x1f\x4f\xe6\x38\x17\x2e\x79\xd4\xcd\x8d\xcd\xe2\x72\x05\xd4\x25\xa2\xfd\xd8\x3d\x46\x4f\x98\xfe\x60\x05\x8f\x49\x9d\xce\x89\x0e\x2b\x38\xc5\x01\x12\xc6\x6c\xca\x8d\xbc\x6d\x4e\x80\xba\x1c\x48\x13\x05\xe7\x02\xe8\x30\x2c\x32\x30\x15\xf1\x6c\x84\x12\x4d\x42\xb1\x8c\x92\xcf\xaa\x06\xc4\x55\x52\xd6\x85\x98\x83\xaa\x0c\x9e\x4d\x5a\x95\x52\x07\x50\xc8\x0b\x01\x46\x96\x22\x3e\xab\x3e\xc5\x64\xe5\x7b\x0a\x6a\xb4\x13\xd3\x57\xfc\x3c\x69\xf4\x36\x29\xc2\x7e\xfd\xa3\x27\xc4\xe0\x21\xa4\xf3\x78\xd0\xa4\xad\xbc\x68\x71\xce\xdb\x28\xa7\xfc\x82\xb2\x7d\x6f\xfe\xe6\xcd\xfa\x57\x38\x3d\xdd\x8f\x30\x9a\xdb\xec\x6a\xb4\xc5\x9e\xeb\x49\xe0\x45\xee\x5b\x13\xcc\x70\x7a\xb3\xab\xe3\xdf\xa5\xca\xc2\x08\x85\x1d\xf7\x33\xdc\xca\xff\xfc\x43\xa3\x67\x6d\xb9\x56\x3c\xfc\xd8\xa3\xbd\x68\x0d\x13\xbf\x77\x44\xa4\x3c\x8e\xe2\x57\x94\xc6\x79\xcc\x19\xdf\xd1\xd0\xb2\x83\x81\x21\xae\x6a\x91\x1a\x8e\x8b\x10\xa1\x0e\x23\x78\xa8\x23\x0a\x8f\xb6\x95\xd9\x70\x11\x4f\xe6\x7b\xd3\xa3\x4f\x37\x7e\x4e\xd3\xf9\x1c\xd5\xf4\x89\x8d\x4b\xe1\x7e\x62\xe3\x93\x1b\x25\x36\x7e\x9c\x4a\x6c\x24\x1c\xca\xec\x0a\x0f\x2c\x99\xb8\x1a\x16\x0e\x9e\xfa\xba\xd3\x7d\x4a\x04\x74\x98\x0a\xa8\xcd\x07\x32\xbb\xa2\xfe\x8b\x52\x10\xd7\xca\x65\x37\xc0\xef\xe3\xe4\x84\x23\x7d\x6a\xf2\x77\x3c\x8e\x0c\xf6\xfb\x8d\xf5\xd4\x06\x9f\xbd\xbb\xe0\x30\xa7\x10\xf7\xee\x42\xba\x03\x01\x3e\x55\x90\xc0\x7f\x5e\xbd\x38\x43\x61\xea\x30\xec\x0e\xc9\x04\xef\x10\x62\xc1\x09\xac\x70\x75\xfe\x01\x97\x8a\xff\x58\x84\x06\x4a\x43\xed\x74\x63\xe3\x62\x35\x45\x10\x9e\xc3\xdb\x77\xe7\x3b\x23\x78\xb3\x78\x55\x80\x8a\x00\xcb\x22\x66\x7c\x59\xb2\x74\xe7\x7e\x7e\x0d\x23\xbf\xc2\x4a\xc5\xb7\x60\xe1\x28\xc6\x59\x24\x8a\x28\x89\x90\x08\xef\x24\xbb\x3b\x75\x8c\x6b\x4e\x07\x76\xc7\xca\x1b\xf3\xc1\xed\xa9\xcb\x3a\xf5\xf0\xe3\x12\x1e\x5e\x62\xa6\xe2\xda\x84\xe2\xd1\xa4\x1a\x5e\xd1\x6f\xaf\x87\x1b\xaf\x4e\x57\x92\x0b\x0a\x2a\xa7\xa8\x33\xe4\x5b\xe8\xc2\xed\x87\xc9\x8d\xd2\x49\xa2\x36\x82\xfa\x2a\xcd\x19\x8c\x83\x19\x56\x90\xd4\xb5\x50\x59\x68\x09\xf3\xbe\xcb\xf2\x76\x49\x18\x45\x16\x26\x7b\xdf\xe4\x3b\x60\xaf\xa7\xee\xd3\x05\xdc\xba\x9d\x13\xd6\x06\xeb\x86\xbb\x1c\xf3\x1c\x59\x3b\x23\xfd\xad\x3f\xe9\xcd\x68\xd1\xe9\xe2\xec\xfe\x63\x8b\x6f\xdc\xbe\xbd\x1e\x2b\x38\xa8\x62\x3a\xb2\x99\xe5\x8d\x2a\x07\xb9\x85\x13\x84\xe6\xfa\x29\x2f\x85\x82\xf3\x36\xcf\x45\x03\x94\x52\x6c\x76\x75\x97\x77\x94\x26\x46\x33\x84\xe7\x6d\x6e\x73\x02\xb6\x87\x4c\x9c\x1f\xca\x0c\x03\x18\xc8\xc2\x6e\x3a\x9c\x68\x0e\xfa\x38\x10\xa2\x69\xfc\x80\xc8\xfb\x70\xd0\x36\xfb\x92\x48\xaf\x23\x8f\x6d\xd1\xd1\xe1\xfe\xcc\xfb\x53\x8f\xca\x8f\x5f\x7d\xba\xac\x43\x4f\xda\xde\x0f\x9a\xca\xa2\x63\x4f\x2c\x7e\xba\xb4\x80\x85\x1a\x2c\x2c\x11\x8c\x53\xd7\x38\xbf\x12\x6c\x68\x1b\xcd\x3e\xd8\x5f\x83\x8c\x77\x64\x77\xf9\x10\xc9\x39\x94\xde\x96\x61\x93\x91\xd7\x1e\xe5\xfc\xf9\x6d\xaa\x2b\xaf\xa2\x1e\xc0\x09\xac\x3a\x98\x48\xc1\x87\xc1\x1a\xe4\xfd\x0a\xcc\xb0\x74\xdb\xd9\xfb\x33\xc5\x70\xf7\x21\xdb\x84\xa2\xa1\x26\x52\x85\x9d\x56\x77\x7b\xb3\x82\x53\xf7\xcc\xfc\xb4\xb9\x6d\x7d\xfe\x30\x27\x92\xbd\x1b\x26\xa2\x69\xb8\xf2\xce\xbc\x8b\xdf\x25\xc8\x79\x3f\xb9\x0b\x1d\x2f\x79\xd8\x52\x0e\x3a\xb7\x4d\xc9\xc1\x94\x7d\x37\xc0\x0e\x25\xe2\x2f\xca\xc4\x34\xeb\xb1\x5c\x7c\x67\xdb\x0e\x66\xd8\xaf\x49\xb1\xa4\x80\x3f\x39\xf8\x46\x72\x9a\xbd\x63\xbc\xf5\xd6\xd1\x84\xce\x36\xfe\xd6\xe1\x59\xf6\x1b\xab\xfb\x86\x91\xb2\xd7\x9c\x0e\x53\x83\x0d\x21\xce\x0d\x7c\x18\xfa\x82\xdc\x30\xe8\x37\x0e\x26\x87\xc3\xbb\xf7\xce\xe9\x61\x7a\xf7\x7e\xde\xe6\xfd\x9c\x45\x3b\xb4\x71\x1d\xb6\xc4\x73\xdb\xfe\xdb\xc3\x7c\x12\x3b\xbf\x6c\x1f\x84\xee\x50\x18\xde\x11\xb8\xa9\x30\xfc\xdc\x28\xec\x82\x90\x03\xab\x0b\xc0\x3c\x29\xf8\xfa\xe8\xe6\xb3\x5d\x1e\xb4\x10\x07\x7d\xb6\xdf\xef\x7c\xa7\x87\xbd\xc7\x67\x78\xad\x63\xfb\x81\x70\x05\x3c\x9d\xe5\x9d\x36\x33\x07\xbe\x27\x8a\xa0\xaf\xbe\xbd\x3d\x32\x87\x07\xdd\xc9\x19\x4f\x9f\x0f\xf8\xf2\x01\x8f\xa5\xa2\x91\xa9\x3d\x67\x7a\x13\xa3\x05\x6a\x0e\xd5\x05\x97\x74\xff\xd0\x1d\x87\x79\x51\x25\xe6\xa7\x1f\xd9\x8b\x07\xd5\x85\x2f\xec\x37\x4e\xad\xe2\x03\xaa\x18\x1d\x44\xf9\xc0\xda\xdd\x61\x2c\xf9\x12\xc3\xbf\xc3\xd0\x9f\xa4\x49\xb7\x60\x58\x7b\x77\x9c\x7f\x82\x9a\xd2\x44\x0b\x30\xf0\x6f\xff\x64\xbf\x56\xe6\xff\xf0\x64\x6f\xe0\x5f\x23\xf2\x4f\x3f\x2e\x31\x93\x8d\xaf\x0d\xf8\x66\x44\x45\xd3\xd3\xbd\x91\xd3\xf3\xbd\x91\x07\x27\x6c\xfb\x19\xa7\x12\x56\x9f\x31\xe0\x53\x93\xd4\xda\xff\x44\x6b\xe9\x89\xca\xb8\x5f\x70\x84\x52\x98\x6d\x95\xc1\x27\x69\xb6\xd0\x88\xb4\xba\xe4\x26\x51\x28\xdd\x36\x02\x54\x05\x75\xa2\x64\xaa\x41\x2a\xb0\x1d\x9d\x54\x1b\x9b\xe6\xbc\x0c\x95\x67\xde\xa7\x2c\xb0\xc4\x08\xde\xbe\xeb\xbf\xa4\xde\x44\x10\xda\x64\xe4\x91\xc7\x27\xce\x4c\x60\x9b\x6a\xaf\x19\x6c\xd3\x77\xc9\x57\x26\x64\x1c\xf6\x7b\x97\x83\xe4\x44\xb7\x37\x83\x90\x78\xf8\xda\x79\xc7\xc6\xdb\x96\x3a\xcf\xe6\x70\x49\xed\x49\xee\x12\x13\x45\x21\xe5\xff\x30\xea\x00\xcd\xb3\xd8\x39\x30\x1f\xa1\xcb\xc5\x7c\x0f\x5c\x26\x7f\x2d\x94\xfe\x59\xd1\x47\x93\xe9\x0e\x4c\xba\x09\x47\x2c\xb9\xcb\xe8\x89\xf7\x81\xe4\xc0\xbf\x01\x98\x0c\xa4\xb0\xcd\xcd\x24\x8e\xbe\xf0\x3e\x94\xae\xef\xd8\x03\xd3\x0d\x7c\x2d\x9c\xc3\x93\xab\x0f\xa8\x1b\x71\x90\xf2\x1d\x11\x62\x2a\xbb\x7f\xc6\xe8\xe8\xf7\x08\xab\xf3\x74\x02\x58\xd9\x75\x65\xc7\xa0\xed\x1c\x19\x83\xcb\x27\x9a\x3d\x68\x99\xfc\xb5\xc0\x1e\x3b\xe9\x84\x7c\x18\x61\xfc\x9e\xf7\xa7\x9d\x7b\xc1\x8f\xdd\x99\x40\x8f\x8d\x38\x8e\x1d\x7b\xb1\x87\x1c\x17\xfb\x3d\xe4\x98\xfc\xb5\xc8\x0d\x7a\x19\x2f\x20\x99\xee\xc2\x11\xdf\x28\x1a\xb9\x09\xe9\x89\xf7\x08\x25\xfb\x37\x01\xe5\xd6\x36\x3f\xc7\xa0\xb4\xe6\x8f\xa1\xb4\xad\xc5\x1e\x96\x96\xfe\xb5\x60\x1e\xed\x92\x42\xdb\xce\x20\xf9\xa5\xd7\x28\xdd\x0b\x78\xd6\xa1\x09\xf4\x6a\xd7\x5d\x1d\x83\xcf\x3a\xd2\xe3\x47\x2e\x76\xf7\xa8\x66\xf0\xb5\x20\x1a\xbc\xd1\xb1\xa1\x6a\xc0\xb8\xaf\x05\xab\xfe\x6b\xc1\x4b\xd3\xf0\x27\x07\x58\x81\x89\x9f\x16\xa2\x0c\x07\x7d\x83\x09\x6e\x82\xff\x05\x00\x00\xff\xff\x36\x3e\x2f\x80\x54\x29\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 10580, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
