// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\x5e\x7d\x8a\x89\x81\x1a\x52\xb0\xd5\xf6\x8a\xa2\xb8\xdb\xdc\x1e\x50\xb4\x29\xea\xeb\xd5\x0d\x9a\xa4\x2f\x41\x90\xca\xd2\x68\x97\xb1\x44\x6e\x49\xae\x63\xd7\xf5\x77\x3f\x70\x86\x94\x28\xad\x76\x9d\x7f\xf6\x4b\xa4\xe1\x0c\x67\xe6\xc7\xe1\xf0\x27\x6e\x16\x0b\xf8\x5e\x6d\x6f\xb4\x58\x6f\x2c\x7c\xfd\xd5\x3f\xfe\xf5\xe5\x56\xa3\x41\x69\xe1\xc7\xa2\xc4\x0b\xa5\x2e\xe1\x4c\x96\x39\x7c\xd7\x34\x40\x4a\x06\xdc\xb8\xbe\xc2\x2a\x4f\x16\x0b\x78\xb1\x11\x06\x8c\xda\xe9\x12\xa1\x54\x15\x82\x30\xd0\x88\x12\xa5\xc1\x0a\x76\xb2\x42\x0d\x76\x83\xf0\xdd\xb6\x28\x37\x08\x5f\xe7\x5f\x85\x51\xa8\xd5\x4e\x56\x6e\x0a\x21\x49\xe5\x7f\x67\xdf\x3f\x3d\x7f\xfe\x14\x6a\xd1\x60\x90\x69\xa5\x2c\x54\x42\x63\x69\x95\xbe\x01\x55\x83\x8d\xfc\x59\x8d\x98\x27\xc9\xb6\x28\x2f\x8b\x35\x42\xa3\x8a\x2a\x49\x44\xbb\x55\xda\x42\x9a\xcc\x4e\x50\x96\xaa\x12\x72\xbd\x78\x6b\x94\x3c\x49\x66\x27\x75\x6b\xdd\x3f\x1a\xeb\x06\x4b\x7b\x92\x24\xb3\x93\xb5\xb0\x9b\xdd\x45\x5e\xaa\x76\x51\xfb\x84\x85\x2c\x77\x17\x85\x55\x7a\x81\x92\xf4\xef\xd3\x59\x98\x72\x83\x6d\xb1\xc0\x6a\x8d\x1f\xa2\x5f\x0b\x6c\xaa\x0f\x31\x10\xb2\xc2\xeb\x93\x24\x4b\x1c\x6c\xcf\x49\x06\x1a\xfd\x82\x19\x28\x24\xa0\xb4\xb9\x1f\xb0\x9b\xc2\xc2\xbb\xc2\x10\x2e\x58\x41\xad\x55\x0b\x05\x94\xaa\xdd\x36\xc2\x2d\x8e\x41\x0d\x1e\xbb\x3c\xb1\x37\x5b\x0c\x53\x1a\xab\x77\xa5\x85\xdb\x64\x76\x5e\xb4\x08\x00\x4e\x22\xe4\x1a\xe8\xef\x0f\x87\xe6\xf2\x44\x16\x2d\xce\x55\x2b\x2c\xb6\x5b\x7b\x73\xf2\x47\x32\xfb\x5e\xc9\x5a\xac\x81\x62\x08\xcf\x5e\xb9\xa4\xd7\xa1\xfa\xd3\x6a\x8d\x06\x00\x5e\xbd\x7e\xec\x1e\xe3\xb9\x1d\x90\x66\xa8\xfd\xa3\xc3\xca\x90\x36\x3d\x46\xda\x04\xe3\x48\xfd\xcc\x21\x85\xc6\xa9\xd3\x63\xa4\x2e\x78\x68\xa8\xff\x93\x52\x97\x3e\x98\x67\xca\x08\x2b\x94\x0c\xfa\x1b\x37\x34\xd4\x7e\xa6\x1a\x51\xde\x00\x5c\x28\xd5\x00\x0c\x60\xd9\xd2\xd0\x40\xfd\x8e\x96\xab\x9b\xb6\x42\x53\x6a\x71\x81\x06\x0a\xa0\xd0\x61\x1b\x86\x7c\xd5\xf3\x6a\xfb\x35\xe9\xec\xfa\x55\xe9\x32\x02\x10\xd2\x02\x2c\x16\xc0\x98\x50\x6a\x61\x16\x9e\xbb\x11\xc6\xe6\xc9\xec\x17\x71\x8d\xd5\x99\x74\x26\x14\xf4\x62\x01\x67\xb2\x12\x65\x61\xd1\x80\xa8\x23\x03\x57\x31\xad\xd3\xfe\x52\x48\x36\x14\xf2\xcc\xcf\xcb\xbe\x48\x34\xf4\xd5\x92\x88\x7d\x71\xba\x1c\xd0\x7e\x71\xb2\xfc\x23\x6a\x93\x0d\xf7\x4b\x93\xff\xe2\x02\xbd\xa7\x4c\xcf\x64\xad\x7a\xb5\xc7\x94\x75\xfe\xe2\x66\x8b\x7e\xc0\x1b\x3a\xa7\x43\xc3\x17\x45\xec\xe0\xa0\x47\x5b\x8c\x0a\xfd\xb9\xf8\x2b\x8a\xf4\xb1\x90\xf6\xdb\x6f\x26\xec\x8c\xf8\x6b\xe4\xf0\xa9\xdc\xb5\xa6\x53\x7b\xf5\x7a\xec\x32\xec\x16\xa7\x36\xb4\x7c\x29\xc5\x9f\xbb\xce\x69\x5c\xa6\x03\xcb\x1d\xa9\x0d\x4d\xcf\x45\xd3\x14\x17\x0d\xde\x63\x2a\xbd\xda\xd0\xf8\xd7\xad\x2b\xd5\xa2\xb9\xc7\x58\x79\xb5\xa1\xf1\x0f\x58\x17\xbb\xc6\xde\x17\x74\xc5\x6a\x93\xb6\xbf\x17\x8d\x4b\x5b\x48\x8b\xda\x75\xd2\xdb\xbb\x49\xdb\x37\x57\x4e\x6f\x04\xd9\xb6\x2a\x2c\x86\x18\x0e\x43\x46\x6a\x6f\x26\x83\x38\x6b\xdb\x9d\xed\xb0\x3b\x38\x85\x08\x6a\x43\xeb\xdf\x8b\x46\x54\xae\xe3\xd3\x92\xd3\x66\x9b\xb2\xbe\xea\xd4\x46\x55\x66\x95\x2e\xd6\xf8\x33\xde\xc0\xb1\xea\x34\xac\xf6\xe6\x12\x6f\xc6\x3d\xcd\xf7\x19\xfa\x7b\x3c\x7c\x8d\xfb\x1b\xcb\x47\xce\x51\x3a\xf1\xd5\x3d\x99\x9b\xa0\x36\xb2\xa6\x7e\xe7\xb6\xa0\xd3\x6d\x8b\xed\x2b\x0e\x3f\x14\x7c\xb0\x26\xb5\x37\x7b\x1b\x93\x1b\x0e\x9d\x21\xfb\xfd\x86\xc4\x1f\xd1\x6e\xc8\x6e\xb2\xdb\xec\x41\x7b\xb0\xd3\x84\x8c\x8e\x18\x1d\xed\x32\x07\x8d\xc6\x1d\xe6\x37\xac\xa7\x4e\xea\xd8\x46\x63\xfd\x66\x3f\xc2\xdf\xb0\x0e\x7a\xfd\x21\xbc\x67\x78\xb0\xb7\xec\x2d\xf4\x91\xbe\x72\x26\xaf\x50\x1b\x3c\x66\x26\x58\x65\x1c\xe2\x9f\x3b\xa1\xb1\x3a\x62\xa7\xbd\xca\xc1\x0d\xf1\xd8\x11\x8a\x3c\x12\xdc\xb3\x19\xb8\xa2\xf8\xd4\xdb\x2f\x29\x96\x7f\x44\x4d\xb1\x61\x5f\x54\x53\x48\x1e\x41\x30\x10\xa6\xf8\x2c\xb8\x9f\x30\x4d\x68\x4f\x11\xa6\x08\x9c\xae\x84\xde\x0b\xa5\x73\x7c\x47\x95\x53\x6a\x24\x32\x51\xc8\x80\x88\x0b\x8a\x61\xa1\x27\xe6\x3d\x5b\xab\x74\x9e\xd4\x3b\x59\x06\xcb\x14\x2b\xbf\x40\x3f\x74\x1a\x99\x2f\xc7\xdb\x64\x26\x11\x96\x2b\x38\x75\xaf\xb7\xc9\xcc\x6d\x8f\x65\x58\x7e\xac\xf2\x17\xc5\x7a\xee\xa4\x37\x5b\x5c\x46\x52\xb7\xab\x92\x19\xed\xda\x48\xec\x5e\x9d\x98\x71\x5f\x06\x31\xbf\xba\x01\x5f\xa3\x4b\x3f\xe0\x5f\xdd\x48\xa8\xc2\x25\x8f\x84\x57\x1e\xaa\x3b\x3f\x34\x54\x07\x3f\x3d\xa6\x4b\x37\xd2\xbf\xce\x93\xd9\x5d\x32\x13\x35\x68\xac\x5d\x76\x6c\xf6\x84\x5e\x1f\xad\x40\x8a\xc6\x65\x3e\x93\xe8\xc4\xb0\xea\x90\xd2\x58\x67\x2c\x8f\x96\x6b\x05\xac\x17\xc9\x68\x7a\x8d\x76\xa7\x25\x48\xec\x17\x8a\x39\xd4\xfe\x4a\x31\xf3\xa3\xa5\xe2\xc7\xa9\xb5\x22\xe3\xb4\xae\x02\x65\x8a\x57\x2b\x65\x52\x3e\x07\xd4\xda\xbd\xdf\x52\x76\xa8\xb5\xcb\xae\xae\xf2\xa7\x5a\xa7\xd9\x13\x12\x44\xf9\x85\x08\x45\x33\x87\xba\xb5\x4e\x4b\xe9\x3a\xe5\xfa\x84\x2f\xfe\x5c\xc2\x17\x57\x27\x73\x67\x4f\x88\x3a\xf3\x8c\x52\x33\x84\xda\x29\xf9\xbc\x1d\xad\x33\x40\x67\x40\x2b\x5a\xab\xe1\x88\x93\xcc\x47\x85\xc4\x23\xbe\x96\x88\x75\x2d\xe3\x01\x92\x8c\x0b\x87\x87\xfa\xda\x09\xbc\x69\xd9\xc7\x10\x28\x52\x32\xeb\x88\x51\x3f\x1a\x24\x6e\xd4\xb3\x8e\x65\x3f\x6f\xe0\x21\x8c\x16\xf9\x8e\xf9\xc9\x92\x7c\x0f\x18\x4b\xaf\xd9\xd1\x90\x65\x97\x73\xc7\x38\x46\x55\xc9\xc3\x83\xc2\x8c\x78\x08\x8d\x37\x28\xd3\xba\xca\x7b\x69\x46\x93\x84\x93\xbc\xf3\xd1\x49\x68\xb8\x3b\xd1\x3b\x1f\x9d\xa4\x2b\x7e\x53\xd3\x62\xc0\xea\xfe\x8a\x68\x85\x31\xae\x27\x51\x1b\x15\xce\xa8\x56\x1a\x42\x9d\x9c\xcc\xdd\x5c\x6e\xc9\xb3\x6e\x6e\xc7\xb9\x97\x2b\x20\xb2\xed\xe2\x77\x24\x3c\x7b\xc2\xf2\x47\x2b\xf8\x8a\xdc\x99\x9a\xe4\xb0\x82\x53\x37\x40\xc6\xae\xf1\xf3\xf7\x90\xe7\x78\x40\x64\x11\xca\x42\xc2\x05\x02\xdd\x29\x60\x05\x56\x91\xce\x1a\x25\xea\x82\xf6\x89\xb3\xfc\x51\x69\xc0\xeb\xa2\xdd\x36\x38\x07\xa9\xac\xfb\xc4\xdb\xc9\x92\x88\x54\x23\x2e\x11\xac\x68\x31\x3f\x57\xef\x72\x8a\xf2\xcd\x3c\xec\x11\xd7\x69\xf3\x5f\x0a\x6d\x36\x45\x93\xf6\xeb\xef\xf7\x4c\x84\x90\xa9\xf3\x01\xd7\x5d\x45\xd5\x12\x6f\x7b\x53\xcf\x9d\x4d\xbf\xf7\xf9\xf0\xd9\xdf\xfb\xfc\x1d\x47\x7b\x9f\x1f\xa7\xf6\x3e\x19\xa7\xa2\xba\x76\x9f\x2f\x15\x5e\x0f\x5b\x35\x4f\x7d\xdb\xf9\x3e\x25\x81\x8b\x96\x8e\x2c\x5f\xd6\xa2\xba\x26\x36\x46\x3b\x89\x4f\xa7\x65\x37\xc0\xef\xe3\x3d\xe6\x46\xfa\x1d\x16\x17\xae\x1b\x19\xf5\x53\xce\xd4\x63\xe8\x6f\x32\x78\xb5\x68\xa5\xa2\x9b\x91\xee\xf3\xc0\x3d\x29\x28\xe0\xbf\xcf\x7f\x3d\x77\xc6\x74\xa6\xfb\x85\xae\x90\x17\x9a\x54\xdc\x04\xde\x58\x5d\xbc\xc5\xd2\xfa\x7f\x3c\x42\x03\xa7\xa9\x09\xbe\x1d\x55\xf0\x9e\x32\x48\x2f\xe0\xd5\xeb\x8b\x1b\xcb\x7d\x2c\x6a\x94\x86\x7a\x19\xdb\x3a\xcc\xf8\xea\x64\x19\x6e\x01\xf8\x35\xcd\xe2\xf3\x4c\x48\xbe\x13\x4b\xfd\x4d\x16\x1d\x78\xbf\xd6\xde\x73\x96\xd1\x5e\x20\x93\xbb\xb8\x11\x9b\xdc\xad\x39\x7d\xbe\x07\xd5\xf7\xee\xc9\x3e\xa9\xae\x29\x9b\x71\x4f\x1e\xbb\xe1\x15\xfd\xfc\x7e\x98\xea\x74\xbe\x8a\x1a\xa9\xa8\x82\xa3\x2e\x90\xcf\xe1\xcb\x35\x19\xb7\x47\x9d\x27\x5d\xc8\x35\x12\x93\x31\xbc\x11\xb9\x98\x61\x05\xc5\x76\x8b\xb2\x4a\xbd\x60\xde\xf3\x9a\x68\x97\xa4\x59\xe6\x61\xf2\xb7\x4f\x71\x02\xfe\xb2\xea\x21\x53\x70\x5b\xb7\x4b\xc2\xc7\xe0\xd3\x08\x57\x65\x51\x22\x67\x21\xc8\x78\xeb\x4f\x66\x33\x5a\x74\xba\x46\x7b\xf8\xda\xe2\xfb\xb7\xcf\xef\xc7\x1b\x0e\x9a\xb1\xc9\x7c\x67\x79\x29\xdb\x41\x6f\xe1\x06\x61\xf8\x18\x10\x57\x28\xe1\x62\x57\xd7\xa8\x81\x5a\x8a\xef\xae\xe1\x2a\x8f\xda\xc4\x68\x86\xf4\x62\x57\xfb\x9e\xe0\x18\x14\x0b\xe7\x87\x3a\xc3\x00\x06\x8a\xb0\x9b\xce\x4d\x34\x07\x73\x1c\x08\xd4\x3a\x2e\x88\xba\x2f\x07\xe3\xbb\x2f\x99\x44\xb4\x2d\xf7\x07\xa0\x99\xa0\x6e\xfb\x53\xbb\xb9\xa3\xe3\x27\x3e\x7d\xba\xae\x43\x4f\xc6\xdf\x16\x5a\xe5\xd1\xf1\xdf\x08\x71\xbb\xf4\x80\xa5\x06\x3c\x2c\x19\x8c\x5b\xd7\xb8\xbf\x12\x6c\x2e\x36\x9a\x7d\xb0\xbf\x06\x1d\xef\xc8\xee\x8a\x21\x12\x73\x68\xa3\x2d\xc3\x21\x13\x29\x77\x1f\xda\xc4\x2c\xa6\x7b\x70\x7b\xdd\xf5\xdf\x64\x36\xf3\x9f\x5a\x71\x34\xbe\x31\xb6\xd7\x59\x0f\xf7\x04\xb2\x43\xfa\xe3\xbc\x77\x75\x2b\xa3\xaa\x75\xf1\x52\xc0\x6f\x07\x6b\x5a\xf7\x2b\x3a\x73\x54\xc0\xfb\xef\x69\xfc\x70\x37\x3b\xb5\x89\x50\x3e\x34\x16\x0a\xc6\x51\x94\xee\xf6\x68\x05\xa7\xe1\x99\x67\xa4\x76\xe2\x19\xc1\xdb\x39\x89\xfc\xdd\x34\x09\xad\xe6\xb3\x7e\x16\x5d\x3c\x2f\x41\xcc\xfb\xc9\x43\xb1\x46\xed\xca\x93\x07\x30\x75\x00\xe4\xd0\x21\xf1\xb9\x41\x3f\x74\x38\x7c\xd4\xe9\x40\xb3\x1e\x3b\x1f\x1e\x20\xfa\x83\xe7\xc2\xa7\x1c\x0c\xe4\x80\x7f\x36\x89\xd3\xe0\xc3\xe1\xb3\xd7\x7d\x1f\x3f\xb9\x0c\xd1\xf3\x2f\x3a\x51\xec\x3f\x71\x40\x9f\xb1\x1e\xb3\x71\xd7\x1b\xb6\x3c\x5f\xa8\xdc\xf3\xf8\x5b\xe5\x23\x7a\xde\x80\x47\x1d\x6c\x7a\x87\xfb\xcc\x07\xb7\xbd\xe9\x2e\xf2\x7e\x4d\xe4\xf0\xb2\x76\x67\xc4\xc1\xf6\x10\xb0\x25\x9d\xfb\x76\xf9\x1e\xe6\x93\xd8\xc5\x74\xe4\x20\x74\x87\x0a\xf5\x03\x81\x9b\x2a\xc3\xf7\xad\xc2\xae\x08\xb9\xb0\xba\x02\xac\x8b\x86\xaf\x9f\xee\xde\x3b\xe5\x01\x35\x3a\x98\xb3\xff\x95\x32\x4e\x7a\xc8\xa9\xde\x23\x6b\x93\xfb\x9f\x41\x57\xc0\xd3\x79\xdd\xe9\x30\x6b\xe0\x2b\xa2\x0c\x7a\x56\xd1\xc7\x23\x6a\x78\xd4\x7d\xd8\xc2\xdf\x7f\xbb\xb7\x33\x59\xab\xfc\x7c\xd7\xa2\x16\x65\x9a\x8d\xf8\x0c\x45\x20\xe7\xa0\x2e\x99\xaa\xc4\xdf\xc4\x79\x5a\x37\xaa\xb0\xdf\x7e\xc3\x59\x3c\x52\x97\xb1\x71\xdc\x5f\x76\x12\xaf\xb7\x58\x5a\xac\x46\x1f\xfb\x74\xcf\xd0\x5d\x31\x2c\xf9\x8e\x21\xbe\x62\x30\xef\x84\x2d\x37\x60\xd9\x3b\x85\xea\xce\xff\x27\xce\x53\x59\x18\x04\x0b\xff\x59\x41\xfc\xdb\xa2\xfd\x27\x9c\x9e\x82\x85\x7f\x8f\xc4\xdf\x7e\xb3\x74\x9d\x6c\xfc\x55\xcf\x17\x17\x32\x9b\x9e\xee\xa5\x98\x9e\xef\xa5\x38\x38\xe1\xae\x9f\x71\xaa\x61\xf5\x1d\x03\xde\xe9\x62\x6b\xe2\x1f\xa2\xbd\xbc\x90\x15\xf3\xa0\x20\x68\xd1\x6e\x54\x05\xef\x84\xdd\x80\xc6\x52\x5d\x31\xf9\x45\x69\x76\x1a\x41\x2a\xd8\x16\x52\x94\x06\x84\x04\xcf\x54\x85\x5c\xfb\x36\x17\x75\xa8\xba\x8a\x7e\xb0\x03\x2f\xcc\xe0\xd5\xeb\xfe\xf7\xe2\xbb\x0c\x52\xdf\x8c\x22\xf1\xf8\x4b\xba\x42\x47\xbf\xdd\xf4\xbe\x5e\x44\x0d\x57\xb4\x2f\x39\x38\xc7\x63\xaf\x06\xcd\x89\x2e\x57\x06\x25\xf1\xc5\x8b\x90\x1d\x07\xdf\xdd\x41\xce\xe1\x8a\x28\x4e\x1d\x1a\x13\x55\x21\xf5\x7f\xc7\xf4\x42\x75\x55\x79\x48\x60\x3e\x42\x97\x09\xc1\x1e\xb8\x2c\xfe\x54\x28\xe3\x6f\xe0\x18\x4d\x96\x07\x30\xe9\x4e\xdd\x61\xc9\x4c\xa5\x17\x3e\x04\x92\x83\xfc\x06\x60\x32\x90\xe8\x09\xd2\x24\x8e\xb1\xf1\x3e\x94\x81\x99\xec\x81\x19\x06\x3e\x15\xce\xe1\x17\x79\x0c\x68\x18\x09\x90\xf2\xdd\x97\xc3\x54\x74\xff\xe5\xa4\x93\x3f\x20\xac\x21\xd3\x09\x60\x45\xc7\xdb\x8e\x41\xdb\x25\x32\x06\x97\xbf\xd4\xf6\xa0\x65\xf1\xa7\x02\x7b\xec\x0b\x2e\x65\xba\xc7\xf8\xfd\xd2\x7f\xc5\x3d\x08\x7e\x9c\xce\x04\x7a\x1c\xc4\x71\xec\x38\x8b\x3d\xe4\xf8\xb0\xdf\x43\x8e\xc5\x9f\x8a\xdc\x80\xcb\x44\x05\xc9\xf2\x50\x8e\xee\x8d\xaa\x91\x49\x48\x2f\x7c\x40\x28\x39\xbf\x09\x28\x37\x9e\xfc\x1c\x83\xd2\x87\x3f\x86\xd2\x53\x8b\x3d\x2c\xbd\xfc\x53\xc1\x3c\xca\x92\x52\x4f\x67\x9c\xf8\x59\x44\x94\x1e\x04\x3c\x9f\xd0\x04\x7a\xdb\xc0\xae\x8e\xc1\xe7\x13\xe9\xf1\xa3\x14\xbb\xbb\x09\x0b\xf1\xed\x44\x36\x78\xa3\xcf\x06\xa5\xc1\xe6\x3f\x0b\x59\xa5\x19\xac\x56\xdd\xf8\x33\x4b\xb4\x6c\x66\x61\x05\x36\x7f\xda\x60\x9b\x0e\x78\x83\x4d\xee\x92\xff\x07\x00\x00\xff\xff\x43\x01\x91\xe2\x3a\x2a\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 10810, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
