// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x6d\x6f\xe3\x36\xf2\x7f\x6d\x7f\x8a\x69\x80\x2e\xac\x85\xab\xf4\x5f\x14\xc5\xff\xbc\xe7\x03\x7a\xed\x16\xcd\xf5\x36\x5d\x74\x77\xfb\x26\x08\x52\x46\x1a\x25\xdc\x48\x94\x4b\xd2\xd9\xa4\x69\xbe\xfb\x81\x33\xa4\x44\xc9\x92\xed\xcd\xd3\x9b\x58\x43\xce\x70\xe6\xa7\x79\xe2\xd8\x87\x87\xf0\x43\xbd\xba\xd5\xf2\xe2\xd2\xc2\x37\x5f\xff\xdf\x3f\xbe\x5a\x69\x34\xa8\x2c\xfc\x24\x32\x3c\xaf\xeb\x2b\x38\x52\x59\x0a\xdf\x97\x25\xd0\x26\x03\x6e\x5d\x5f\x63\x9e\x4e\x0f\x0f\xe1\xfd\xa5\x34\x60\xea\xb5\xce\x10\xb2\x3a\x47\x90\x06\x4a\x99\xa1\x32\x98\xc3\x5a\xe5\xa8\xc1\x5e\x22\x7c\xbf\x12\xd9\x25\xc2\x37\xe9\xd7\x61\x15\x8a\x7a\xad\x72\x27\x42\x2a\xda\xf2\xdf\xa3\x1f\x5e\x1f\xbf\x7b\x0d\x85\x2c\x31\xd0\x74\x5d\x5b\xc8\xa5\xc6\xcc\xd6\xfa\x16\xea\x02\x6c\x74\x9e\xd5\x88\xe9\x74\xba\x12\xd9\x95\xb8\x40\x28\x6b\x91\x4f\xa7\xb2\x5a\xd5\xda\xc2\x6c\x3a\x39\x40\x95\xd5\xb9\x54\x17\x87\x1f\x4d\xad\x0e\xa6\x93\x83\xa2\xb2\xee\x9f\xc6\xa2\xc4\xcc\x1e\x4c\xa7\x93\x83\x0b\x69\x2f\xd7\xe7\x69\x56\x57\x87\x85\x37\xf8\x10\x15\x6d\x1b\x59\x3a\x34\xd9\x25\x56\x62\xf7\x8e\x43\xcc\x2f\x70\x8f\x6d\x85\xc4\x32\xdf\x63\x9f\x54\x39\xde\x1c\x4c\x93\xa9\x03\xed\x1d\xd1\x40\xa3\x7f\x5d\x06\x84\x02\x54\x36\xf5\x0b\xf6\x52\x58\xf8\x24\x0c\xa1\x82\x39\x14\xba\xae\x40\x40\x56\x57\xab\x52\xba\x57\x63\x50\x83\x47\x2e\x9d\xda\xdb\x15\x06\x91\xc6\xea\x75\x66\xe1\x6e\x3a\x39\x16\x15\x82\xff\x33\x56\x4b\x75\x01\xfd\xbf\x3f\x1c\xb4\x8b\x03\x25\x2a\x9c\xd7\x95\xb4\x58\xad\xec\xed\xc1\x1f\xd3\xc9\x0f\xb5\x2a\xa4\xdf\xef\xd4\x8a\x9f\xbb\xbc\x19\xad\x74\xb9\x5f\xe7\x17\x68\xfc\xb6\x93\xd3\x97\xee\x71\xe4\x64\x87\xb1\xe9\x32\xff\xe4\xf0\x34\x0d\x33\x3d\x0e\x33\x13\xf2\x3d\xee\x23\x87\xb2\x3f\xfc\xe4\xf4\x25\x3d\x0e\x73\x4b\xde\xd9\x65\xff\xb9\xae\xaf\x22\xcd\xdf\xd6\x46\x5a\x59\xab\x01\xf6\x4b\xb7\xb3\xcb\xfc\xb6\x2e\x65\x76\xbb\x0f\xf3\x8a\x76\x76\xb9\xbf\x57\xaa\xb6\xc2\x31\x18\xa8\xc4\xea\x84\x5f\xd9\xa9\x54\x16\xb5\xf3\xa7\xbb\xfb\xc0\x2d\xda\x9d\x1d\x11\xf7\xe4\x5a\xcd\xb1\x39\x9a\x4c\xcb\x73\x34\x20\x60\x15\x88\x3e\x32\xd9\x27\xbd\xe7\x34\x1c\xad\xef\x44\xb8\x49\x65\x01\x0e\x0f\x81\x49\x9e\x9f\xa0\x3f\x74\x18\x40\x29\x8d\x4d\xa7\x93\x37\xf2\x06\xf3\x23\x32\xf6\xbc\xae\x4b\xcf\x21\x33\x61\xd1\x80\x2c\xa2\x53\xa1\x3e\xff\x88\x19\xbb\x77\xe5\xb8\xbe\x92\x8a\x05\x48\x15\x0e\xe1\x23\x89\x04\x32\x3e\xb8\x22\x12\x9f\xc9\xf6\xb2\x83\x6c\x46\x12\xd3\x1f\x10\x48\xcc\x38\x1c\x47\xa3\x91\x34\x1e\x4a\x47\xaa\xa8\xdb\x6d\x2f\x09\xb9\xf4\xfd\xed\x0a\x3b\x0b\x9e\xdd\x29\xd0\x65\x7f\x2f\xe2\xc3\x76\x9c\x6e\x45\x2f\x12\xdf\xc9\xbf\x22\xdd\x5f\x4a\x65\xbf\xfb\x76\x94\xdb\xc8\xbf\x7a\x87\xbf\x56\xeb\xca\x34\xdb\x4e\x4e\x19\x94\x3b\x38\x9e\xc3\xef\x41\x97\xc6\x2d\xd1\x6d\xee\xf2\x7f\x50\xf2\xcf\x75\xa3\x00\xf9\xc5\xc0\x9f\xe7\x5f\xd3\xe6\xae\x80\x63\x59\x96\xe2\xbc\xc4\xbd\x04\x28\xbf\xb9\x2b\xe2\xd7\x95\xf3\x6d\x51\xee\x25\xa2\xf6\x9b\xbb\x22\x7e\xc4\x42\xac\x4b\xbb\x9f\x19\x39\x6f\x1e\x94\xf0\xbb\x28\x1d\x1c\x71\x4c\x8f\x4b\x38\xbb\x76\xbb\x7b\x80\xae\x72\x61\x31\xe8\xb3\x0b\x50\xda\x7c\x36\xa8\xd0\x51\x55\xad\x6d\x83\xec\x0e\x41\x32\x6c\xee\xca\xf8\x5d\x94\x32\x17\xb6\xd6\xe4\x22\x14\xb4\xe3\x32\xae\x9b\xcd\x3d\x0f\xb5\xb5\x16\x17\xf8\x0b\x52\xe2\xdc\xe1\xdf\x86\x37\x9f\x5d\xe1\x6d\x3f\xf5\xc6\xb9\x76\x30\xf5\xc6\xd9\x97\x57\x7b\x8a\xa0\x72\xe4\xeb\xbd\x10\x31\x61\x73\x4f\x06\x25\x38\x17\xdc\x6e\x6f\x94\xc5\x3b\x76\x05\x19\xb4\xf9\x6c\x33\xe4\xe3\x4a\x00\x63\xb5\x60\xbf\x62\x40\xa5\x77\x33\x37\x12\xf9\x01\xa9\x91\xf8\x9e\xa6\xc3\x08\x20\xed\xe6\xdd\x9e\x13\x77\xf0\xf6\x13\xe2\x6f\x58\x34\x5a\x6f\x67\xd5\x58\x9c\x6d\xaa\xfd\x1b\x16\xcd\xc6\xc1\xc6\x26\xe6\x1f\x4f\x86\x23\xee\xb5\x25\x13\xfe\x5b\xe6\x32\x6c\xdb\xce\x7d\x2e\x73\xd9\x2f\x41\xd7\xa8\xcd\x56\xc7\x6e\x9a\x22\xda\xd9\xb7\xf9\xcf\xb5\xd4\x98\xef\x66\xd7\x7e\xe7\x78\x88\xbf\x74\x1d\x5f\xda\x0d\xfa\x3d\xe2\xfb\xa9\x9a\x23\xee\x2f\x36\x03\x82\xe9\x0f\x88\x08\x66\x6c\x43\x22\x7a\xc9\x0d\x54\x5b\xde\x6a\xd4\x29\x9f\x84\x24\xb1\x57\x6b\xdc\xdf\x3d\xd4\x0b\x47\x28\x37\xae\xbe\x03\x68\x46\xe9\x18\x3f\x91\x6b\x67\x1a\xa9\x7d\x13\x2a\x20\xe2\x94\x62\x58\xe8\x13\xb7\x98\x2b\x5b\xeb\x74\x5a\xac\x55\x16\x38\x67\x98\xfb\x37\xfd\x63\xb3\x23\xf1\xf1\x72\x37\x9d\x28\x84\xc5\x12\x5e\xb8\xc7\xbb\xe9\xc4\x85\xf3\xa2\xf1\x24\xcc\xd3\xf7\xe2\x62\xee\xc8\xb7\x2b\x5c\xc4\x64\x97\x07\xa6\x13\xca\x3a\x31\xdd\x3d\x3b\x3a\x43\xbf\x68\xe8\xfc\xec\x56\x5c\xec\xc4\x1c\xee\xd9\xd1\x7d\x5c\x2c\x02\xdd\x3f\xbb\xa5\xe0\xf3\x0b\xbf\x14\x9e\x79\xad\x68\x75\xa0\xb5\x22\xe8\xd0\x42\xbe\xa0\xa5\xf6\xd9\xad\x46\x5e\xbc\x80\x4a\x5c\xe1\x6c\xd8\x97\x93\xf9\x74\x72\x3f\x9d\x14\xb5\x86\xb3\x39\x08\xeb\xd0\xd2\x42\x5d\xa0\x13\x19\x87\x82\x43\x4f\x61\x2a\xf2\xbc\xa5\xce\x84\x4d\x88\x5d\x16\xa0\xb1\x70\xbc\xac\xe3\x2b\x7a\xfc\x62\x09\x4a\x96\x81\xd3\xa5\xb3\x65\xf3\xd6\x34\x16\x09\xd3\x23\xd7\x59\x02\xef\x8b\x68\x24\x5e\xa3\x5d\x6b\x05\x0a\x5b\xa7\xe1\xce\x79\xd3\x6b\xc8\x39\xd9\x6d\xf8\xe3\x90\xdf\x10\xf3\xac\xc8\x43\x8b\x1c\x7b\xce\x8c\xaf\x81\x73\x40\xad\xdd\xf3\x1d\x59\x87\x5a\x3b\xeb\x8a\x3c\x7d\xad\xf5\x2c\x79\x45\x84\xc8\xbe\xa0\xa1\x2c\xe7\x50\x54\xd6\xed\xaa\x75\x31\xe3\x58\x81\x2f\xff\x5c\xc0\x97\xd7\x07\x73\xc7\x4f\xaf\xcf\xb1\x33\x72\x86\x50\x7b\x41\x67\xde\xf5\x3d\x0e\x1a\x06\xf2\xa0\xa2\xee\xae\x38\xca\xbc\xef\xd4\xb4\xe2\xdd\x9a\x7a\xea\x45\xbc\x40\x94\x0d\x0f\xa6\xa5\xd6\x87\x43\x27\xbc\x68\x75\x08\xed\xee\x74\xd2\x34\xb9\xed\x6a\xa0\xb8\x55\xdf\x2f\x2e\x5a\xb9\xa1\x83\x64\xb4\xe8\xec\xb8\xb3\x5c\xd0\xd9\x9d\x5e\xb3\xdd\xd9\xb4\x8e\x8b\xc6\xe6\xa6\x3f\xec\x87\x00\x2d\x77\x83\xa0\xed\x1a\x69\xbd\x44\x35\x2b\xf2\xb4\xa5\x26\x24\x24\xf4\x57\xcd\x19\x0d\x85\x96\x9b\x3e\xab\x39\xa3\xa1\x6c\x04\x1a\x3c\x2c\xd4\x8a\xcd\x50\x33\xc5\x78\xa8\x99\x82\x5e\x3d\x2c\x77\xfb\x5f\x25\x8d\x71\xd9\x98\x0a\x88\x74\x4c\xee\xf8\xe0\x95\x07\x73\x27\xcb\x39\x58\x2b\xdb\xdd\xe2\x16\x4b\xa0\xeb\x9b\x43\xcb\x5d\xeb\x92\x57\x4c\xff\x62\x09\x5f\x07\xed\xe8\xba\xb7\x84\x17\x6e\x81\x98\x5d\xc9\xe3\xbb\xb7\xbf\x05\x00\x5d\x2a\x20\x13\x0a\xce\x11\x68\xc4\x86\x39\xd8\x9a\xf6\x5c\xa0\x42\x2d\x28\x2a\x1d\xe7\x4f\xb5\x06\xbc\x11\xd5\xaa\xc4\x39\xa8\xda\x82\x00\x17\xac\xd4\x58\x97\xf2\x0a\xc1\xca\x0a\xd3\xe3\xfa\x53\x4a\x5a\x9e\xcd\x43\x44\xba\x1a\x93\xbe\x11\xda\x5c\x8a\x72\xd6\x7a\x9b\x8f\xd0\x08\x21\x53\xa4\x9d\x9b\xd1\x32\xf2\xcd\x38\xc9\x98\x62\xee\x78\xda\x4c\xc3\x65\x77\x33\xd3\xf0\xac\x80\x32\x0d\x7f\x1c\xca\x34\xc4\x3c\x93\xf9\x8d\xbb\x10\xe7\x78\xd3\x2d\x52\x2c\xfa\xae\x39\xfb\x05\x11\x9c\xb6\x54\xac\x7d\x10\xc9\xfc\x86\xba\x68\x8a\x5b\xae\xcb\x8b\x66\x81\x9f\xfb\x11\xed\x56\xda\x78\x8e\xc3\xc4\xad\x74\x82\xe4\xde\x5b\xea\x31\xf4\xa3\x3d\x7e\x5b\xf4\xa6\xa2\x51\x61\xe3\xcc\xee\x53\x0d\x02\xfe\xf3\xee\xd7\x63\xc7\x4c\xdd\x8c\x7f\xd1\x39\xf2\x8b\xa6\x2d\x4e\xc0\xbb\xce\x28\x86\xff\x79\x84\x3a\x87\xce\x4c\x38\xdb\x35\x49\xfe\xa4\x04\x66\xe7\x70\x72\x7a\x7e\x6b\x39\x6b\x46\x69\xd9\x50\xe6\x64\x5e\x87\x19\x0f\x0e\x3d\x68\x7e\xea\xc4\xb4\x59\xb2\x51\xcc\xa5\xe2\x61\xf1\xcc\x8f\x78\xa9\xe4\xff\x5a\x78\x1d\x92\x84\xa2\x82\xf9\x3e\xb3\x94\xb6\xd5\xc2\xa4\xce\x55\x68\xb2\x14\xe4\xee\x5d\x38\x3c\x16\x4d\xe5\x30\xfd\xc2\xd1\x4e\x76\xa3\x36\x14\xea\x6b\xd4\x5a\xe6\xd8\x4c\xbb\xe2\xd5\x74\x30\xf9\x78\xa4\x22\x2b\x67\x09\x47\xcc\x78\x06\xea\x18\xc8\x2e\xf8\xf4\x16\x72\x57\xda\x9c\x25\x0a\xa4\x28\x08\x07\x35\x8a\x3c\xc5\x59\x1e\x17\x8c\xdb\x1f\xd7\x2e\x33\x0e\xdc\x3a\x2f\x41\xac\x56\xa8\xf2\x99\x27\xcc\xdb\x16\x34\x0a\xeb\x59\x92\x78\x98\xfc\xd0\x37\x36\xc0\x8f\x8c\x9f\xd3\x04\x97\x6b\x1a\x23\xbc\x0e\xde\x8c\x30\xb0\x8e\x0c\x39\x0a\x4a\xc6\xb9\x6a\xd0\x9a\xde\x4b\xa7\xe9\xf5\xd3\xbf\xf3\xfe\x31\x3c\xe7\x7e\xfa\x73\x3c\x63\xa7\x7a\x98\xc4\xa7\xc2\x0f\xaa\xea\x24\x43\xce\x68\x86\xeb\x96\xbc\x46\x05\xe7\xeb\xa2\x40\x0d\x94\x03\x7d\x39\x08\x63\x6e\xca\x6b\x3d\x09\xb3\xf3\x75\xe1\x93\x98\x6b\x30\x99\x38\x1f\x4b\x65\x1d\x18\x48\xc3\x46\x9c\x13\x34\x07\xb3\x1d\x08\xd4\x3a\x76\x88\x22\x0a\x75\x5f\x2e\x88\x25\xea\x6a\x53\x5f\xb1\xcd\x40\x67\xbb\x29\xda\xc9\x8e\xea\x65\x5c\x2e\x9b\x7c\x47\x9f\x8c\x1f\xa1\xdb\x3a\x8c\xe3\xf9\x3a\x17\xe7\x77\x0f\xd8\xcc\x80\x87\x25\x81\x7e\xd2\xec\x17\x04\x82\xcd\xe9\x46\xd2\x3b\xf1\xd5\xc9\xb5\x5b\xa2\x2b\x86\x48\xce\xa1\x8a\x42\x86\x55\xa6\x3b\x8b\xa8\x7c\x2b\x34\x5c\x2a\xaa\x9b\xa6\x4c\x4c\x27\x13\x7f\x2b\x8e\xb5\xf1\x89\xb1\xba\x49\x5a\xb8\x07\x90\xed\xf6\x6b\xee\xf4\xc6\x6f\x55\xe4\xb5\x4e\x5f\x52\xf8\x63\xe7\x9d\x16\xed\x1b\x9d\xb8\xde\xc5\x9f\xdf\xde\x72\xba\xd1\xec\xb6\x0d\xa8\xf2\xb9\xba\x90\x32\xae\xa7\x6a\xc6\x9f\x4b\x78\x11\x3e\xb3\x44\x4a\x27\xbe\xde\x7e\x9c\x13\xc9\x7f\x71\x43\x44\xab\xb9\x39\x99\x44\xdf\xc6\x2c\x80\xee\xca\x5e\x78\x70\xd6\x28\x5d\xf9\x6e\x07\x4c\x11\x00\x19\x2b\x12\x4f\x0d\xfa\x58\x71\x78\x50\x75\x20\xa9\xdb\xea\xc3\x33\x68\x3f\x5a\x17\x1e\x53\x18\xe8\x00\xfe\x7a\x32\x36\x83\x8b\xc3\x93\xfb\x7d\xab\x3f\x1d\x19\xb4\xe7\x2f\x52\x23\xdd\x7f\x66\x85\x9e\xd0\x1f\x83\x1a\xfe\xcb\xd4\xd8\x56\x5f\xa1\x9e\xd2\x58\x59\x00\x1f\xd4\x11\x64\x52\xff\xa5\x6f\x64\xe9\x5b\xaf\x4f\xcf\xd4\xcf\xb6\x6b\xa0\x2d\xac\x6e\x06\x5a\xc2\xe1\x9e\xb0\x5b\x10\xba\xd5\xc0\xc7\x30\x97\x03\xbe\x77\x3e\xa0\x1c\x74\x5a\xcc\xd1\x7a\x30\x9e\x82\x3f\xbb\x22\x0c\x27\xd8\xfd\xf2\xeb\xb8\x13\x34\xe5\x73\x34\x73\x86\xd7\x43\x7b\x76\x25\xc0\x0d\xcc\x07\xb1\x8b\x3b\xb5\x51\xe8\xc6\x62\xf8\x33\x81\x1b\x8a\xd0\x7d\x03\xb4\x89\x4f\xf6\xcd\xc6\x87\x0b\x51\xf2\x9c\xf4\x7e\x6f\x93\x3b\x5d\xe3\xa8\xcd\xe3\xc1\xbc\xbf\xd5\x83\xa1\xba\x5f\xa4\xee\x67\x4e\x2f\xdc\xd4\xe6\x75\x8d\x22\x33\x5b\x6b\x3d\x87\xfa\x8a\x3b\xe7\x28\x70\x4f\x84\xf2\x3d\xca\x29\x69\xfb\x45\x7d\xe5\x75\x1c\xde\xe4\x74\x56\x8d\x9d\xc1\xc6\x2a\xc8\x76\xe7\xa4\x1e\x9f\xf4\x0d\xea\x0b\xd4\xc9\x2b\xd8\x2d\xb3\xe2\xcd\x33\xa1\x12\x3f\x72\x60\x4b\x91\x27\xf5\x0f\xb2\x13\xf7\xb1\x73\x6c\xd3\x63\xec\xdc\x22\x73\xcc\xce\x02\x78\xac\xfc\x20\x43\x8b\x7d\x0c\x1d\xdb\xf4\x18\x43\xb7\xc8\xdc\x6d\x68\x7b\xa7\x68\x43\xce\xe9\xdb\xcc\xe1\xe0\xef\xbf\xdd\xd3\x91\x2a\xea\xf4\x78\x5d\xa1\x96\x99\x2f\x33\x51\x4c\x38\x7d\x55\x0b\x44\x3c\xc2\x4b\x67\x45\x59\x0b\xfb\xdd\xb7\x49\x07\x88\x81\x82\xbb\x56\x78\xb3\xc2\xcc\x62\xde\x9b\x4d\xd2\x58\xb4\x99\x88\x2e\x78\x24\x1a\x4f\x44\xcd\x27\x69\xb3\x4b\xb0\x7c\x3a\xa9\xea\xba\xff\x57\xf4\x8a\x84\x41\xb0\xf0\xaf\x25\xc4\x3f\xb4\xb1\xff\x0f\x2f\x5e\x80\x85\x7f\xf6\xc8\xdf\x7d\xbb\x20\x44\x7b\x43\x48\x9e\xb3\x3a\x10\x87\xc4\x7d\x90\xc3\xf2\x3e\xc8\x51\x81\xeb\x56\xe2\x50\x4d\x6e\x8b\x22\x7c\xd2\x62\x65\xe2\x9f\x68\x79\xba\x50\x39\xdf\x82\x02\xa1\x42\x7b\x59\xe7\xf0\x49\xda\x4b\xd0\x98\xd5\xd7\x7c\xf5\x45\x65\xd6\x1a\x41\xd5\xb0\x12\x4a\x66\x06\xa4\x02\x7f\x4f\x95\xea\xc2\x57\xf2\xa8\x08\x17\x79\xf4\x6b\x14\xf0\xc4\x04\x4e\x4e\xdb\x9f\x50\xdd\x27\x30\xf3\xf5\x36\x22\xf7\x07\x7f\x39\xba\xcb\xb7\x13\xef\xfd\x45\x16\x70\x4d\xa5\x87\x95\x73\xb7\xd8\xeb\x4e\xfd\xa5\x59\x70\xc7\x25\xbe\x7c\x1f\xac\x63\xe5\x9b\x2f\x68\xe6\x70\x4d\x17\x9c\x22\xd4\x5e\xf2\x42\x6a\x71\xdc\x3d\x2f\x78\x57\x9e\x06\x03\xe6\x3d\x74\xf9\x3a\xb0\x01\x2e\x93\x1f\x0b\x65\x3c\x01\x8b\xd1\x64\x7a\x00\x93\xbe\xfc\x74\x58\xf2\x3d\xa5\x25\x3e\x07\x92\x1d\xfb\x3a\x60\x32\x90\xe8\xaf\x47\x83\x38\xc6\xcc\x9b\x50\x86\x7b\xc9\x06\x98\x61\xe1\xb1\x70\x76\xe7\x71\x31\xa0\x61\x25\x40\xca\xa3\x7a\x87\x69\xb8\x3b\x45\xf4\x67\x84\x35\x58\x3a\x00\xac\x6c\x6e\x6d\xdb\xa0\x6d\x0c\xe9\x83\xcb\x73\x9a\x0d\x68\x99\xfc\x58\x60\xb7\xcd\x6f\x66\x7c\xff\x61\xfc\xde\xb4\x33\x9c\x67\xc1\x8f\xcd\x19\x40\x8f\x95\xd8\x8e\x1d\x5b\xb1\x81\x1c\xf7\xb3\x1b\xc8\x31\xf9\xb1\xc8\x75\xda\xf5\xc8\x21\x99\x1e\xdc\xd1\x3d\x91\x37\x72\x9f\xdd\x12\x9f\x11\x4a\xb6\x6f\x00\xca\x4b\xdf\xdf\x6f\x83\xd2\xab\xdf\x87\xd2\x37\xca\x1b\x58\x7a\xfa\x63\xc1\xec\x5e\x04\x22\x34\xfd\x42\x42\xbe\xe9\x0f\x73\x70\xfa\x66\xbe\xa5\x3e\x23\x9e\xfe\xd8\x01\x40\x57\xe1\xfa\xb0\x0d\xd1\x60\xc2\xbc\x73\x77\x68\x86\x95\x16\xe2\x71\x65\xd2\x79\xa2\xcb\x72\xad\xc1\xa6\xbf\x48\x95\xcf\x12\x58\x2e\x9b\xf5\xb7\x96\x3a\xb5\x89\x85\x25\xd8\xf4\x75\x89\xd5\xac\xd3\x4a\xd8\xe9\xfd\xf4\x7f\x01\x00\x00\xff\xff\x66\x50\xd1\xd2\x0b\x32\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12811, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
