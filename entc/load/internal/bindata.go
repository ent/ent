// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x6f\xdc\xb6\xb2\x7f\x5e\xfd\x15\x13\x03\x31\xa4\x60\xab\xed\x2d\x8a\xe2\xde\xcd\xdd\x03\x14\x6d\x8a\xfa\xf4\xd4\x0d\x9a\xa4\x2f\x86\xe1\xd2\x12\xe9\x65\x2c\x91\x5b\x8a\xeb\xd8\x75\xfd\xbf\x1f\x70\xf8\x21\x52\xab\xfd\x88\x63\xe7\x25\xd6\x90\x33\x9c\xf9\x71\xbe\x38\xf6\x6c\x06\x3f\xc8\xd5\x9d\xe2\x57\x4b\x0d\xdf\x7c\xfd\x3f\xff\xf7\xd5\x4a\xd1\x8e\x0a\x0d\x3f\x91\x8a\x5e\x4a\x79\x0d\x27\xa2\x2a\xe1\xfb\xa6\x01\xdc\xd4\x81\x59\x57\x37\xb4\x2e\xb3\xd9\x0c\xde\x2f\x79\x07\x9d\x5c\xab\x8a\x42\x25\x6b\x0a\xbc\x83\x86\x57\x54\x74\xb4\x86\xb5\xa8\xa9\x02\xbd\xa4\xf0\xfd\x8a\x54\x4b\x0a\xdf\x94\x5f\xfb\x55\x60\x72\x2d\x6a\x23\x82\x0b\xdc\xf2\x9f\x93\x1f\xde\x9c\xbe\x7b\x03\x8c\x37\xd4\xd3\x94\x94\x1a\x6a\xae\x68\xa5\xa5\xba\x03\xc9\x40\x47\xe7\x69\x45\x69\x99\x65\x2b\x52\x5d\x93\x2b\x0a\x8d\x24\x75\x96\xf1\x76\x25\x95\x86\x3c\x9b\x1c\x51\x51\xc9\x9a\x8b\xab\xd9\xc7\x4e\x8a\xa3\x6c\x72\xc4\x5a\x6d\xfe\x53\x94\x35\xb4\xd2\x47\x59\x36\x39\xba\xe2\x7a\xb9\xbe\x2c\x2b\xd9\xce\x98\x33\x78\x46\x05\x6e\xdb\xb2\x34\xeb\xaa\x25\x6d\xc9\xfe\x1d\x33\x5a\x5f\xd1\x03\xb6\x31\x4e\x9b\xfa\x80\x7d\x5c\xd4\xf4\xf6\x28\x2b\x32\x03\xda\x3b\xa4\x81\xa2\xee\xba\x3a\x20\x02\xa8\xd0\xa5\x5b\xd0\x4b\xa2\xe1\x13\xe9\x10\x15\x5a\x03\x53\xb2\x05\x02\x95\x6c\x57\x0d\x37\x57\xd3\x51\x05\x0e\xb9\x32\xd3\x77\x2b\xea\x45\x76\x5a\xad\x2b\x0d\xf7\xd9\xe4\x94\xb4\x14\xdc\xbf\x4e\x2b\x2e\xae\x60\xf8\xef\x4f\x03\xed\xfc\x48\x90\x96\x4e\x65\xcb\x35\x6d\x57\xfa\xee\xe8\xcf\x6c\xf2\x83\x14\x8c\xbb\xfd\x46\xad\xf8\x3b\xe5\xad\x70\x25\xe5\x7e\x53\x5f\xd1\xce\x6d\x3b\x3b\x7f\x65\x3e\xb7\x9c\x6c\x30\xee\x52\xe6\x9f\x0c\x9e\x5d\x60\xc6\xcf\x71\x66\x44\x7e\xc0\x7d\x62\x50\x76\x87\x9f\x9d\xbf\xc2\xcf\x71\x6e\x6e\x77\xa6\xec\x3f\x4b\x79\x1d\x69\xfe\x56\x76\x5c\x73\x29\x46\xd8\x97\x66\x67\xca\xfc\x56\x36\xbc\xba\x3b\x84\x79\x85\x3b\x53\xee\xef\x85\x90\x9a\x18\x86\x0e\x5a\xb2\x3a\xb3\x57\x76\xce\x85\xa6\xca\xf8\xd3\xfd\x83\xe7\x26\xfd\xce\x44\xc4\x03\xba\x56\x38\xb6\xa6\x5d\xa5\xf8\x25\xed\x80\xc0\xca\x13\x5d\x64\x5a\x9f\x74\x9e\x13\x38\x7a\xdf\x89\x70\xe3\x42\x03\xcc\x66\x60\x49\x8e\x1f\xa1\x9f\x19\x0c\xa0\xe1\x9d\x2e\xb3\xc9\xaf\xfc\x96\xd6\x27\x68\xec\xa5\x94\x8d\xe3\xe0\x15\xd1\xb4\x03\xce\xa2\x53\x41\x5e\x7e\xa4\x95\x75\xef\xd6\x70\x7d\xc5\x85\x15\xc0\x85\x3f\xc4\x1e\x89\x24\xe0\xf1\xc1\x2d\x92\xec\x99\xd6\x5e\xeb\x20\x9b\x91\x64\xe9\x8f\x08\x24\xcb\x38\x1e\x47\x5b\x23\x69\x7b\x28\x9d\x08\x26\xfb\x6d\xaf\x10\xb9\xf2\xfd\xdd\x8a\x26\x0b\x8e\xdd\x28\x90\xb2\xbf\x27\xf1\x61\x7b\x4e\xd7\x64\x10\x89\xef\xf8\xdf\x91\xee\xaf\xb8\xd0\xdf\x7d\xbb\x95\xbb\xe3\x7f\x0f\x0e\x7f\x23\xd6\x6d\x17\xb6\x9d\x9d\x5b\x50\xee\xe1\x74\x0a\x7f\x78\x5d\x82\x5b\x52\xb3\x39\xe5\xff\x20\xf8\x5f\xeb\xa0\x00\xfa\xc5\xc8\x3f\xc7\xbf\xc6\xcd\xa9\x80\x53\xde\x34\xe4\xb2\xa1\x07\x09\x10\x6e\x73\x2a\xe2\xb7\x95\xf1\x6d\xd2\x1c\x24\x42\xba\xcd\xa9\x88\x1f\x29\x23\xeb\x46\x1f\x66\x46\x6d\x37\x8f\x4a\xf8\x83\x34\x06\x8e\x38\xa6\xb7\x4b\xb8\xb8\x31\xbb\x07\x80\xae\x6a\xa2\xa9\xd7\x67\x1f\xa0\xb8\xf9\x62\x54\xa1\x93\xb6\x5d\xeb\x80\xec\x1e\x41\xdc\x6f\x4e\x65\xfc\x41\x1a\x5e\x13\x2d\x15\xba\x08\x06\xed\x76\x19\x37\x61\xf3\xc0\x43\xb5\x54\xe4\x8a\xfe\x42\x31\x71\xee\xf1\xef\xce\x6e\xbe\xb8\xa6\x77\xc3\xd4\x1b\xe7\xda\xd1\xd4\x1b\x67\x5f\xbb\x3a\x50\x84\x0a\x43\xbe\x39\x08\x91\xce\x6f\x1e\xc8\xc0\x04\x67\x82\xdb\xec\x8d\xb2\x78\x62\x97\x97\x81\x9b\x2f\x36\x43\x3e\xae\x04\xb0\xad\x16\x1c\x56\x0c\xb0\xf4\x6e\xe6\x46\x24\x3f\x22\x35\x22\xdf\xd3\x74\x18\x1e\xa4\xfd\xbc\xbb\x73\xe2\x1e\xde\x61\x42\xfc\x9d\xb2\xa0\xf5\x6e\x56\x45\xd9\xc5\xa6\xda\xbf\x53\x16\x36\x8e\x36\x36\x31\xff\xf6\x64\xb8\xc5\xbd\x76\x64\xc2\x13\x71\x43\x55\xb7\xd3\x39\x43\x63\x83\x3b\x87\x7a\xff\xb5\xe6\x8a\xd6\xfb\xd9\x95\xdb\xb9\x3d\x4c\x5f\x99\xae\xad\x4c\x03\xf7\x80\x18\x7d\xaa\x06\xc7\xf6\x08\x9b\x4e\x6d\xe9\x8f\xf0\x6a\xcb\xd8\xbb\x75\x74\x51\x01\xaa\x1d\x37\x13\x75\xbb\x67\x3e\xd0\x0f\x6a\x6f\x87\xbb\xc7\xfa\xd9\x08\xe5\xe0\xae\x7b\x80\xb6\x28\x9d\xd2\x4f\xe8\x9e\x95\xa2\xd8\x82\x11\xe1\x11\x31\x4a\x59\x58\xf0\x27\xdb\x26\xae\xb4\x54\x65\xc6\xd6\xa2\xf2\x9c\x39\xad\xdd\x4d\xff\x18\x76\x14\xce\xe7\xef\xb3\x89\xa0\x30\x5f\xc0\xb1\xf9\xbc\xcf\x26\x26\x24\xe7\xc1\x93\x68\x5d\xbe\x27\x57\x53\x43\xbe\x5b\xd1\x79\x4c\x36\xb1\x9c\x4d\x30\x73\xc4\x74\xf3\x6d\xe8\x16\xfa\x79\xa0\xdb\x6f\xb3\xe2\xfc\x7f\xee\x57\xdc\xb7\x59\xf2\xbe\x3d\x77\x4b\xfe\xdb\xae\xb1\xfe\x2c\x5c\x63\xfe\xac\x1e\xda\x39\x2e\xf5\xdf\x66\x35\xf2\xd6\x39\xb4\xe4\x9a\xe6\xe3\x3e\x5b\x4c\xb3\xc9\x43\x36\x61\x52\xc1\xc5\x14\x88\x36\xa8\x28\x22\xae\xa8\x11\x19\xbb\xbc\x41\x49\xd0\x98\x74\x46\x34\x1a\x9e\x17\xe7\xb0\x00\xa2\x51\x10\x67\xa0\x28\x33\x52\xac\xb6\xaf\xf1\xf3\xc5\x02\x04\x6f\xbc\x0c\x93\x84\x16\xe1\x9e\x14\x65\x85\xa5\x47\xce\xb2\x00\xbb\x2f\xa2\xa1\x78\x45\xf5\x5a\x09\x10\xb4\x77\x13\xdb\xef\x6e\xfa\x09\xba\xa3\x75\x14\xfb\xe3\x98\xa7\x20\x73\xce\x6a\xdf\xd8\xc6\xbe\x92\xdb\xc7\xdb\x14\xa8\x52\xe6\xfb\x1e\xad\xa3\x4a\x19\xeb\x58\x5d\xbe\x51\x2a\x2f\x5e\x23\x21\xb2\xcf\x6b\xc8\x9b\x29\xb0\x56\x9b\x5d\x52\xb1\xdc\x46\x07\xbc\xfc\x6b\x0e\x2f\x6f\x8e\xa6\x86\x1f\x2f\xd2\xb0\x17\x68\x5a\x87\xa8\x1d\xe3\x99\xf7\x43\x1f\x83\xc0\x80\xbe\xc4\x64\xba\x62\x28\xd3\xa1\x1b\xe3\x8a\x73\x64\xec\x84\xe7\xf1\x02\x52\x36\x7c\x16\x97\x7a\xaf\xf5\xfd\xeb\xbc\xd7\xc1\x37\xa9\xd9\x24\xb4\xa6\xfd\xaa\xa7\x98\x55\xd7\xe5\xcd\x7b\xb9\xbe\xef\xb3\x68\xe1\xd9\x71\x3f\x38\xc7\xb3\x93\x0e\xb1\xdf\x19\x1a\xbe\x79\xb0\x39\x74\x75\xc3\x60\xc0\xe5\x34\x1c\xfa\x5e\x0f\xd7\x1b\x2a\x72\x56\x97\x3d\xb5\x40\x21\xbe\x2b\x0a\x67\x04\x0a\x2e\x87\xee\x28\x9c\x11\x28\x1b\x21\x07\x8f\x0b\x3a\xb6\x19\x74\x1d\x3b\x24\xe8\x3a\x86\x4e\x00\x8b\xfd\x9e\xd8\xf2\xae\x33\x99\x18\x8b\x07\x37\x4c\x46\x11\xef\x9f\x47\x53\x23\xcb\x1c\x51\x04\xd9\xe6\x15\x36\x5f\x00\x3e\xbf\x0c\x6e\xe6\x59\x56\xbc\xb6\xf4\x17\x0b\xf8\xda\xeb\x89\xcf\xb5\x05\x1c\x9b\x05\x64\x36\xe5\xce\xbe\x9d\x5d\x17\x0f\xf8\x28\x80\x8a\x08\xb8\xa4\x80\x23\x32\x5a\x83\x96\xb8\xe7\x8a\x0a\xaa\x08\xc6\xa7\xe1\xfc\x49\x2a\xa0\xb7\xa4\x5d\x35\x74\x0a\x42\x6a\x20\x60\xc2\x16\x1b\xe3\x86\x5f\x53\xd0\xbc\xa5\xe5\xa9\xfc\x54\xa2\x96\x17\x53\x1f\x9b\xa6\xbe\x94\xbf\x12\xd5\x2d\x49\x93\xf7\x7e\xe7\x62\x35\x42\xa8\x63\x65\xf2\xb2\x59\x44\x5e\x1a\xa7\x9b\x8e\x4d\x0d\x4f\x9f\x73\x6c\xc9\xdd\xcc\x39\xf6\xad\x8f\x39\xc7\xfe\x38\x96\x73\x90\x39\xe7\xf5\xad\x79\xd0\xd6\xf4\x36\x2d\x50\x56\xf4\x7d\x38\xfb\x18\x09\x46\x5b\x2c\xd4\x2e\x9c\x78\x7d\x8b\x5d\x30\x46\xb0\xad\xc9\xf3\xb0\x60\xbf\x87\xb1\x6d\x56\xfa\xc8\x8e\x03\xc6\xac\x24\xe1\xf2\xe0\x2c\x75\x18\xba\xd1\x9c\xbd\x2d\xbc\xa9\x68\xd4\x17\xdc\xda\xfc\x24\x81\xc0\xbf\xdf\xfd\x76\x6a\x98\xb1\x93\x71\x17\x5d\x53\x7b\xd1\xb8\xc5\x08\x78\x97\x8c\x52\xec\x7f\x0e\xa1\xe4\xd0\xbc\xf3\x67\x9b\x06\xc9\x9d\x54\x40\x7e\x09\x67\xe7\x97\x77\xda\xe6\xcf\x28\x41\x77\x98\x43\x2d\xaf\xc1\xcc\x0e\xfe\x1c\x68\x6e\x6a\x64\x69\x79\xb1\x51\xc8\xb9\xb0\xc3\xde\xdc\x8d\x68\xb1\xdc\xff\xc6\x9c\x0e\x45\xe1\x02\xef\x11\xe5\xb5\xaf\x1b\x5d\x69\x5c\x05\x27\x43\x5e\xee\xc1\x25\xc4\x61\x11\x6a\x48\x37\x2c\x21\xfd\x64\x36\x6a\x41\x41\xde\x50\xa5\x78\x4d\xc3\xb4\x2a\x5e\x2d\x47\xd3\x90\x43\x2a\xb2\x32\x2f\x6c\xc4\x94\xa4\xae\x7b\x72\x4e\x74\x31\x6a\xa0\x75\xc1\xa7\xb7\xd0\x76\xa4\xe1\x2c\xc2\x28\x46\x81\x3f\x28\x28\xf2\x14\x67\x39\x5c\x68\xdc\x12\x99\x56\xd9\xe2\x60\xdb\xe6\x05\x90\xd5\x8a\x8a\x3a\x77\x84\x69\xdf\x7e\x46\x61\x9d\x17\x85\x83\xc9\x0d\x6d\x63\x03\xdc\xc8\xf7\x39\x4d\x30\xb9\x26\x18\xe1\x74\x70\x66\xf8\x81\x73\x64\xc8\x89\x57\x32\xce\x55\xa3\xd6\x0c\x2e\x1d\xa7\xcf\x4f\x7f\xe7\xc3\x63\xec\x9c\xfa\xe9\xcf\x71\x8c\x49\xf5\xe8\x0a\x97\x0a\x3f\x88\x36\x49\x86\x36\xa3\x75\xb6\x6e\xf1\x1b\x2a\xe0\x72\xcd\x18\x55\x80\x39\xd0\x95\x03\x3f\xa6\xc6\xbc\x36\x90\x90\x5f\xae\x99\x4b\x62\xa6\xd5\xb4\xc4\xe9\xb6\x54\x96\xc0\x80\x1a\x06\x71\x46\xd0\x14\xba\xdd\x40\x50\xa5\x62\x87\x60\x51\xa8\xbb\x72\x81\x2c\x51\x7f\x5b\xba\x8a\xdd\x8d\xf4\xb8\x9b\xa2\x8d\xec\xa8\x5e\xc6\xe5\x32\xe4\x3b\xfc\xa9\x73\x23\x70\x2d\xfd\x38\xdd\x3e\xe5\xe2\xfc\xee\x00\xcb\x3b\x70\xb0\x14\x30\x4c\x9a\xc3\x82\x80\xb0\x19\xdd\x50\x7a\x12\x5f\x49\xae\xdd\x11\x5d\x31\x44\x7c\x0a\x6d\x14\x32\x56\x65\x7c\xbd\x90\xd6\xb5\x42\xe3\xa5\xa2\xbd\x0d\x65\x22\x9b\x4c\xdc\x8b\x38\xd6\xc6\x25\xc6\xf6\xb6\xe8\xe1\x1e\x41\x36\xed\xd7\xcc\xe9\xc1\x6f\x45\xe4\xb5\x46\x5f\x54\xf8\x63\x72\xa7\xac\xbf\xd1\x89\xe9\x5d\xdc\xf9\xfd\x7b\x27\x8d\x66\xb3\x6d\x44\x95\xcf\xd5\x05\x95\x31\x3d\x55\x18\x5f\x2e\xe0\xd8\xff\x6c\x25\x62\x3a\x71\xf5\xf6\xe3\x14\x49\xee\x17\x2f\x48\xd4\xca\x36\x27\x93\xe8\xb7\x29\x73\xe0\xd3\x5e\xb8\x77\xd6\x28\x5d\xb9\x6e\x07\x3a\xe6\x01\xd9\x56\x24\x9e\x1a\xf4\x6d\xc5\xe1\x51\xd5\x01\xa5\xee\xaa\x0f\xcf\xa0\xfd\xd6\xba\xf0\x25\x85\x01\x0f\xb0\xbf\x5e\x8c\xcd\xb0\xc5\xe1\xc9\xfd\xbe\xd7\x1f\x8f\xf4\xda\xdb\x5f\x84\x46\xba\xff\x6c\x15\x7a\x42\x7f\xf4\x6a\xb8\x5f\x86\xc6\xb6\xba\x0a\xf5\x94\xc6\x72\x06\xf6\xa0\x44\x50\x57\xba\x5f\xda\x46\x96\xbe\x75\xfa\x0c\x4c\xfd\x6c\xbb\x46\xda\xc2\xf6\x76\xa4\x25\x1c\xef\x09\xd3\x82\x90\x56\x03\x17\xc3\xb6\x1c\xd8\x77\xe7\x23\xca\x41\xd2\x62\x6e\xad\x07\xdb\x53\xf0\x67\x57\x84\xf1\x04\x7b\x58\x7e\xdd\xee\x04\xa1\x7c\x6e\xcd\x9c\xfe\x7a\x70\xcf\xbe\x04\xb8\x81\xf9\x28\x76\x71\xa7\xb6\x15\xba\x6d\x31\xfc\x99\xc0\x8d\x45\xe8\xa1\x01\x1a\xe2\xd3\xfa\x66\xf0\x61\x46\x1a\x3b\x3b\x7d\x38\xd8\xe4\xa4\x6b\xdc\x6a\xf3\xf6\x60\x3e\xdc\xea\xd1\x50\x3d\x2c\x52\x47\xcd\x99\xcd\x92\xe7\xdc\x52\x9a\xfb\x27\xf8\x47\x04\x20\x59\xfa\x98\xc3\x99\x4e\xbc\xfb\xec\x7c\xe3\x2d\x37\x02\xd0\x20\x80\xc5\xe6\x03\xd0\x8f\x3f\x2f\xa6\x20\xaf\x6d\x2f\x9e\x4c\xa5\x84\x9f\x4a\xbd\x86\x17\xf2\xda\x99\x3c\xbe\xc3\x40\x20\x02\x6c\x76\xf6\xf9\x89\xeb\x6a\x09\x44\xe8\x5d\xa2\xcb\xdc\x98\x87\x9a\x54\xa4\x4b\xec\x9c\xef\x39\xcf\x42\x4e\x84\x9e\x02\x11\x85\xe3\xdf\x30\x72\x9f\x94\x7e\xe1\xde\x89\x7a\xc8\x26\xae\x4f\x36\xbc\x2b\x22\x78\x95\x9b\xb4\xfe\x6e\xa5\xb8\xd0\x2c\x3f\x5a\x0b\x7a\xbb\xa2\x95\x0e\xaf\x01\x3b\x76\x7b\xf9\xfe\x08\x35\x29\xdc\xb0\xc5\xde\x08\x03\x3b\x72\x2e\xa0\x6f\xbe\x7b\xdf\xe4\x0c\x5e\x84\x81\x15\xfc\xf3\x8f\xf9\x3a\x11\x4c\x96\xa7\xeb\x96\x2a\x5e\xb9\x7c\x1c\x39\x8f\x81\x56\xf8\x0b\x4b\x67\x5d\x65\xce\x1a\x49\xf4\x77\xdf\x5a\x8f\xf6\x77\x36\x52\x99\x22\x0b\xd2\x21\x1e\x1a\x12\x46\x87\x73\x3b\x3b\x8c\x47\x87\xee\x56\xb5\x3d\x1d\x55\x35\x6d\xf2\xeb\x70\x81\x1a\xfe\xb5\x80\xf8\x2f\x4a\xf4\xff\xc2\xf1\x31\x68\xf8\xff\x01\xf9\xbb\x6f\x0d\xbc\x1b\xd3\x3a\x3b\x90\x0c\xf7\x39\x10\xf7\x81\x8f\xcb\xfb\xc0\xb7\x0a\x5c\xf7\x12\xc7\xc2\xb0\xaf\x1e\xf0\x49\x91\x55\x17\xff\x2d\x92\xa3\x13\x51\xdb\xe7\x82\x27\xb4\x54\x2f\x65\x0d\x9f\xb8\x5e\x82\xa2\x95\xbc\xb1\x6f\x44\x2a\xba\xb5\xa2\x20\x24\xa0\xd3\x74\xc0\x05\xb8\x07\x1d\x17\x57\xae\xe4\x45\xd5\x8a\xd5\xd1\x9f\x5d\x80\x23\x16\x70\x76\xde\xff\xad\xd0\x43\x01\xb9\x2b\x4c\x11\x79\x38\x21\xab\xa9\x79\xa5\x1a\xf1\xce\x5f\x38\x83\x1b\xcc\xd1\x56\x39\xf3\xdc\xbb\x49\x0a\x15\x0e\x4d\x13\x97\x78\xf9\xde\x5b\x67\x95\x0f\xbf\xd3\x98\xc2\x0d\xbe\x04\x98\x2f\x52\xe8\x85\xd8\x0b\x98\x07\x91\xf7\xae\xba\xf4\x06\x4c\x07\xe8\xda\xbe\x79\x03\x5c\x4b\xfe\x52\x28\xe3\x51\x51\x8c\xa6\xa5\x7b\x30\xf1\x37\x84\x06\x4b\xdb\xd0\xf7\xc4\xe7\x40\x32\xb1\x2f\x01\xd3\x02\x49\xdd\x3b\x62\x14\xc7\x98\x79\x13\x4a\xdf\xc0\x6f\x80\xe9\x17\xbe\x14\xce\x74\x70\x15\x03\xea\x57\x3c\xa4\x76\xa6\x6d\x30\xf5\x8f\x8c\x88\xfe\x8c\xb0\x7a\x4b\x47\x80\xe5\xe1\x79\xb3\x0b\xda\x60\xc8\x10\x5c\x3b\xd0\xd8\x80\xd6\x92\xbf\x14\xd8\x5d\x83\x8e\xdc\x3e\x14\x2c\x7e\xbf\xf6\xc3\x8e\x67\xc1\xcf\x9a\x33\x82\x9e\x55\x62\x37\x76\xd6\x8a\x0d\xe4\x6c\xe3\xb7\x81\x9c\x25\x7f\x29\x72\x49\x5f\x1b\x39\xa4\xa5\x7b\x77\x34\x5f\xe8\x8d\xb6\x21\xed\x89\xcf\x08\xa5\xb5\x6f\x04\xca\xa5\x6b\x84\x77\x41\xe9\xd4\x1f\x42\xe9\x3a\xca\x0d\x2c\x1d\xfd\x4b\xc1\x4c\x3b\xe6\x08\x4d\xb7\x50\xa0\x6f\xba\xc3\x0c\x9c\xae\xeb\xed\xa9\xcf\x88\xa7\x3b\x76\x04\xd0\x95\xef\xb3\x77\x21\xea\x4d\x98\x26\x6f\x86\x30\xd5\xd3\x10\xcf\xf5\x8a\xe4\x0b\x5f\x95\x52\x81\x2e\x7f\xe1\xa2\xce\x0b\x58\x2c\xc2\xfa\x5b\x8d\x9d\xda\x44\xc3\x02\x74\xf9\xa6\xa1\x6d\x9e\xb4\x12\x3a\x7b\xc8\xfe\x1b\x00\x00\xff\xff\xa2\x2a\x94\x49\xf4\x30\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12532, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
