// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdb\x46\x12\x7f\x96\x3e\xc5\xd4\x40\x0d\x32\x50\xe9\x5e\x51\x14\x77\xca\xe9\x80\xa2\x4d\x50\x5f\x2f\x6e\xd0\x24\x7d\x31\x0c\x77\x4d\x0e\xad\x8d\xc9\xa5\xb2\x5c\x39\x76\x5d\x7f\xf7\xc3\xce\xec\x92\x4b\x8a\x94\x14\xff\xc9\x4b\xc4\xd9\x9d\xd9\x99\x1f\xe7\xdf\x0e\x7d\x74\x04\x3f\x55\xab\x5b\x2d\x2f\x97\x06\xbe\xfb\xf6\x1f\xff\xfa\x66\xa5\xb1\x46\x65\xe0\xb5\x48\xf1\xa2\xaa\xae\xe0\x58\xa5\x09\xfc\x58\x14\x40\x9b\x6a\xb0\xeb\xfa\x1a\xb3\x64\x7a\x74\x04\xef\x97\xb2\x86\xba\x5a\xeb\x14\x21\xad\x32\x04\x59\x43\x21\x53\x54\x35\x66\xb0\x56\x19\x6a\x30\x4b\x84\x1f\x57\x22\x5d\x22\x7c\x97\x7c\xeb\x57\x21\xaf\xd6\x2a\xb3\x22\xa4\xa2\x2d\xff\x3b\xfe\xe9\xd5\xc9\xbb\x57\x90\xcb\x02\x3d\x4d\x57\x95\x81\x4c\x6a\x4c\x4d\xa5\x6f\xa1\xca\xc1\x04\xe7\x19\x8d\x98\x4c\xa7\x2b\x91\x5e\x89\x4b\x84\xa2\x12\xd9\x74\x2a\xcb\x55\xa5\x0d\x44\xd3\xc9\x01\xaa\xb4\xca\xa4\xba\x3c\xfa\x58\x57\xea\x60\x3a\x39\xc8\x4b\x63\xff\xd3\x98\x17\x98\x9a\x83\xe9\x74\x72\x70\x29\xcd\x72\x7d\x91\xa4\x55\x79\x94\x3b\x83\x8f\x50\xd1\xb6\x91\xa5\xa3\x3a\x5d\x62\x29\x76\xef\x38\xc2\xec\x12\xf7\xd8\x96\x4b\x2c\xb2\x3d\xf6\x49\x95\xe1\xcd\xc1\x34\x9e\x5a\xd0\xde\x11\x0d\x34\xba\xd7\x55\x83\x50\x80\xca\x24\x6e\xc1\x2c\x85\x81\xcf\xa2\x26\x54\x30\x83\x5c\x57\x25\x08\x48\xab\x72\x55\x48\xfb\x6a\x6a\xd4\xe0\x90\x4b\xa6\xe6\x76\x85\x5e\x64\x6d\xf4\x3a\x35\x70\x37\x9d\x9c\x88\x12\xc1\xfd\xab\x8d\x96\xea\x12\xfa\xff\xfe\xb4\xd0\xce\x0f\x94\x28\x71\x56\x95\xd2\x60\xb9\x32\xb7\x07\x7f\x4e\x27\x3f\x55\x2a\x97\x6e\xbf\x55\x2b\x7c\xee\xf2\xa6\xb4\xd2\xe5\x7e\x95\x5d\x62\xed\xb6\x9d\x9e\xbd\xb0\x8f\x23\x27\x5b\x8c\xeb\x2e\xf3\x6b\x8b\x67\xdd\x30\xd3\xe3\x30\x33\x21\xdf\xe3\x3e\xb6\x28\xbb\xc3\x4f\xcf\x5e\xd0\xe3\x30\xb7\xe4\x9d\x5d\xf6\x5f\xaa\xea\x2a\xd0\xfc\x6d\x55\x4b\x23\x2b\x35\xc0\xbe\xb4\x3b\xbb\xcc\x6f\xab\x42\xa6\xb7\xfb\x30\xaf\x68\x67\x97\xfb\x47\xa5\x2a\x23\x2c\x43\x0d\xa5\x58\x9d\xf2\x2b\x3b\x93\xca\xa0\xb6\xfe\x74\x77\xef\xb9\x45\xbb\xb3\x23\xe2\x9e\x5c\xab\x39\x36\xc3\x3a\xd5\xf2\x02\x6b\x10\xb0\xf2\x44\x17\x99\xec\x93\xce\x73\x1a\x8e\xd6\x77\x02\xdc\xa4\x32\x00\x47\x47\xc0\x24\xc7\x4f\xd0\x1f\x59\x0c\xa0\x90\xb5\x49\xa6\x93\x37\xf2\x06\xb3\x63\x32\xf6\xa2\xaa\x0a\xc7\x21\x53\x61\xb0\x06\x99\x07\xa7\x42\x75\xf1\x11\x53\x76\xef\xd2\x72\x7d\x23\x15\x0b\x90\xca\x1f\xc2\x47\x12\x09\x64\x78\x70\x49\x24\x3e\x93\xed\x65\x07\xd9\x8c\x24\xa6\x3f\x20\x90\x98\x71\x38\x8e\x46\x23\x69\x3c\x94\x8e\x55\x5e\xb5\xdb\x5e\x10\x72\xc9\xfb\xdb\x15\x76\x16\x1c\xbb\x55\xa0\xcb\xfe\x5e\x84\x87\xed\x38\xdd\x88\x5e\x24\xbe\x93\x7f\x05\xba\xbf\x90\xca\xfc\xf0\xfd\x28\x77\x2d\xff\xea\x1d\xfe\x4a\xad\xcb\xba\xd9\x76\x7a\xc6\xa0\xdc\xc1\xc9\x0c\xfe\xf0\xba\x34\x6e\x89\x76\x73\x97\xff\x83\x92\x9f\xd6\x8d\x02\xe4\x17\x03\xff\x1c\xff\x9a\x36\x77\x05\x9c\xc8\xa2\x10\x17\x05\xee\x25\x40\xb9\xcd\x5d\x11\xbf\xad\xac\x6f\x8b\x62\x2f\x11\x95\xdb\xdc\x15\xf1\x33\xe6\x62\x5d\x98\xfd\xcc\xc8\x78\xf3\xa0\x84\x3f\x44\x61\xe1\x08\x63\x7a\x5c\xc2\xf9\xb5\xdd\x3d\x28\xe7\x57\xa9\x6c\x4e\x74\x95\x30\x71\x8f\x63\x72\xae\xa4\xca\x7a\xef\x65\x95\x09\x83\xde\xac\x5d\xef\x85\x36\x9f\x0f\xda\x75\x5c\x96\x6b\xd3\xbc\xa0\x1d\x82\xa4\xdf\xdc\x95\xf1\x87\x28\x64\x26\x4c\xa5\xc9\xd3\x28\xf6\xc7\x65\x5c\x37\x9b\x7b\x8e\x6e\x2a\x2d\x2e\xf1\x57\xa4\xfc\xbb\x23\x4c\x6a\xde\x7c\x7e\x85\xb7\xfd\x0c\x1e\xa6\xec\xc1\x0c\x1e\x26\x71\x5e\xed\x29\x82\xca\x92\xaf\xf7\x42\xa4\xf6\x9b\x7b\x32\x28\x4f\xda\x1c\x61\xf7\x06\xc5\xa0\x63\x97\x97\x41\x9b\xcf\x37\x33\x47\x58\x50\x60\xac\xa4\xec\x57\x53\xa8\x82\x6f\xa6\x58\x22\x3f\x20\xc3\x12\xdf\xd3\x34\x2a\x1e\xa4\xdd\xbc\xdb\x53\xeb\x0e\xde\x7e\x5e\xfd\x1d\xf3\x46\xeb\xed\xac\x1a\xf3\xf3\x4d\xb5\x7f\xc7\xbc\xd9\x38\xd8\x1f\x85\xfc\xe3\x39\x75\xc4\xbd\xb6\x24\xd4\x63\x75\x8d\xba\xde\xea\x9c\x4d\x7f\x44\x3b\xfb\x7a\x7f\x5a\x4b\x8d\xd9\x6e\x76\xed\x76\x8e\x87\xe9\x0b\xdb\xfc\x25\xdd\xc0\xdd\x23\x46\x9f\xaa\x4f\xe2\x56\x63\xd3\xa9\x99\xfe\x00\xaf\x66\xc6\xd6\xad\x83\x17\xd5\x40\xb5\xe5\xcd\x04\x4d\xf3\xa9\x0f\xf4\xbd\xba\xe4\xfe\xee\xa1\xb6\x38\x40\xb9\x71\xd7\x1d\x40\x33\x4a\x27\xf8\x99\xdc\x33\xd5\x48\x9d\x9c\x50\x1e\x11\xab\x14\xc3\x42\xbf\xb8\xdb\x5c\x99\x4a\x27\xd3\x7c\xad\x52\xcf\x19\x61\xe6\xde\xf4\xcf\xcd\x8e\xd8\xf9\xfc\xdd\x74\xa2\x10\xe6\x0b\x38\xb4\x8f\x77\xd3\x89\x0d\xc9\x79\xe3\x49\x98\x25\xef\xc5\xe5\xcc\x92\x6f\x57\x38\x0f\xc9\x36\x96\xa7\x13\xca\x1c\x21\xdd\x3e\x5b\x3a\x43\x3f\x6f\xe8\xfc\x6c\x57\x9c\xff\xcf\xfd\x8a\x7b\xb6\x4b\xde\xb7\xe7\x6e\xc9\x3f\xf3\x5a\xde\x9e\x45\x6b\xb9\x3f\xab\x85\x76\x4e\x4b\xed\xb3\x5d\x0d\xbc\x75\x0e\xa5\xb8\xc2\x68\xd8\x67\xe3\xd9\x74\x72\x3f\x9d\xe4\x95\x86\xf3\x19\x08\x63\x51\xd1\x42\x5d\xa2\x15\x19\xba\xbc\x45\x49\x61\x22\xb2\xac\xa5\x46\xc2\xc4\xc4\x2e\x73\xdb\x13\x58\x5e\xd6\xf1\x25\x3d\x7e\xb5\x00\x25\x0b\xcf\x69\x53\xcf\xa2\x79\x3b\x1a\xf3\x98\xe9\x81\x8b\x2c\x80\xf7\x05\x34\x12\xaf\xd1\xac\xb5\x02\x85\xad\x73\x70\xb3\xbc\xe9\x1d\xe4\x84\xec\x1e\xfc\x73\xc8\x3f\x88\x39\xca\x33\xdf\x15\x87\x1e\x12\xf1\xcd\x6f\x06\xa8\xb5\x7d\xbe\x23\xeb\xf2\x2c\x79\xa5\x75\x68\x91\xd7\x49\x16\x33\xc8\x4b\x63\x97\x2b\x9d\x47\x1c\x05\xf0\xf5\xa7\x39\x7c\x7d\x7d\x30\xb3\x8c\xf4\xc2\x9c\x04\x86\xab\x26\xa8\x0e\xe9\xa0\xbb\xbe\x3b\x41\xc3\x43\x6e\x93\x57\xdd\x15\x4b\x99\xf5\x3d\x96\x56\x9c\xcf\x52\xef\x3c\x0f\x17\x88\xb2\xe1\x9e\xb4\xd4\x3a\xa8\xef\x78\xe7\xad\x0e\xbe\xad\x9d\x4e\x9a\x66\xb6\x5d\xf5\x14\xbb\xea\x1a\xba\x79\x2b\xd7\xb7\x78\x0c\x18\x9d\x1d\xb6\x7e\x73\x3a\xbb\xd3\x0c\xb6\x3b\x9b\xde\x6e\xde\xd8\xdc\x34\x70\x7d\xbf\xa7\xe5\xae\xe7\xb7\x6d\x1d\xad\x17\xa8\xa2\x3c\x4b\x5a\x6a\x4c\x42\x7c\x03\xd4\x9c\xd1\x50\x68\xb9\x69\x84\x9a\x33\x1a\xca\x46\x74\xc1\xc3\xe2\x2b\xdf\x8c\xaf\x3a\x1f\x8f\xaf\x3a\xa7\x57\x0f\x8b\xdd\x2e\x58\xca\xba\xb6\xa9\x96\xaa\x83\xb4\x4c\xf6\x78\xef\x98\x07\x33\x2b\xcb\x3a\x58\x2b\xdb\xde\xd6\xe6\x0b\xa0\x6b\x9a\x45\xcb\x5e\xdf\xe2\x97\x4c\xff\x6a\x01\xdf\x7a\xed\xe8\x5a\xb7\x80\x43\xbb\x10\x28\xe6\xdf\xa1\xdb\x15\x5e\x16\x16\xcd\x65\xc1\x62\xf7\x5b\x1e\xb5\xce\x11\xd3\xfd\x21\x62\x2d\x6c\x61\xe4\xcb\xba\xeb\xf7\x81\x6e\x21\x90\x0a\x05\x17\x08\x34\x93\xc3\x0c\x4c\x45\x7b\x2e\x51\xa1\x16\x14\xd3\x96\xf3\x75\xa5\x01\x6f\x44\xb9\x2a\x70\x06\xaa\x32\x20\xc0\x86\x3a\xb5\xd0\x85\xbc\x42\x30\xb2\xc4\xe4\xa4\xfa\x9c\x90\xc6\xe7\x14\xdc\xd6\x60\x5b\x89\x92\x37\x42\xd7\x4b\x51\x84\x9a\xbd\xa4\x0d\x01\xd4\xad\x55\x7c\x95\x5a\x04\x4e\x1e\xa6\xa8\x3a\x9f\x59\x9e\x36\x4f\x71\x71\xde\xcc\x53\x3c\x5c\xa0\x3c\xc5\x3f\x87\xf2\x14\x31\x47\x32\xbb\xb1\x37\xe8\x0c\x6f\xba\xa5\x8c\x45\xdf\x35\x67\x1f\x12\xc1\x6a\x4b\x25\xdd\x45\xa3\xcc\x6e\xa8\x5f\xa6\x04\xc0\xd5\x7b\xde\x2c\xf0\x73\x3f\x35\xd8\x95\x36\x31\x84\xf1\x66\x57\x3a\xd1\x76\xef\x2c\x75\x18\xba\x59\x20\xbf\x2d\x7a\x53\xc1\x6c\xb1\x89\x0a\xfb\xab\x02\x01\xff\x7d\xf7\xdb\x89\x65\xa6\x9e\xc7\xbd\xe8\x0c\xf9\x45\xd3\x16\x2b\xe0\x5d\x67\x76\xc3\xff\x39\x84\x3a\x87\x46\xb5\x3f\xdb\xb6\x52\xee\xa4\x18\xa2\x0b\x38\x3d\xbb\xb8\x35\xc8\xef\xbc\x4d\xea\x35\xa5\x60\xe6\xb5\x98\xf1\xa4\xd1\x81\xe6\xc6\x54\x4c\x8b\xe2\x8d\x92\x2f\x15\x4f\x97\xa3\x9e\x73\x33\x5f\x1c\x53\x78\x31\xdf\x17\x16\x62\x99\x7b\xdf\xac\x13\xeb\x2a\x34\x8a\xf2\x72\xd9\x2d\xf7\x28\x42\x0e\x8b\xa6\x0a\xd5\xae\x08\xa1\xaf\x40\xed\x28\x38\x68\x56\xa1\xba\x46\xad\x65\x86\xcd\x78\x2c\x5c\x4d\x06\xb3\x98\x43\x2a\xb0\x32\x8a\x39\x62\xc6\x53\x59\xc7\x40\x76\xc1\xa7\xb7\x90\x7b\xd7\xe6\x2c\x91\x23\x45\x81\x3f\xa8\x51\xe4\x29\xce\x72\xb8\x60\xd8\x3c\xd9\xa6\x9a\x71\xe0\x06\x7b\x01\x62\xb5\x42\x95\x45\x8e\x30\x6b\x1b\xd5\x20\xac\xa3\x38\x76\x30\xb9\x29\x71\x68\x80\x9b\x31\x3f\xa7\x09\x36\xd7\x34\x46\x38\x1d\x9c\x19\x7e\xc2\x1d\x18\x72\xec\x95\x0c\x73\xd5\xa0\x35\xbd\x97\x4e\xe3\xee\xa7\x7f\xe7\xfd\x63\x78\x30\xfe\xf4\xe7\x38\xc6\x4e\xf5\xa8\x63\x97\x0a\x3f\xa8\xb2\x93\x0c\x39\xa3\xd5\x5c\xb7\xe4\x35\x2a\xb8\x58\xe7\x39\x6a\xa0\x1c\xe8\xca\x81\x9f\x8b\x53\x5e\xeb\x49\x88\x2e\xd6\xb9\x4b\x62\xb6\x3d\x65\xe2\x6c\x2c\x95\x75\x60\x20\x0d\x1b\x71\x56\xd0\x0c\xea\xed\x40\xa0\xd6\xa1\x43\xe4\x41\xa8\xbb\x72\x41\x2c\xed\x19\x79\xe2\x2a\x76\x1d\x6d\x4a\xde\x14\x6d\x65\x07\xf5\x32\x2c\x97\x4d\xbe\xa3\x5f\xb5\x9b\xb9\x9b\xca\xcf\xef\xf9\xd2\x17\xe6\x77\x07\x58\x54\x83\x83\x25\x86\x7e\xd2\xec\x17\x04\x82\xcd\xea\x46\xd2\x3b\xf1\xd5\xc9\xb5\x5b\xa2\x2b\x84\x48\xce\xa0\x0c\x42\x86\x55\xa6\x1b\x8f\x28\x5d\x4f\x35\x5c\x2a\xca\x9b\xa6\x4c\x4c\x27\x13\x77\x77\x0e\xb5\x71\x89\xb1\xbc\x89\x5b\xb8\x07\x90\xed\x36\x7e\xf6\xf4\xc6\x6f\x55\xe0\xb5\x56\x5f\x52\xf8\x63\xe7\x9d\xe6\xed\x1b\x9d\xd8\xde\xc5\x9d\xdf\xde\x91\xba\xd1\x6c\xb7\x0d\xa8\xf2\xa5\xba\x90\x32\xb6\xa7\x6a\x06\x9d\x0b\x38\xf4\xbf\x59\x22\xa5\x13\x57\x6f\x3f\xce\x88\xe4\xbe\xf4\x10\xd1\x68\x6e\x4e\x26\xc1\xe7\x9b\x39\xc8\x59\x2b\xdc\x3b\x6b\x90\xae\x5c\xb7\x03\x75\xee\x01\x19\x2b\x12\x4f\x0d\xfa\x58\x71\x78\x50\x75\x20\xa9\xdb\xea\xc3\x33\x68\x3f\x5a\x17\x1e\x53\x18\xe8\x00\xfe\x9e\x19\x9a\xc1\xc5\xe1\xc9\xfd\xbe\xd5\x9f\x8e\xf4\xda\xf3\x97\xd7\x40\xf7\x5f\x58\xa1\x27\xf4\x47\xaf\x86\xfb\xfa\x1a\xda\xea\x2a\xd4\x53\x1a\x2b\x73\xe0\x83\x3a\x82\xea\xc4\x7d\x25\x0e\x2c\x7d\xeb\xf4\xe9\x99\xfa\xc5\x76\x0d\xb4\x85\xe5\xcd\x40\x4b\x38\xdc\x13\x76\x0b\x42\xb7\x1a\xb8\x18\xe6\x72\xc0\x17\xd8\x07\x94\x83\x4e\x8b\x39\x5a\x0f\xc6\x53\xf0\x17\x57\x84\xe1\x04\xbb\x5f\x7e\x1d\x77\x82\xa6\x7c\x8e\x66\x4e\xff\x7a\x68\xcf\xae\x04\xb8\x81\xf9\x20\x76\x61\xa7\x36\x0a\xdd\x58\x0c\x7f\x21\x70\x43\x11\xba\x6f\x80\x36\xf1\xc9\xbe\xd9\xf8\x70\x2e\x0a\x9e\xb2\xde\xef\x6d\x72\xa7\x6b\x1c\xb5\x79\x3c\x98\xf7\xb7\x7a\x30\x54\xf7\x8b\xd4\xfd\xcc\xe9\x85\x9b\xda\xbc\xae\x51\x64\xa6\x6b\xad\x67\x50\x5d\x71\xe7\x1c\x04\xee\xa9\x50\xae\x47\x39\x23\x6d\xbf\xaa\xae\x9c\x8e\xc3\x9b\xac\xce\xaa\xb1\xd3\xdb\x58\x7a\xd9\xf6\x9c\xc4\xe1\x93\xbc\x41\x7d\x89\x3a\x7e\x09\xbb\x65\x96\xbc\x39\x12\x2a\x76\x23\x07\xb6\x14\x79\x9e\xff\x20\x3b\x71\x1f\x3b\xc7\x36\x3d\xc6\xce\x2d\x32\xc7\xec\xcc\x81\x87\xd2\x0f\x32\x34\xdf\xc7\xd0\xb1\x4d\x8f\x31\x74\x8b\xcc\xdd\x86\xb6\x77\x8a\x36\xe4\xac\xbe\xed\xb0\xf1\xef\xbf\xed\xd3\xb1\xca\xab\xe4\x64\x5d\xa2\x96\x69\x14\x5b\x62\x6f\xfe\xd8\x0e\x20\x5f\xdb\x23\xba\xd7\x1d\x32\x48\xb5\x48\x85\x33\xbe\x24\xca\x8b\x4a\x98\x1f\xbe\x8f\x3b\x48\x0d\x54\xe4\xb5\xc2\x9b\x15\xa6\x06\xb3\xde\xf0\x92\x06\xb0\xcd\xec\x75\xce\xc3\xd7\x70\xf6\x5a\x7f\x96\x26\x5d\x82\xe1\xd3\xc9\x16\x7b\x3d\x78\x49\xef\x50\xd4\x08\x06\xfe\xb3\x80\xf0\x4f\x77\xcc\x3f\xe1\xf0\x10\x0c\xfc\xbb\x47\xfe\xe1\xfb\x39\x41\xde\x9b\x52\xf2\x44\xd7\xa2\x3c\x24\xee\x83\x1c\x96\xf7\x41\x8e\x0a\x5c\xb7\x12\x87\x8a\x76\x5b\x35\xe1\xb3\x16\xab\x3a\xfc\xa3\x2f\x47\x17\x2a\xe3\x6b\x92\x27\x94\x68\x96\x55\x06\x9f\xa5\x59\x82\xc6\xb4\xba\xe6\xbb\x31\xaa\x7a\xad\x11\x54\x05\x2b\xa1\x64\x5a\x83\x54\xe0\x2e\xb2\x52\x5d\xba\x52\x1f\x54\xe9\x3c\x0b\xfe\xbe\x05\x1c\x31\x86\xd3\xb3\xf6\x8f\xb2\xee\x63\x88\x5c\x41\x0e\xc8\xfd\xc9\x60\x86\xf6\x76\x6e\xc5\xbb\xbe\x45\xe6\x70\x4d\xb5\x89\x95\xb3\xd7\xdc\xeb\x4e\x81\xa6\x61\x71\xc7\x25\xbe\x7e\xef\xad\x63\xe5\x9b\xaf\x41\x33\xb8\xa6\x1b\x50\xee\x8b\x33\x79\x21\xf5\x40\xf6\x22\xe8\xbd\x2b\x4b\xbc\x01\xb3\x1e\xba\x7c\x5f\xd8\x00\x97\xc9\x8f\x85\x32\x1c\x91\x85\x68\x32\xdd\x83\x49\xdf\x50\x2d\x96\x7c\x91\x69\x89\xcf\x81\x64\xc7\xbe\x0e\x98\x0c\x24\xba\xfb\xd3\x20\x8e\x21\xf3\x26\x94\xfe\xe2\xb2\x01\xa6\x5f\x78\x2c\x9c\xdd\x81\x5d\x08\xa8\x5f\xf1\x90\xf2\x2c\xdf\x62\xea\x2f\x57\x01\xfd\x19\x61\xf5\x96\x0e\x00\x2b\x9b\x6b\xdd\x36\x68\x1b\x43\xfa\xe0\xf2\x20\x67\x03\x5a\x26\x3f\x16\xd8\x6d\x03\x9e\x88\x2f\x48\x8c\xdf\x9b\x76\xc8\xf3\x2c\xf8\xb1\x39\x03\xe8\xb1\x12\xdb\xb1\x63\x2b\x36\x90\xe3\x86\x77\x03\x39\x26\x3f\x16\xb9\x4e\x3f\x1f\x38\x24\xd3\xbd\x3b\xda\x27\xf2\x46\x6e\xc4\x5b\xe2\x33\x42\xc9\xf6\x0d\x40\xb9\x74\x17\x80\x6d\x50\x3a\xf5\xfb\x50\xba\x4e\x7a\x03\x4b\x47\x7f\x2c\x98\xdd\x9b\x42\x80\xa6\x5b\x88\xc9\x37\xdd\x61\x16\x4e\xd7\xed\xb7\xd4\x67\xc4\xd3\x1d\x3b\x00\xe8\xca\xdf\x2f\xb6\x21\xea\x4d\x98\x75\x2e\x17\xcd\x34\xd3\x74\xbe\xeb\xc6\x9d\x27\xba\x4d\x57\x1a\x8c\xfb\xc0\x1b\x36\x61\x6f\x0d\xb5\x72\x13\x03\x0b\x30\xc9\xab\x02\xcb\xa8\xd3\x4a\x98\xe9\xfd\xf4\xff\x01\x00\x00\xff\xff\xc4\x45\xce\xcc\x5d\x32\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12893, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
