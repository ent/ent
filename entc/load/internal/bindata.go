// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5f\x6b\xdb\x3e\x14\x7d\xb6\x3e\xc5\xf9\x99\xfe\xa8\xdd\xa5\x4a\xdb\xb7\x0d\xf2\x50\xda\x0c\x32\xb6\x76\x90\xc2\x1e\xba\x52\x14\xfb\x3a\x11\x75\x24\xef\x4a\x29\x0b\x42\xdf\x7d\x48\x4e\xc2\xf6\x64\x4b\xe7\xdc\xf3\x47\x37\x84\xe9\x85\xb8\xb3\xc3\x9e\xf5\x7a\xe3\x71\x73\x75\xfd\xf1\x72\x60\x72\x64\x3c\x3e\xab\x86\x56\xd6\xbe\x61\x61\x1a\x89\xdb\xbe\x47\x26\x39\x24\x9c\xdf\xa9\x95\xe2\x69\xa3\x1d\x9c\xdd\x71\x43\x68\x6c\x4b\xd0\x0e\xbd\x6e\xc8\x38\x6a\xb1\x33\x2d\x31\xfc\x86\x70\x3b\xa8\x66\x43\xb8\x91\x57\x47\x14\x9d\xdd\x99\x56\x68\x93\xf1\xaf\x8b\xbb\xf9\xc3\x72\x8e\x4e\xf7\x84\xc3\x1d\x5b\xeb\xd1\x6a\xa6\xc6\x5b\xde\xc3\x76\xf0\x7f\x99\x79\x26\x92\xe2\x62\x1a\xa3\x10\x21\xa0\xa5\x4e\x1b\x42\xb9\x55\xda\x94\x88\x51\x4c\xa7\xb8\x4b\x79\xd6\x64\x88\x95\xa7\x16\xab\x3d\xce\xc9\xf8\xe6\x74\x75\x2e\x71\xff\x88\x87\xc7\x27\xcc\xef\x17\x4f\x52\x0c\xaa\x79\x53\x6b\x42\xd2\x10\x42\x6f\x07\xcb\x1e\x95\x28\x4a\xeb\x4a\x51\x94\xab\xbd\xa7\xf4\x13\x02\x3c\x6d\x87\x5e\x79\x42\x39\xb2\x5c\xb6\xcc\xd0\xc0\xda\xf8\x0e\xe5\xff\xbf\x4a\xc8\xef\x07\xc5\x18\x45\x9d\x63\x9e\xad\x94\x23\x7c\x9a\x21\x7f\x8f\x78\x9a\x7d\x57\x0c\xd7\x6c\x68\xab\x1c\x66\x78\x7e\x21\xe3\xe5\xc2\x78\xe2\x4e\x35\x14\xb2\x34\x2b\xb3\x26\x9c\xbd\x4e\x70\x66\xd4\x36\xcb\xc8\x07\xb5\x25\x97\xf4\x8b\x22\x84\xcb\x83\x7e\x8c\x32\x1d\x4e\x51\x5c\x88\xe5\x61\x26\xc6\x49\xd6\x22\xd3\xe2\x32\x46\x11\x85\xe8\x76\xa6\xc9\x9d\xab\x1a\x41\x14\x29\x48\xaf\x0d\x39\x3c\xbf\x3c\xbf\xa4\xd2\xa2\xe8\x2c\xe3\x75\x72\xc8\x97\x7c\xc7\x28\xc7\xbc\x41\x14\xc5\x6a\x02\x62\x4e\xd8\x37\xc5\x6e\xa3\xfa\x65\x06\xab\x91\x53\x8b\xa2\xd0\x5d\x66\xfc\x37\x83\xd1\x7d\x9e\x29\x3a\xa5\xfb\x8a\x98\x13\x9c\x2a\x8c\xbe\x33\xa8\x61\x20\xd3\x56\xf9\x38\xc1\xaa\x16\x09\xb5\x4e\x2e\x7d\x6b\x77\x5e\xfe\x60\xed\xa9\xca\xfb\x90\x5f\xac\x36\x47\xe2\x18\xb7\x2a\x7f\x9a\xb2\xae\xeb\x53\xb7\xa3\x4b\xb2\xb7\x9c\x4b\x8e\x5a\xc4\x3c\x6a\x2d\x3d\x6b\xb3\x4e\x1c\x39\x4f\x9c\xaa\xfe\x90\x45\x32\x71\xfe\x5b\xfb\xea\x3a\xcb\xfd\xb3\xfa\xb1\xd9\xb8\xf9\xc3\x8b\xc6\x28\xfe\x04\x00\x00\xff\xff\x95\x06\x0f\xa4\x50\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 848, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\x5f\x6f\xdc\x36\x12\x7f\xde\xfd\x14\x13\x03\x35\xa4\x60\x2b\xf7\x8a\xa2\xb8\xdb\xdc\x1e\x50\xb4\x29\xea\xeb\xd5\x0d\x9a\xa4\x2f\x86\xe1\xca\x12\xe9\x65\x2c\x91\x5b\x92\xeb\xd8\x75\xfd\xdd\x0f\x9c\x21\x29\x4a\xab\x5d\x6f\xe2\x3f\x2f\x59\x0d\x39\xff\x7e\x9a\x19\x0e\x47\x39\x3a\x82\xef\xd5\xea\x56\x8b\xcb\xa5\x85\xaf\xbf\xfa\xc7\xbf\xbe\x5c\x69\x66\x98\xb4\xf0\x63\x59\xb1\x0b\xa5\xae\xe0\x58\x56\x05\x7c\xd7\x34\x80\x9b\x0c\xb8\x75\x7d\xcd\xea\x62\x7a\x74\x04\xef\x96\xc2\x80\x51\x6b\x5d\x31\xa8\x54\xcd\x40\x18\x68\x44\xc5\xa4\x61\x35\xac\x65\xcd\x34\xd8\x25\x83\xef\x56\x65\xb5\x64\xf0\x75\xf1\x55\x58\x05\xae\xd6\xb2\x76\x22\x84\xc4\x2d\xff\x3b\xfe\xfe\xf5\xc9\xdb\xd7\xc0\x45\xc3\x02\x4d\x2b\x65\xa1\x16\x9a\x55\x56\xe9\x5b\x50\x1c\x6c\xa2\xcf\x6a\xc6\x8a\xe9\x74\x55\x56\x57\xe5\x25\x83\x46\x95\xf5\x74\x2a\xda\x95\xd2\x16\xb2\xe9\xe4\x80\xc9\x4a\xd5\x42\x5e\x1e\x7d\x30\x4a\x1e\x4c\x27\x07\xbc\xb5\xee\x1f\xcd\x78\xc3\x2a\x7b\x30\x9d\x4e\x0e\x2e\x85\x5d\xae\x2f\x8a\x4a\xb5\x47\xdc\x3b\x7c\xc4\x24\x6e\xdb\xb2\x74\x64\xaa\x25\x6b\xcb\x23\x56\x5f\xb2\x3d\xb6\x71\xc1\x9a\x7a\x8f\x7d\x42\xd6\xec\xe6\x60\x9a\x4f\x1d\x24\x6f\x91\x06\x9a\xf9\x97\x61\xa0\x94\xc0\xa4\x2d\xfc\x82\x5d\x96\x16\x3e\x96\x06\x7d\x66\x35\x70\xad\x5a\x28\xa1\x52\xed\xaa\x11\x0e\x78\xc3\x34\x78\x5c\x8a\xa9\xbd\x5d\xb1\x20\xd2\x58\xbd\xae\x2c\xdc\x4d\x27\x27\x65\xcb\xc0\xff\x19\xab\x85\xbc\x84\xe1\xdf\x1f\x0e\xb8\xf9\x81\x2c\x5b\x36\x53\xad\xb0\xac\x5d\xd9\xdb\x83\x3f\xa6\x93\xef\x95\xe4\xc2\xef\x77\x66\xa5\xcf\x7d\xde\x0a\x57\xfa\xdc\xaf\xeb\x4b\x66\xfc\xb6\xd3\xb3\x97\xee\x71\x8b\x66\x87\xb1\xe9\x33\xff\xe8\xf0\x34\x91\x19\x1f\xc7\x99\x11\xf9\x01\xf7\xb1\x43\xd9\x2b\x3f\x3d\x7b\x89\x8f\xe3\xdc\x82\x76\xf6\xd9\x7f\x52\xea\x2a\xb1\xfc\x8d\x32\xc2\x0a\x25\x47\xd8\x97\x6e\x67\x9f\xf9\x8d\x6a\x44\x75\xbb\x0f\xf3\x0a\x77\xf6\xb9\xbf\x93\x52\xd9\xd2\x31\x18\x68\xcb\xd5\x29\xbd\xb2\x33\x21\x2d\xd3\x2e\x9e\xee\xee\x03\x77\xd9\xed\xec\x89\xb8\xc7\xd0\x8a\x6a\x6b\x66\x2a\x2d\x2e\x98\x81\x12\x56\x81\xe8\xf3\x8e\x62\xd2\x47\x4e\xe4\xe8\x62\x27\xc1\x4d\x48\x0b\x70\x74\x04\x44\xf2\xfc\x08\xfd\x91\xc3\x00\x1a\x61\x6c\x31\x9d\xfc\x22\x6e\x58\x7d\x8c\xce\x5e\x28\xd5\x78\x0e\x51\x95\x96\x19\x10\x3c\xd1\x0a\xea\xe2\x03\xab\x28\xbc\x5b\xc7\xf5\xa5\x90\x24\x40\xc8\xa0\x84\x54\x22\x09\x44\xaa\xb8\x45\x12\xe9\x24\x7f\x29\x40\x36\x33\x89\xe8\x9f\x91\x48\xc4\x38\x9e\x47\x5b\x33\x69\x7b\x2a\x1d\x4b\xae\xba\x6d\x2f\x11\xb9\xe2\xdd\xed\x8a\xf5\x16\x3c\xbb\x33\xa0\xcf\xfe\xae\x4c\x95\x3d\xa0\xdd\x96\x83\x4c\x7c\x2b\xfe\x4a\x6c\x7f\x29\xa4\xfd\xf6\x9b\xad\xdc\x46\xfc\x35\x50\xfe\x5a\xae\x5b\x13\xb7\x9d\x9e\x11\x28\x77\x70\x32\x83\xdf\x83\x2d\x31\x2c\x99\xdb\xdc\xe7\x7f\x2f\xc5\x9f\xeb\x68\x00\xc6\xc5\xc8\x9f\xe7\x5f\xe3\xe6\xbe\x80\x13\xd1\x34\xe5\x45\xc3\xf6\x12\x20\xfd\xe6\xbe\x88\x5f\x57\x2e\xb6\xcb\x66\x2f\x11\xca\x6f\xee\x8b\xf8\x81\xf1\x72\xdd\xd8\xfd\xdc\xa8\x69\xf3\xa8\x84\xdf\xcb\xc6\xc1\x91\xe6\xf4\x76\x09\xe7\xd7\x6e\xf7\x00\xd0\x55\x5d\x5a\x16\xec\x79\x08\x50\xdc\x7c\x3e\x6a\xd0\x71\xdb\xae\x6d\x44\xf6\x01\x41\x22\x6c\xee\xcb\xf8\xbd\x6c\x44\x5d\x5a\xa5\x31\x44\x30\x69\xb7\xcb\xb8\x8e\x9b\x07\x11\x6a\x95\x2e\x2f\xd9\xcf\x0c\x0b\xe7\x03\xf1\x6d\x68\xf3\xf9\x15\xbb\x1d\x96\xde\xb4\xd6\x8e\x96\xde\xb4\xfa\xd2\xea\xc0\x10\x26\x1d\xf9\x7a\x2f\x44\x4c\xd8\x3c\x90\x81\x05\xce\x25\xb7\xdb\x9b\x54\xf1\x9e\x5f\x41\x06\x6e\x3e\xdf\x4c\xf9\xf4\x24\x80\x6d\x67\xc1\x7e\x87\x01\x1e\xbd\x9b\xb5\x11\xc9\x9f\x51\x1a\x91\xef\x69\x3a\x8c\x00\xd2\xc3\xbc\xbb\x6b\xe2\x03\xbc\xc3\x82\xf8\x1b\xe3\xd1\xea\xdd\xac\x9a\xf1\xf3\x4d\xb3\x7f\x63\x3c\x6e\x1c\x6d\x6c\x52\xfe\xed\xc5\x70\x4b\x78\xed\xa8\x84\xc7\xf2\x9a\x69\xb3\x33\x38\x63\x63\x83\x3b\x87\x76\xff\xb9\x16\x9a\xd5\x0f\xb3\x6b\xbf\x73\x7b\x9a\xbe\x74\x5d\x5b\xd1\x4f\xdc\x3d\x72\xf4\xa9\x1a\x1c\xea\x11\x36\x83\x9a\xe8\x9f\x11\xd5\xc4\xd8\x85\x75\xf2\xa2\x22\x54\x3b\xde\x4c\xd2\xed\x9e\x86\x44\xdf\xab\xbd\x1d\xee\x1e\xeb\x67\x13\x94\x63\xb8\x3e\x00\x34\xa1\x74\xc2\x3e\x62\x78\x56\x9a\x61\x0b\x56\xca\x80\x88\x33\x8a\x60\xc1\x5f\xd4\x26\xae\xac\xd2\xc5\x94\xaf\x65\x15\x38\x33\x56\xfb\x37\xfd\x43\xdc\x91\xfb\x98\xbf\x9b\x4e\x24\x83\xf9\x02\x0e\xdd\xe3\xdd\x74\xe2\x52\x72\x1e\x23\x89\xd5\xc5\xbb\xf2\x72\xe6\xc8\xb7\x2b\x36\x4f\xc9\x2e\x97\xa7\x13\xac\x1c\x29\xdd\x3d\x3b\x3a\x41\x3f\x8f\x74\x7a\x76\x2b\x3e\xfe\xe7\x61\xc5\x3f\xbb\xa5\x10\xdb\x73\xbf\x14\x9e\x69\x8d\x77\xba\x70\x8d\x07\x5d\x1d\xb4\x73\x5c\xea\x9e\xdd\x6a\x12\xad\x73\x68\xcb\x2b\x96\x8d\xc7\x6c\x3e\x9b\x4e\xee\xa7\x13\xae\x34\x9c\xcf\xa0\xb4\x0e\x15\x5d\xca\x4b\xe6\x44\xa6\x21\xef\x50\x92\x2c\x25\x9d\x96\x16\x1d\xcf\xf2\x33\x58\x40\x69\x51\x90\xe0\xa0\x19\x77\x52\xc8\xda\x57\xf8\xf8\x62\x01\x52\x34\x41\x86\x2b\x42\x8b\xf8\x9e\x34\xe3\x39\xd1\x93\x60\x59\x00\xed\x4b\x68\x28\x5e\x33\xbb\xd6\x12\x24\xeb\xc2\x84\xfa\xdd\xcd\x38\xc1\x70\xa4\x40\xa1\x9f\x63\x91\x82\xcc\x19\xaf\x43\x63\x9b\xc6\x4a\x46\x97\xb7\x19\x30\xad\xdd\xf3\x1d\x7a\xc7\xb4\x76\xde\xf1\xba\x78\xad\x75\x96\xbf\x42\x42\xe2\x5f\xb0\x50\x34\x33\xe0\xad\x75\xbb\x94\xe6\x19\x65\x07\x7c\xf1\xe7\x1c\xbe\xb8\x3e\x98\x39\x7e\x7c\x91\x8e\x3d\x47\xd7\x0c\xa2\x76\x88\x3a\xef\x86\x31\x06\x91\x01\x63\x89\xab\xfe\x8a\xa3\xcc\x86\x61\x8c\x2b\x3e\x90\xb1\x13\x9e\xa7\x0b\x48\xd9\x88\x59\x5c\xea\xa2\x36\xf4\xaf\xf3\xce\x86\xd0\xa4\x4e\x27\xb1\x35\xed\x56\x03\xc5\xad\xfa\x2e\x6f\xde\xc9\x0d\x7d\x1f\xa1\x85\xba\xd3\x7e\x70\x8e\xba\x7b\x1d\x62\xb7\x33\x36\x7c\xf3\xe8\x73\xec\xea\x86\xc9\x80\xcb\xfd\x74\xe8\x7a\x3d\x5c\x6f\x98\xcc\x78\x5d\x74\xd4\x1c\x85\x84\xae\x28\xea\x88\x14\x5c\x8e\xdd\x51\xd4\x11\x29\x1b\x29\x07\x9f\x97\x74\x7c\x33\xe9\x0c\xdf\x27\xe9\x0c\xc7\x20\x80\xc5\xc3\x91\xd8\x0a\x63\x5c\x25\xc6\xc3\x43\x38\x26\x67\x48\x88\xcf\x83\x99\x93\xe5\x54\xe4\x51\xb6\xbb\x85\xcd\x17\x80\xd7\x2f\x87\x9b\xbb\x96\xe5\xaf\x88\xfe\x62\x01\x5f\x05\x3b\xf1\xba\xb6\x80\x43\xb7\x80\xcc\xee\xb8\xa3\xbb\xb3\xef\xe2\x01\x2f\x05\x50\x95\x12\x2e\x18\xe0\x00\x8c\xd5\x60\x15\xee\xb9\x64\x92\xe9\x12\xf3\xd3\x71\xfe\xa8\x34\xb0\x9b\xb2\x5d\x35\x6c\x06\x52\x59\x28\xc1\xa5\x2d\x36\xc6\x8d\xb8\x62\x60\x45\xcb\x8a\x13\xf5\xb1\x40\x2b\xcf\x67\x21\x37\xdd\xf9\x52\xfc\x52\x6a\xb3\x2c\x9b\xac\x8b\x3b\x9f\xab\x09\x42\x86\x17\xbd\x9b\xcd\x22\x89\xd2\xb4\xdc\x18\x3e\x73\x3c\x5d\xcd\xa1\x23\x77\xb3\xe6\xd0\x5d\x1f\x6b\x0e\xfd\x1c\xab\x39\xc8\x9c\x89\xfa\xc6\x5d\x68\x6b\x76\xd3\x3f\xa0\x48\xf4\x5d\xd4\x7d\x88\x04\x67\x2d\x1e\xd4\x3e\x9d\x44\x7d\x83\x5d\x30\x66\x30\x9d\xc9\xf3\xb8\x40\xcf\xc3\xdc\x76\x2b\x5d\x66\xa7\x09\xe3\x56\x7a\xe9\x72\xef\x3d\xf5\x18\xfa\xd1\x1c\xbd\x2d\x7c\x53\xc9\xa8\x2f\x86\xb5\xfb\xa5\xa0\x84\xff\xbe\xfd\xf5\xc4\x31\x63\x27\xe3\x5f\x74\xcd\xe8\x45\xe3\x16\x27\xe0\x6d\x6f\x94\x42\xff\x78\x84\x7a\x4a\x33\x13\x74\xbb\x06\xc9\x6b\xca\x21\xbb\x80\xd3\xb3\x8b\x5b\x4b\xf5\x33\x29\xd0\x06\x6b\x28\xf1\x3a\xcc\x68\xf0\xe7\x41\xf3\x53\x23\xa2\x65\xf9\xc6\x41\x2e\x24\x8d\x72\x33\x3f\x80\xc5\xe3\xfe\x57\xee\x6d\xc8\x73\x9f\x78\x4f\x73\xbc\x7a\x63\x12\x41\x59\x4e\x41\xb9\x4f\xba\xfb\x48\x37\x85\x0b\x3c\x9c\x33\x05\x2b\xf7\x3e\x90\x3c\xb2\xf1\x44\x32\xc3\x03\x69\xa8\x86\xc2\xea\xe9\xf5\x50\x97\x19\x75\x95\x9c\x61\x64\x07\x45\xd1\x90\xa7\xd0\xe5\x5f\x04\x4b\xdb\x1c\xd7\xfe\x12\xf0\xd4\x0a\x2f\xa0\x5c\xad\x98\xac\x33\x4f\x98\x75\x2d\x65\x92\xaa\x59\x9e\x7b\x98\xfc\x20\x36\x75\xc0\x8f\x71\x9f\xd3\x05\x57\x3f\xa2\x13\xde\x06\xef\x46\x18\x22\x27\x8e\x1c\x07\x23\xd3\xfa\x33\xea\xcd\xe0\xa5\xe3\x44\xf9\xf9\x63\x8b\x66\xcf\x4f\xaf\xc7\x33\xf6\x4e\x04\x93\xfb\xf2\xf6\x5e\xb6\xbd\x02\x47\x55\xca\xd0\x59\x24\xae\x99\x84\x8b\x35\xe7\x4c\x03\xd6\x35\x5f\xe2\xc3\xe8\x19\x6b\xd5\x40\x42\x76\xb1\xe6\xbe\x30\xb9\xf6\x91\x88\xb3\x6d\xe5\xa9\x07\x03\x5a\x18\xc5\x39\x41\x33\x30\xbb\x81\x60\x5a\xa7\x01\xc1\x93\xda\xe2\x8f\x00\x64\x49\x7a\xd6\xc2\x9f\xc2\x66\xa4\x6f\xdd\x14\xed\x64\x27\x67\x60\x7a\x04\xc6\xaa\x83\xbf\x8c\x1f\x6b\x5b\x15\x46\xe4\x74\x3d\x4b\x6b\xb6\x07\x2c\x33\xe0\x61\xc9\x61\x58\xba\x86\x45\x1e\x61\x73\xb6\xa1\xf4\x5e\x7e\xf5\x2a\xde\x8e\xec\x4a\x21\x12\x33\x68\x93\x94\x21\x93\xf1\x46\x52\xb6\xbe\xbd\x19\x2f\xff\xed\x4d\x2c\xfd\xd3\xc9\xc4\xdf\x72\x53\x6b\x7c\x61\x6c\x6f\xf2\x0e\xee\x11\x64\xfb\x3d\x98\xd3\x1e\xe3\x56\x26\x51\xeb\xec\x45\x83\x3f\xf4\xde\x29\xef\xde\xe8\xc4\xf5\x23\x5e\x7f\x77\x87\xe9\x67\xb3\xdb\x36\x62\xca\xa7\xda\x82\xc6\xb8\x3e\x29\x8e\x24\x17\x70\x18\x7e\x93\x44\x2c\x27\xfe\x0c\xfd\x30\x43\x92\xff\x98\x82\x44\xab\xa9\xe1\x98\x24\x5f\x48\xe6\x20\x66\x9d\xf0\x10\xac\x49\xb9\xf2\x1d\x0c\x18\x1e\x00\xd9\x76\x48\x3c\x35\xe8\xdb\x0e\x87\xcf\x3a\x1d\x50\xea\xae\xf3\xe1\x19\xac\xdf\x7a\x2e\x3c\xe6\x60\x40\x05\xf4\xc9\x30\x75\x83\x0e\x87\x27\x8f\xfb\xce\x7e\x54\x19\xac\xa7\x8f\x9b\x89\xed\x3f\x91\x41\x4f\x18\x8f\xc1\x0c\xff\x81\x33\xf5\xd5\x9f\x50\x4f\xe9\xac\xe0\x40\x8a\x7a\x82\x4c\xe1\x3f\xc4\x26\x9e\xbe\xf1\xf6\x0c\x5c\xfd\x54\xbf\x92\x01\x4a\xaf\x94\xfb\x04\xa4\x5a\x4e\x17\xc1\xcf\xa8\xe5\xbd\xfe\x70\x6b\x31\xdf\x5e\x3f\x3f\xb9\x9c\x8f\x57\xc7\xfd\x8a\xe3\xf6\x37\x18\xcf\xbe\xad\x65\x2f\x60\x8b\x7b\x1e\xaa\x5e\x1b\x98\x8f\x62\x97\xb6\x59\x5b\xa1\xdb\x96\x80\x9f\x08\xdc\x58\x7a\xed\x9b\x5d\x31\xb9\x28\xb0\x62\x00\xf2\xb2\xa1\x61\xe6\xfd\xde\x2e\xf7\x5a\xbe\xad\x3e\x6f\xcf\xc4\xfd\xbd\x1e\xcd\xb3\xfd\xd2\x6c\x87\x3b\x1c\x68\x3e\x98\x43\xd7\x55\x75\x76\x0b\x0e\x2f\xe2\x74\x01\xfe\xfe\xdb\x3d\x1d\x4b\xae\x8a\x93\x75\xcb\xb4\xa8\xfc\x65\x2f\x11\xec\xf4\xc8\x19\xa8\x2b\x6a\xd5\xd2\xc1\x44\x91\xf1\x46\x95\xf6\xdb\x6f\xc8\xdb\x17\xea\x2a\x65\x4e\x4b\xce\x5a\xb2\x9b\x15\xab\x2c\xab\x07\x13\x17\x1c\xf6\xc4\x39\xcf\x9c\x06\x3d\xe9\x9c\xc7\x7c\x14\xb6\x5a\x82\x25\xed\x68\xaa\xeb\x7f\x5e\x39\x4d\x55\x69\x18\x58\xf8\xcf\x02\xd2\xcf\xff\xf6\x9f\x70\x78\x08\x16\xfe\x3d\x20\x7f\xfb\xcd\xdc\x55\xf2\xe1\x68\x85\xa6\x47\x32\x1f\x17\xf7\x5e\x8c\xcb\x7b\x2f\xb6\x0a\x5c\x77\x12\xc7\x0a\x5b\x57\x59\xe0\xa3\x2e\x57\x26\xfd\x8f\x23\x9e\x5e\xca\x9a\xfa\xc0\x40\x68\x99\x5d\xaa\x1a\x3e\x0a\xbb\x04\xcd\x2a\x75\x4d\xcd\x3f\x93\x66\xad\x19\x48\x05\xab\x52\x8a\xca\x80\x90\xe0\x3b\x75\x21\x2f\x7d\x39\x4c\x2a\x19\xaf\x93\x6f\xe4\xe0\x89\x39\x9c\x9e\x75\xff\xb1\xe3\x3e\x87\xcc\x17\xad\x84\x3c\x1c\x67\xd4\xcc\x5d\x3f\x9c\x78\x1f\x2f\x82\xc3\x35\xe6\x2f\x19\xe7\xfa\xf8\xeb\x5e\x11\xc3\x09\x57\x2f\x24\xbe\x78\x17\xbc\x23\xe3\xe3\x00\x7a\x06\xd7\xd8\xe2\xf1\x50\xc0\x30\x0a\xf1\x9c\x70\x9d\x6e\x88\xae\xba\x08\x0e\xcc\x06\xe8\x52\x43\xb4\x01\x2e\x91\x1f\x0b\x65\x3a\x03\x48\xd1\x24\x7a\x00\x13\x3f\xe7\x38\x2c\xa9\x53\xeb\x88\xcf\x81\x64\xcf\xbf\x1e\x98\x04\x24\xf3\x0d\xe2\x28\x8e\x29\xf3\x26\x94\xa1\x33\xdb\x00\x33\x2c\x3c\x16\xce\xfe\x44\x22\x05\x34\xac\x04\x48\x69\x00\xe9\x30\x0d\xdd\x63\x42\x7f\x46\x58\x83\xa7\x23\xc0\x8a\xd8\xb7\xee\x82\x36\x3a\x32\x04\x97\x6e\xaa\x1b\xd0\x12\xf9\xb1\xc0\xee\xba\xc1\x66\xd4\x01\x12\x7e\xbf\x74\xb7\xd8\x67\xc1\x8f\xdc\x19\x41\x8f\x8c\xd8\x8d\x1d\x79\xb1\x81\x1c\x35\x05\x1b\xc8\x11\xf9\xb1\xc8\xf5\x7a\x9e\x24\x20\x89\x1e\xc2\xd1\x3d\x61\x34\x52\xb3\xd2\x11\x9f\x11\x4a\xf2\x6f\x04\xca\xa5\x6f\x92\x76\x41\xe9\xcd\x1f\x42\xe9\xbb\x8d\x0d\x2c\x3d\xfd\xb1\x60\xf6\xbb\xa9\x04\x4d\xbf\x90\x63\x6c\x7a\x65\x0e\x4e\xdf\x11\x75\xd4\x67\xc4\xd3\xab\x1d\x01\x74\x15\x7a\xb0\x5d\x88\x06\x17\x66\xbd\x06\x2c\x8e\x6b\x2c\xa4\x03\x9b\xbc\xf7\x84\x37\x0e\xa5\xc1\x16\x3f\x0b\x59\x67\x39\x2c\x16\x71\xfd\x8d\xc5\x4e\x6d\x62\x61\x01\xb6\x78\xdd\xb0\x36\xeb\xb5\x12\x76\x7a\x3f\xfd\x7f\x00\x00\x00\xff\xff\xd9\xbf\xc5\x7e\x7f\x2e\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 11903, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
