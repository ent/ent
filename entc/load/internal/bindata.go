// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x51\x4f\xdb\x30\x14\x85\x9f\xe3\x5f\x71\x16\x31\x91\xb0\xe2\x02\x6f\x9b\xd4\x07\x04\x9d\xd4\x69\x83\x49\x45\xda\x03\x43\xc8\x75\x6e\x5a\x8b\xd4\xce\xae\x5d\xb4\xca\xca\x7f\x9f\xec\xb4\x6c\x7b\x4b\x7c\xbe\x7b\xce\xb9\x76\x8c\xd3\x33\x71\xe3\xfa\x3d\x9b\xf5\x26\xe0\xea\xe2\xf2\xe3\x79\xcf\xe4\xc9\x06\x7c\x56\x9a\x56\xce\xbd\x60\x61\xb5\xc4\x75\xd7\x21\x43\x1e\x49\xe7\x57\x6a\xa4\x78\xd8\x18\x0f\xef\x76\xac\x09\xda\x35\x04\xe3\xd1\x19\x4d\xd6\x53\x83\x9d\x6d\x88\x11\x36\x84\xeb\x5e\xe9\x0d\xe1\x4a\x5e\x1c\x55\xb4\x6e\x67\x1b\x61\x6c\xd6\xbf\x2e\x6e\xe6\x77\xcb\x39\x5a\xd3\x11\x0e\x67\xec\x5c\x40\x63\x98\x74\x70\xbc\x87\x6b\x11\xfe\x09\x0b\x4c\x24\xc5\xd9\x74\x18\x84\x88\x11\x0d\xb5\xc6\x12\xca\xad\x32\xb6\xc4\x30\x88\xe9\x14\x37\xa9\xcf\x9a\x2c\xb1\x0a\xd4\x60\xb5\xc7\x29\xd9\xa0\xdf\x8e\x4e\x25\x6e\xef\x71\x77\xff\x80\xf9\xed\xe2\x41\x8a\x5e\xe9\x17\xb5\x26\x24\x0f\x21\xcc\xb6\x77\x1c\x50\x89\xa2\x74\xbe\x14\x45\xb9\xda\x07\x4a\x1f\x31\x22\xd0\xb6\xef\x54\x20\x94\x23\xe5\x73\xa4\x28\xc8\x06\xaf\x37\xb4\x55\x88\x11\x3d\x1b\x1b\x5a\x94\xef\x7f\x95\x90\xdf\x0f\xde\xc3\x20\x6a\x21\x5e\x15\x63\x04\x3d\x66\x78\x7c\x22\x1b\xe4\xc2\x06\xe2\x56\x69\x8a\x29\xe2\x1c\xac\xec\x9a\x70\xf2\x3c\xc1\x89\x55\x5b\xc2\xa7\x19\xe4\x9d\xda\x92\x4f\x1e\xc5\xdf\x28\x99\xe0\xb7\x2c\x1f\x87\xf2\x30\x30\x0c\x93\xd1\x89\x6c\x93\x66\x06\x21\xda\x9d\xd5\x79\xbd\xaa\x46\x14\x45\xaa\xd1\x19\x4b\x1e\x8f\x4f\x8f\x4f\x69\x3f\x51\xb4\x8e\xf1\x3c\x39\xb4\x4b\xa1\x63\x8f\x63\xdb\x28\x8a\x62\x35\x01\x31\x27\xed\x9b\x62\xbf\x51\xdd\x32\x8b\xd5\xc8\xd4\xa2\x28\x4c\x9b\x89\x77\x33\x58\xd3\xe5\x99\xa2\x55\xa6\xab\x88\x39\xc9\xa9\xff\x98\x3b\x83\xea\x7b\xb2\x4d\x95\x7f\x27\x58\xd5\x22\xa9\xce\xcb\x65\x68\xdc\x2e\xc8\x1f\x6c\x02\x55\xf9\xea\xe5\x17\x67\xec\x11\x1c\xeb\x56\xe5\x4f\x5b\xd6\x75\xfd\xb6\xdb\x31\x25\xc5\x3b\xce\x4b\x8e\x5e\xc4\x3c\x7a\x2d\x03\x1b\xbb\x4e\x8c\x9c\x27\xa6\xaa\x3f\x64\x93\x0c\xce\x7f\x9b\x50\x5d\x66\xbb\xff\x5e\x79\xdc\x6c\x7c\xe4\x18\x8f\x17\xfa\x27\x00\x00\xff\xff\x54\xe7\x81\x8f\x3b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 827, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x5a\xdd\x6f\xdc\x36\x12\x7f\xde\xfd\x2b\xa6\x06\x1a\x68\x83\xad\xdc\x2b\x8a\xe2\x6e\x73\x7b\x40\x91\x26\xa8\xaf\x17\x37\x68\x92\xbe\x18\x41\x4a\x4b\x23\x9b\xb1\x44\x6e\x29\xae\x3f\xea\xfa\x7f\x3f\x70\x86\x94\x28\xad\xb4\xbb\xf1\x47\x5e\xb2\x1a\x72\x86\x33\x3f\xcd\x17\x47\x3e\x3c\x84\x97\x7a\x75\x63\xe4\xd9\xb9\x85\xef\xbe\xfd\xc7\xbf\xbe\x59\x19\xac\x51\x59\x78\x2d\x32\x3c\xd5\xfa\x02\x8e\x54\x96\xc2\x8f\x65\x09\xb4\xa9\x06\xb7\x6e\x2e\x31\x4f\xa7\x87\x87\xf0\xfe\x5c\xd6\x50\xeb\xb5\xc9\x10\x32\x9d\x23\xc8\x1a\x4a\x99\xa1\xaa\x31\x87\xb5\xca\xd1\x80\x3d\x47\xf8\x71\x25\xb2\x73\x84\xef\xd2\x6f\xc3\x2a\x14\x7a\xad\x72\x27\x42\x2a\xda\xf2\xbf\xa3\x97\xaf\x8e\xdf\xbd\x82\x42\x96\x18\x68\x46\x6b\x0b\xb9\x34\x98\x59\x6d\x6e\x40\x17\x60\xa3\xf3\xac\x41\x4c\xa7\xd3\x95\xc8\x2e\xc4\x19\x42\xa9\x45\x3e\x9d\xca\x6a\xa5\x8d\x85\x64\x3a\x39\x40\x95\xe9\x5c\xaa\xb3\xc3\xcf\xb5\x56\x07\xd3\xc9\x41\x51\x59\xf7\x9f\xc1\xa2\xc4\xcc\x1e\x4c\x69\x8f\x3d\xd3\xa9\xd4\x87\xa8\x68\x2d\x7e\x3e\xac\xb3\x73\xac\xc4\x08\xf9\x10\xf3\x33\x1c\x5b\x2b\x24\x96\xf9\xd8\xa2\x54\x39\x5e\x1f\x4c\x67\x53\x67\xfd\x3b\xa2\x81\x41\x8f\x7b\x0d\x42\x01\x2a\x9b\xfa\x05\x7b\x2e\x2c\x5c\x89\x9a\xcc\xc3\x1c\x0a\xa3\x2b\x10\x90\xe9\x6a\x55\x4a\x87\x71\x8d\x06\x3c\x04\xe9\xd4\xde\xac\x30\x88\xac\xad\x59\x67\x16\x6e\xa7\x93\x63\x51\x21\xf8\x7f\xb5\x35\x52\x9d\x41\xff\xdf\x1f\x0e\xa3\xc5\x81\x12\x15\xce\x75\x25\x2d\x56\x2b\x7b\x73\xf0\xc7\x74\xf2\x52\xab\x42\xfa\xfd\x4e\xad\xf8\xb9\xcb\x9b\xd1\x4a\x97\xfb\x55\x7e\x86\xb5\xdf\x76\xf2\xf1\xb9\x7b\x1c\x39\xd9\xa1\x59\x77\x99\x5f\x3b\x10\xeb\x86\x99\x1e\x87\x99\x09\xee\x1e\xf7\x91\x43\xd9\x1f\x7e\xf2\xf1\x39\x3d\x0e\x73\x4b\xde\xd9\x65\xff\x59\xeb\x8b\x48\xf3\xb7\xba\x96\x56\x6a\x35\xc0\x7e\xee\x76\x76\x99\xdf\xea\x52\x66\x37\xfb\x30\xaf\x68\x67\x97\xfb\x47\xa5\xb4\x15\x8e\xa1\x86\x4a\xac\x4e\xf8\x95\x7d\x94\xca\xa2\x29\x44\x86\xb7\x77\x81\x5b\xb4\x3b\x3b\x22\xee\xc8\xb5\x9a\x63\x73\xac\x33\x23\x4f\xb1\x06\x01\xab\x40\xf4\x21\xc6\x3e\xe9\x3d\xa7\xe1\x68\x7d\x27\xc2\x4d\x2a\x0b\x70\x78\x08\x4c\xf2\xfc\x04\xfd\xa1\xc3\x00\x4a\x59\xdb\x74\x3a\x79\x23\xaf\x31\x3f\x22\x63\x4f\xb5\x2e\x3d\x87\xcc\x84\xc5\x1a\x64\x11\x9d\x0a\xfa\xf4\x33\x66\xec\xde\x95\xe3\xfa\x46\x2a\x16\x20\x55\x38\x84\x8f\x24\x12\xc8\xf8\xe0\x8a\x48\x7c\x26\xdb\xcb\x0e\xb2\x19\x49\x4c\xbf\x47\x20\x31\xe3\x70\x1c\x8d\x46\xd2\x78\x28\x1d\xa9\x42\xb7\xdb\x9e\x13\x72\xe9\xfb\x9b\x15\x76\x16\x3c\xbb\x53\xa0\xcb\xfe\x5e\xc4\x87\xed\x38\xdd\x8a\x5e\x24\xbe\x93\x7f\x45\xba\x3f\x97\xca\xfe\xf0\xfd\x28\x77\x2d\xff\xea\x1d\xfe\x4a\xad\xab\xba\xd9\x76\xf2\x91\x41\xb9\x85\xe3\x39\xfc\x1e\x74\x69\xdc\x12\xdd\xe6\x2e\xff\x07\x25\xff\x5c\x37\x0a\x90\x5f\x0c\xfc\xf3\xfc\x6b\xda\xdc\x15\x70\x2c\xcb\x52\x9c\x96\xb8\x97\x00\xe5\x37\x77\x45\xfc\xba\x72\xbe\x2d\xca\xbd\x44\x68\xbf\xb9\x2b\xe2\x27\x2c\xc4\xba\xb4\xfb\x99\x91\xf3\xe6\x41\x09\xbf\x8b\xd2\xc1\x11\xc7\xf4\xb8\x84\x4f\x97\x6e\xf7\xa0\x9c\x5f\xa4\x72\x39\xd1\x97\xb4\xd4\x3f\x8e\xc9\xb9\x90\x2a\xef\xbd\x97\x55\x2e\x2c\x06\xb3\x76\xbd\x17\xda\xfc\x69\xd0\xae\xa3\xaa\x5a\xdb\xe6\x05\xed\x10\x24\xc3\xe6\xae\x8c\xdf\x45\x29\x73\x61\xb5\x21\x4f\xa3\xd8\x1f\x97\x71\xd9\x6c\xee\x39\xba\xd5\x46\x9c\xe1\x2f\x48\xf9\x77\x47\x98\xd4\xbc\xf9\xd3\x05\xde\xf4\x33\x78\x9c\xb2\x07\x33\x78\x9c\xc4\x79\xb5\xa7\x08\x2a\x47\xbe\xdc\x0b\x91\x3a\x6c\xee\xc9\xa0\x3c\xe9\x72\x84\xdb\x1b\x15\x83\x8e\x5d\x41\x06\x6d\xfe\xb4\x99\x39\xe2\x82\x02\x63\x25\x65\x57\x4d\x99\xbc\xd4\x55\x85\xcd\x3b\xd9\x01\x6c\xc6\x9b\x07\xaa\x12\xf5\x00\x9b\x49\x9a\xc8\xf7\xc8\xd1\xc4\xf7\x38\xad\x4e\x80\x79\x37\xef\xf6\xe4\xbc\x83\xb7\x9f\x99\x7f\xc3\xa2\xd1\x7a\x3b\xab\xc1\xe2\xd3\xa6\xda\xbf\x61\xd1\x6c\x1c\xec\xb0\x62\xfe\xf1\xac\x3c\xe2\xa0\x5b\x52\xf2\x91\xba\x44\x53\x6f\x75\xef\xa6\xc3\xa2\x9d\x7d\xbd\xff\x5c\x4b\x83\xf9\x6e\x76\xe3\x77\x8e\x07\xfa\x73\xd7\x3e\xa6\xdd\xd0\xdf\x23\xca\x1f\xab\xd3\xe2\x66\x65\xd3\xa9\x99\x7e\x0f\xaf\x66\xc6\xd6\xad\xa3\x17\xd5\x40\xb5\xe5\xcd\x44\x6d\xf7\x49\x48\x15\x7b\xf5\xd9\xfd\xdd\x43\x8d\x75\x84\x72\xe3\xae\x3b\x80\x66\x94\x8e\xf1\x8a\xdc\x33\x33\x48\xbd\xa0\x50\x01\x11\xa7\x14\xc3\x42\xbf\xb8\x5f\x5d\x59\x6d\xd2\x69\xb1\x56\x59\xe0\x4c\x30\xf7\x6f\xfa\xa7\x66\xc7\xcc\xfb\xfc\xed\x74\xa2\x10\x16\x4b\x78\xe6\x1e\x6f\xa7\x13\x17\x92\x8b\xc6\x93\x30\x4f\xdf\x8b\xb3\xb9\x23\xdf\xac\x70\x11\x93\x5d\x2c\x4f\x27\x94\x39\x62\xba\x7b\x76\x74\x86\x7e\xd1\xd0\xf9\xd9\xad\x78\xff\x5f\x84\x15\xff\xec\x96\x82\x6f\x2f\xfc\x52\x78\xe6\xb5\xa2\x3d\x8b\xd6\x8a\x70\x56\x0b\xed\x82\x96\xda\x67\xb7\x1a\x79\xeb\x02\x2a\x71\x81\xc9\xb0\xcf\xce\xe6\xd3\xc9\xdd\x74\x52\x68\x03\x9f\xe6\x20\xac\x43\xc5\x08\x75\x86\x4e\x64\xec\xf2\x0e\x25\x85\xa9\xc8\xf3\x96\x9a\x08\x3b\x23\x76\x59\xb8\xae\xc2\xf1\xb2\x8e\x2f\xe8\xf1\xab\x25\x28\x59\x06\x4e\x97\x7a\x96\xcd\xdb\x31\x58\xcc\x98\x1e\xb9\xc8\x12\x78\x5f\x44\x23\xf1\x06\xed\xda\x28\x50\xd8\x3a\x07\xb7\xdb\x8d\x77\x34\xe1\x42\x64\xf2\x0e\xfe\x39\xe4\x1e\xc4\x9b\x14\x79\x68\xab\x63\x07\x49\xf8\xea\x38\x07\x34\xc6\x3d\xdf\x92\x71\x45\x9e\xbe\x32\x26\x36\x28\xa8\x24\xcb\x39\x14\x95\x75\xcb\xda\x14\x09\x07\x01\x7c\xfd\xe7\x02\xbe\xbe\x3c\x98\x3b\x46\x7a\x5f\x5e\x02\xa3\x55\x13\x52\xcf\xe8\xa0\xdb\xbe\x37\x41\xc3\x43\x5e\x53\xe8\xee\x8a\xa3\xcc\xfb\x0e\x4b\x2b\xde\x65\xa9\xf9\x5e\xc4\x0b\x44\xd9\xf0\x4e\x5a\x6a\xfd\x33\xb4\xcc\x8b\x56\x87\xd0\x17\x4f\x27\x4d\x37\xdc\xae\x06\x8a\x5b\xf5\x1d\xe1\xa2\x95\x1b\x7a\x44\x06\x8c\xce\x8e\x7b\xc7\x05\x9d\xdd\xe9\x26\xdb\x9d\x4d\x73\xb8\x68\x6c\x6e\x3a\xc0\xbe\xdb\xd3\x72\xd7\xf1\xdb\xbe\x90\xd6\x4b\x54\x49\x91\xa7\x2d\x75\x46\x42\x42\x07\xd5\x9c\xd1\x50\x68\xb9\xe9\xa4\x9a\x33\x1a\xca\x46\x70\xc1\xae\xf0\x0a\xcd\x50\x84\x8f\xa7\x8c\xc6\x5e\xb1\x19\x7b\x75\x31\x1e\x7b\x75\x41\x7e\x01\xcb\xdd\xfe\x59\xc9\xba\x76\x69\x98\x2a\x87\x74\x4c\xee\xf8\xe0\xb5\x07\x73\x27\xcb\x79\x5f\x2b\xdb\xdd\x05\x17\x4b\xa0\x4b\xa0\x83\xd2\x5d\x0e\x67\x2f\x98\xfe\xd5\x12\xbe\x0d\xda\xd1\xa5\x71\x09\xcf\xdc\x42\xa4\x58\x78\xc1\x7e\x57\x7c\x15\x59\x36\x57\x11\x07\xec\xaf\x45\xd2\x7a\xce\x8c\x6e\x27\x09\x6b\xe1\x8a\x26\x8f\x02\xfc\x6d\x02\xe8\x8e\x03\x99\x50\x70\x8a\x40\xa3\x3b\xcc\xc1\x6a\xda\x73\x86\x0a\x8d\xa0\x80\x77\x9c\xaf\xb5\x01\xbc\x16\xd5\xaa\xc4\x39\x28\x6d\x41\x80\xcb\x03\xd4\xa0\x97\xf2\x02\xc1\xca\x0a\xd3\x63\x7d\x95\x92\xc6\x9f\x28\xf2\x9d\xc1\xae\x4a\xa5\x6f\x84\xa9\xcf\x45\x19\x6b\xf6\x82\x36\x44\x50\xb7\x56\xf1\x45\x6d\x19\x45\x40\x9c\xbe\xea\x62\xee\x78\xda\x1c\xc6\x85\x7b\xb3\xc2\xf1\xe8\x82\x92\x18\xff\x1c\x4a\x62\xc4\x9c\xc8\xfc\xda\xdd\xcf\x73\xbc\xee\x96\x39\x16\x7d\xdb\x9c\xfd\x8c\x08\x4e\x5b\x2a\xf7\xde\x15\x65\x7e\x4d\xbd\x34\x65\x07\xae\xec\x8b\x66\x81\x9f\xfb\x79\xc3\xad\xb4\x59\x23\x0e\x46\xb7\xd2\x09\xc5\x3b\x6f\xa9\xc7\xd0\x4f\x1a\xf9\x6d\xd1\x9b\x8a\x26\x97\x4d\xc8\xb8\x5f\x1a\x04\xfc\xf7\xdd\xaf\xc7\x8e\x99\xfa\x21\xff\xa2\x73\xe4\x17\x4d\x5b\x9c\x80\x77\x9d\xc9\x10\xff\xe7\x11\xea\x1c\x9a\xd4\xe1\x6c\xd7\x66\xf9\x93\x66\x90\x9c\xc2\xc9\xc7\xd3\x1b\x8b\xfc\xce\xdb\x8c\x5f\x53\x7e\x66\xde\x5b\x0a\x60\x55\xc8\x90\x6f\xfd\x10\x8c\x69\xc9\x6c\xa3\x1d\x90\x8a\x87\xd0\x49\xcf\xb9\x99\x6f\x36\xa3\xf0\x62\xbe\x2f\x2c\xd2\xb2\x08\xbe\x59\xa7\xce\x55\x68\xd0\x15\xe4\xb2\x5b\xee\x51\xa1\x3c\x16\x54\xa2\xae\x5c\xc0\xfb\x0a\x85\xa1\x3c\xb5\x83\xe6\xa8\x91\x05\x7d\x89\xc6\xc8\x1c\x9b\xe1\x5b\xbc\x9a\x0e\x66\x31\x8f\x54\x64\x65\x32\xe3\x88\x19\x4f\x65\x1d\x03\xd9\x05\x1f\xdf\x42\xee\x6b\x9b\xb3\x44\x81\x14\x05\xe1\xa0\x46\x91\xc7\x38\xcb\xe3\x82\x71\x63\xe5\x1a\x6e\xc6\x81\x9b\xef\x25\x88\xd5\x0a\x55\x9e\x78\xc2\xbc\x6d\x62\xa3\xb0\x4e\x66\x33\x0f\x93\x9f\x41\xc7\x06\xf8\x09\xf6\x53\x9a\xe0\x72\x4d\x63\x84\xd7\xc1\x9b\x11\xe6\xe7\x91\x21\x47\x41\xc9\x38\x57\x0d\x5a\xd3\x7b\xe9\x34\x4c\x7f\xfc\x77\xde\x3f\x86\xc7\xee\x8f\x7f\x8e\x67\xec\x54\x8f\x7a\xe6\x53\xe1\x07\x55\x75\x92\x21\x67\xb4\x9a\xeb\x96\xbc\x44\x05\xa7\xeb\xa2\x40\x03\x94\x03\x7d\x39\x08\x53\x77\xca\x6b\x3d\x09\xc9\xe9\xba\xf0\x49\xcc\xf5\xae\x4c\x9c\x8f\xa5\xb2\x0e\x0c\xa4\x61\x23\xce\x09\x9a\x43\xbd\x1d\x08\x34\x26\x76\x88\x22\x0a\x75\x5f\x2e\x88\xa5\x3d\xa3\x48\x7d\xc5\xae\x93\x4d\xc9\x9b\xa2\x9d\xec\xa8\x5e\xc6\xe5\xb2\xc9\x77\xf4\xab\xf6\x13\x7d\xab\xc3\xd7\x01\xbe\x10\xc6\xf9\xdd\x03\x96\xd4\xe0\x61\x99\x41\x3f\x69\xf6\x0b\x02\xc1\xe6\x74\x23\xe9\x9d\xf8\xea\xe4\xda\x2d\xd1\x15\x43\x24\xe7\x50\x45\x21\xc3\x2a\xd3\x6d\x48\x54\xbe\xa7\x1a\x2e\x15\xd5\x75\x53\x26\xa6\x93\x89\xbf\x57\xc7\xda\xf8\xc4\x58\x5d\xcf\x5a\xb8\x07\x90\xed\x36\x7e\xee\xf4\xc6\x6f\x55\xe4\xb5\x4e\x5f\x52\xf8\x73\xe7\x9d\x16\xed\x1b\x9d\xb8\xde\xc5\x9f\xdf\x5e\xa0\xba\xd1\xec\xb6\x0d\xa8\xf2\xa5\xba\x90\x32\xae\xa7\x6a\xc6\xa8\x4b\x78\x16\x7e\xb3\x44\x4a\x27\xbe\xde\x7e\x9e\x13\xc9\x7f\x47\x22\xa2\x35\xdc\x9c\x4c\xa2\x8f\x43\x0b\x90\xf3\x56\x78\x70\xd6\x28\x5d\xf9\x6e\x07\xea\x22\x00\x32\x56\x24\x1e\x1b\xf4\xb1\xe2\x70\xaf\xea\x40\x52\xb7\xd5\x87\x27\xd0\x7e\xb4\x2e\x3c\xa4\x30\xd0\x01\xfc\xb5\x34\x36\x83\x8b\xc3\xa3\xfb\x7d\xab\x3f\x1d\x19\xb4\xe7\xef\xba\x91\xee\x3f\xb3\x42\x8f\xe8\x8f\x41\x0d\xff\x6d\x37\xb6\xd5\x57\xa8\xc7\x34\x56\x16\xc0\x07\x75\x04\xd5\xa9\xff\x06\x1d\x59\xfa\xd6\xeb\xd3\x33\xf5\x8b\xed\x1a\x68\x0b\xab\xeb\x81\x96\x70\xb8\x27\xec\x16\x84\x6e\x35\xf0\x31\xcc\xe5\x80\x2f\xb0\xf7\x28\x07\x9d\x16\x73\xb4\x1e\x8c\xa7\xe0\x2f\xae\x08\xc3\x09\x76\xbf\xfc\x3a\xee\x04\x4d\xf9\x1c\xcd\x9c\xe1\xf5\xd0\x9e\x5d\x09\x70\x03\xf3\x41\xec\xe2\x4e\x6d\x14\xba\xb1\x18\xfe\x42\xe0\x86\x22\x74\xdf\x00\x6d\xe2\x93\x7d\xb3\xf1\xe1\x42\x94\x3c\x81\xbd\xdb\xdb\xe4\x4e\xd7\x38\x6a\xf3\x78\x30\xef\x6f\xf5\x60\xa8\xee\x17\xa9\xfb\x99\xd3\x0b\x37\xb5\x79\x5d\xa3\xc8\xcc\xd6\xc6\xcc\x41\x5f\x70\xe7\x1c\x05\xee\x89\x50\xbe\x47\xf9\x48\xda\x7e\xa5\x2f\xbc\x8e\xc3\x9b\x9c\xce\xaa\xb1\x33\xd8\x58\x05\xd9\xee\x9c\xd4\xe3\x93\xbe\x41\x73\x86\x66\xf6\x02\x76\xcb\xac\x78\x73\x22\xd4\xcc\x8f\x1c\xd8\x52\xe4\x59\xff\xbd\xec\xc4\x7d\xec\x1c\xdb\xf4\x10\x3b\xb7\xc8\x1c\xb3\xb3\x00\x9e\x58\xdf\xcb\xd0\x62\x1f\x43\xc7\x36\x3d\xc4\xd0\x2d\x32\x77\x1b\xda\xde\x29\xda\x90\x73\xfa\xb6\xc3\xc6\xbf\xff\x76\x4f\x47\xaa\xd0\xe9\xf1\xba\x42\x23\xb3\x64\xe6\x88\xbd\xf9\x63\x3b\x80\x7c\xed\x8e\xe8\x5e\x77\xc8\x20\xd5\x22\x15\xcf\xf8\xd2\xa4\x28\xb5\xb0\x3f\x7c\x3f\xeb\x20\x35\x50\x91\xd7\x0a\xaf\x57\x98\x59\xcc\x7b\xc3\x4b\x1a\xc0\x36\xb3\xd7\x05\x0f\x5f\xe3\xd9\x6b\x7d\x25\x6d\x76\x0e\x96\x4f\x27\x5b\xdc\xf5\xe0\x05\xbd\x43\x51\x23\x58\xf8\xcf\x12\xe2\x3f\x0c\xb2\xff\x84\x67\xcf\xc0\xc2\xbf\x7b\xe4\x1f\xbe\x5f\x10\xe4\xbd\x29\x25\x4f\x74\x1d\xca\x43\xe2\x3e\xc8\x61\x79\x1f\xe4\xa8\xc0\x75\x2b\x71\xa8\x68\xb7\x55\x13\xae\x8c\x58\xd5\xf1\x9f\x94\x79\xba\x50\x39\x5f\x93\x02\xa1\x42\x7b\xae\x73\xb8\x92\xf6\x1c\x0c\x66\xfa\x92\xef\xc6\xa8\xea\xb5\x41\x50\x1a\x56\x42\xc9\xac\x06\xa9\xc0\x5f\x64\xa5\x3a\xf3\xa5\x3e\xaa\xd2\x45\x1e\xfd\xf5\x0c\x78\xe2\x0c\x4e\x3e\xb6\x7f\xf2\x75\x37\x83\xc4\x17\xe4\x88\xdc\x9f\x0c\xe6\xe8\x6e\xe7\x4e\xbc\xef\x5b\x64\x01\x97\x54\x9b\x58\x39\x77\xcd\xbd\xec\x14\x68\x1a\x16\x77\x5c\xe2\xeb\xf7\xc1\x3a\x56\xbe\xf9\x54\x34\x87\x4b\xba\x01\x15\xa1\x38\x93\x17\x52\x0f\xe4\x2e\x82\xc1\xbb\xf2\x34\x18\x30\xef\xa1\xcb\xf7\x85\x0d\x70\x99\xfc\x50\x28\xe3\x11\x59\x8c\x26\xd3\x03\x98\xf4\x7d\xd5\x61\xc9\x17\x99\x96\xf8\x14\x48\x76\xec\xeb\x80\xc9\x40\xa2\xbf\x3f\x0d\xe2\x18\x33\x6f\x42\x19\x2e\x2e\x1b\x60\x86\x85\x87\xc2\xd9\x1d\xd8\xc5\x80\x86\x95\x00\x29\xcf\xf2\x1d\xa6\xe1\x72\x15\xd1\x9f\x10\xd6\x60\xe9\x00\xb0\xb2\xb9\xd6\x6d\x83\xb6\x31\xa4\x0f\x2e\x0f\x72\x36\xa0\x65\xf2\x43\x81\xdd\x36\xe0\x49\xf8\x82\xc4\xf8\xbd\x69\x87\x3c\x4f\x82\x1f\x9b\x33\x80\x1e\x2b\xb1\x1d\x3b\xb6\x62\x03\x39\x6e\x78\x37\x90\x63\xf2\x43\x91\xeb\xf4\xf3\x91\x43\x32\x3d\xb8\xa3\x7b\x22\x6f\xe4\x46\xbc\x25\x3e\x21\x94\x6c\xdf\x00\x94\xe7\xfe\x02\xb0\x0d\x4a\xaf\x7e\x1f\x4a\xdf\x49\x6f\x60\xe9\xe9\x0f\x05\xb3\x7b\x53\x88\xd0\xf4\x0b\x33\xf2\x4d\x7f\x98\x83\xd3\x77\xfb\x2d\xf5\x09\xf1\xf4\xc7\x0e\x00\xba\x0a\xf7\x8b\x6d\x88\x06\x13\xe6\x9d\xcb\x45\x33\xcd\xb4\x9d\xef\xba\xb3\xce\x13\xdd\xa6\xb5\x01\xeb\x3f\xf0\xc6\x4d\xd8\x5b\x4b\xad\xdc\xc4\xc2\x12\x6c\xfa\xaa\xc4\x2a\xe9\xb4\x12\x76\x7a\x37\xfd\x7f\x00\x00\x00\xff\xff\x6f\x4c\xde\x66\x84\x32\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 12932, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
