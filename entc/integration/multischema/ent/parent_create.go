// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/multischema/ent/parent"
	"entgo.io/ent/entc/integration/multischema/ent/user"
	"entgo.io/ent/schema/field"
)

// ParentCreate is the builder for creating a Parent entity.
type ParentCreate struct {
	config
	mutation *ParentMutation
	hooks    []Hook
}

// SetByAdoption sets the "by_adoption" field.
func (_c *ParentCreate) SetByAdoption(v bool) *ParentCreate {
	_c.mutation.SetByAdoption(v)
	return _c
}

// SetNillableByAdoption sets the "by_adoption" field if the given value is not nil.
func (_c *ParentCreate) SetNillableByAdoption(v *bool) *ParentCreate {
	if v != nil {
		_c.SetByAdoption(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *ParentCreate) SetUserID(v int) *ParentCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *ParentCreate) SetParentID(v int) *ParentCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetChildID sets the "child" edge to the User entity by ID.
func (_c *ParentCreate) SetChildID(id int) *ParentCreate {
	_c.mutation.SetChildID(id)
	return _c
}

// SetChild sets the "child" edge to the User entity.
func (_c *ParentCreate) SetChild(v *User) *ParentCreate {
	return _c.SetChildID(v.ID)
}

// SetParent sets the "parent" edge to the User entity.
func (_c *ParentCreate) SetParent(v *User) *ParentCreate {
	return _c.SetParentID(v.ID)
}

// Mutation returns the ParentMutation object of the builder.
func (_c *ParentCreate) Mutation() *ParentMutation {
	return _c.mutation
}

// Save creates the Parent in the database.
func (_c *ParentCreate) Save(ctx context.Context) (*Parent, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ParentCreate) SaveX(ctx context.Context) *Parent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ParentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ParentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ParentCreate) defaults() {
	if _, ok := _c.mutation.ByAdoption(); !ok {
		v := parent.DefaultByAdoption
		_c.mutation.SetByAdoption(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ParentCreate) check() error {
	if _, ok := _c.mutation.ByAdoption(); !ok {
		return &ValidationError{Name: "by_adoption", err: errors.New(`ent: missing required field "Parent.by_adoption"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Parent.user_id"`)}
	}
	if _, ok := _c.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "Parent.parent_id"`)}
	}
	if len(_c.mutation.ChildIDs()) == 0 {
		return &ValidationError{Name: "child", err: errors.New(`ent: missing required edge "Parent.child"`)}
	}
	if len(_c.mutation.ParentIDs()) == 0 {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required edge "Parent.parent"`)}
	}
	return nil
}

func (_c *ParentCreate) sqlSave(ctx context.Context) (*Parent, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ParentCreate) createSpec() (*Parent, *sqlgraph.CreateSpec) {
	var (
		_node = &Parent{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(parent.Table, sqlgraph.NewFieldSpec(parent.FieldID, field.TypeInt))
	)
	_spec.Schema = _c.schemaConfig.Parent
	if value, ok := _c.mutation.ByAdoption(); ok {
		_spec.SetField(parent.FieldByAdoption, field.TypeBool, value)
		_node.ByAdoption = value
	}
	if nodes := _c.mutation.ChildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parent.ChildTable,
			Columns: []string{parent.ChildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.Parent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parent.ParentTable,
			Columns: []string{parent.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		edge.Schema = _c.schemaConfig.Parent
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ParentCreateBulk is the builder for creating many Parent entities in bulk.
type ParentCreateBulk struct {
	config
	err      error
	builders []*ParentCreate
}

// Save creates the Parent entities in the database.
func (_c *ParentCreateBulk) Save(ctx context.Context) ([]*Parent, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Parent, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ParentCreateBulk) SaveX(ctx context.Context) []*Parent {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ParentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ParentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
