// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/multischema/ent/parent"
	"entgo.io/ent/entc/integration/multischema/ent/user"
)

// Parent is the model entity for the Parent schema.
type Parent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ByAdoption holds the value of the "by_adoption" field.
	ByAdoption bool `json:"by_adoption,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParentQuery when eager-loading is set.
	Edges        ParentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ParentEdges holds the relations/edges for other nodes in the graph.
type ParentEdges struct {
	// Child holds the value of the child edge.
	Child *User `json:"child,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *User `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChildOrErr returns the Child value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParentEdges) ChildOrErr() (*User, error) {
	if e.Child != nil {
		return e.Child, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "child"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParentEdges) ParentOrErr() (*User, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Parent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parent.FieldByAdoption:
			values[i] = new(sql.NullBool)
		case parent.FieldID, parent.FieldUserID, parent.FieldParentID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Parent fields.
func (_m *Parent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case parent.FieldByAdoption:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field by_adoption", values[i])
			} else if value.Valid {
				_m.ByAdoption = value.Bool
			}
		case parent.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = int(value.Int64)
			}
		case parent.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				_m.ParentID = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Parent.
// This includes values selected through modifiers, order, etc.
func (_m *Parent) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryChild queries the "child" edge of the Parent entity.
func (_m *Parent) QueryChild() *UserQuery {
	return NewParentClient(_m.config).QueryChild(_m)
}

// QueryParent queries the "parent" edge of the Parent entity.
func (_m *Parent) QueryParent() *UserQuery {
	return NewParentClient(_m.config).QueryParent(_m)
}

// Update returns a builder for updating this Parent.
// Note that you need to call Parent.Unwrap() before calling this method if this Parent
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Parent) Update() *ParentUpdateOne {
	return NewParentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Parent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Parent) Unwrap() *Parent {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Parent is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Parent) String() string {
	var builder strings.Builder
	builder.WriteString("Parent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("by_adoption=")
	builder.WriteString(fmt.Sprintf("%v", _m.ByAdoption))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// Parents is a parsable slice of Parent.
type Parents []*Parent
