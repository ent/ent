// Code generated by entc, DO NOT EDIT.

package enthook

import (
	"fmt"
	"time"

	"github.com/facebookincubator/ent"
	"github.com/facebookincubator/ent/entc/integration/enthook/card"
)

const (
	// Operation types.
	OpCreate    = "Create"
	OpDelete    = "Delete"
	OpDeleteOne = "DeleteOne"
	OpUpdate    = "Update"
	OpUpdateOne = "UpdateOne"

	// Node types.
	TypeCard = "Card"
)

// CardMutation represents an operation that mutate the Cards
// nodes in the graph.
type CardMutation struct {
	op, typ            string
	id                 *int
	boring             *time.Time
	number             *string
	name               *string
	clearedFields      map[string]bool
	friends            map[int]struct{}
	removedfriends     map[int]struct{}
	best_friend        map[int]struct{}
	clearedbest_friend bool
}

var _ ent.Mutation = (*CardMutation)(nil)

// newCardMutation creates new mutation for $n.Name.
func newCardMutation(op string) *CardMutation {
	return &CardMutation{
		op:            op,
		typ:           TypeCard,
		clearedFields: make(map[string]bool),
	}
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CardMutation) ID() (id int, _ bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBoring sets the boring field.
func (m *CardMutation) SetBoring(t time.Time) {
	m.boring = &t
}

// Boring returns the boring value in the mutation.
func (m *CardMutation) Boring() (r time.Time, _ bool) {
	v := m.boring
	if v == nil {
		return
	}
	return *v, true
}

// ResetBoring reset all changes of the boring field.
func (m *CardMutation) ResetBoring() {
	m.boring = nil
}

// SetNumber sets the number field.
func (m *CardMutation) SetNumber(s string) {
	m.number = &s
}

// Number returns the number value in the mutation.
func (m *CardMutation) Number() (r string, _ bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber reset all changes of the number field.
func (m *CardMutation) ResetNumber() {
	m.number = nil
}

// SetName sets the name field.
func (m *CardMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *CardMutation) Name() (r string, _ bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ClearName clears the value of name.
func (m *CardMutation) ClearName() {
	m.name = nil
	m.clearedFields[card.FieldName] = true
}

// NameCleared returns if the field name was cleared in this mutation.
func (m *CardMutation) NameCleared() bool {
	return m.clearedFields[card.FieldName]
}

// ResetName reset all changes of the name field.
func (m *CardMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, card.FieldName)
}

// AddFriendIDs adds the friends edge to Card by ids.
func (m *CardMutation) AddFriendIDs(ids ...int) {
	if m.friends == nil {
		m.friends = make(map[int]struct{})
	}
	for i := range ids {
		m.friends[ids[i]] = struct{}{}
	}
}

// RemoveFriendIDs removes the friends edge to Card by ids.
func (m *CardMutation) RemoveFriendIDs(ids ...int) {
	if m.removedfriends == nil {
		m.removedfriends = make(map[int]struct{})
	}
	for i := range ids {
		m.removedfriends[ids[i]] = struct{}{}
	}
}

// RemovedFriends returns the removed ids of friends.
func (m *CardMutation) RemovedFriendsIDs() (ids []int) {
	for id := range m.removedfriends {
		ids = append(ids, id)
	}
	return
}

// FriendsIDs returns the friends ids in the mutation.
func (m *CardMutation) FriendsIDs() (ids []int) {
	for id := range m.friends {
		ids = append(ids, id)
	}
	return
}

// ResetFriends reset all changes of the friends edge.
func (m *CardMutation) ResetFriends() {
	m.friends = nil
	m.removedfriends = nil
}

// SetBestFriendID sets the best_friend edge to Card by id.
func (m *CardMutation) SetBestFriendID(id int) {
	if m.best_friend == nil {
		m.best_friend = make(map[int]struct{})
	}
	m.best_friend[id] = struct{}{}
}

// ClearBestFriend clears the best_friend edge to Card.
func (m *CardMutation) ClearBestFriend() {
	m.clearedbest_friend = true
}

// BestFriendCleared returns if the edge best_friend was cleared.
func (m *CardMutation) BestFriendCleared() bool {
	return m.clearedbest_friend
}

// BestFriendIDs returns the best_friend ids in the mutation.
func (m *CardMutation) BestFriendIDs() (ids []int) {
	for id := range m.best_friend {
		ids = append(ids, id)
	}
	return
}

// ResetBestFriend reset all changes of the best_friend edge.
func (m *CardMutation) ResetBestFriend() {
	m.best_friend = nil
	m.clearedbest_friend = false
}

// Op returns the operation name.
func (m *CardMutation) Op() string {
	return m.op
}

// Type returns the node type of this mutation (Card).
func (m *CardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CardMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.boring != nil {
		fields = append(fields, card.FieldBoring)
	}
	if m.number != nil {
		fields = append(fields, card.FieldNumber)
	}
	if m.name != nil {
		fields = append(fields, card.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case card.FieldBoring:
		return m.Boring()
	case card.FieldNumber:
		return m.Number()
	case card.FieldName:
		return m.Name()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case card.FieldBoring:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoring(v)
		return nil
	case card.FieldNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case card.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Card numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CardMutation) ClearedFields() []string {
	var fields []string
	if m.clearedFields[card.FieldName] {
		fields = append(fields, card.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CardMutation) FieldCleared(name string) bool {
	return m.clearedFields[name]
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardMutation) ClearField(name string) error {
	switch name {
	case card.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown Card nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CardMutation) ResetField(name string) error {
	switch name {
	case card.FieldBoring:
		m.ResetBoring()
		return nil
	case card.FieldNumber:
		m.ResetNumber()
		return nil
	case card.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.friends != nil {
		edges = append(edges, card.EdgeFriends)
	}
	if m.best_friend != nil {
		edges = append(edges, card.EdgeBestFriend)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case card.EdgeFriends:
		ids := make([]int, 0, len(m.friends))
		for id := range m.friends {
			ids = append(ids, id)
		}
	case card.EdgeBestFriend:
		ids := make([]int, 0, len(m.best_friend))
		for id := range m.best_friend {
			ids = append(ids, id)
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfriends != nil {
		edges = append(edges, card.EdgeFriends)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case card.EdgeFriends:
		ids := make([]int, 0, len(m.removedfriends))
		for id := range m.removedfriends {
			ids = append(ids, id)
		}
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbest_friend {
		edges = append(edges, card.EdgeBestFriend)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CardMutation) EdgeCleared(name string) bool {
	switch name {
	case card.EdgeBestFriend:
		return m.clearedbest_friend
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CardMutation) ClearEdge(name string) error {
	switch name {
	case card.EdgeBestFriend:
		m.ClearBestFriend()
		return nil
	}
	return fmt.Errorf("unknown Card unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CardMutation) ResetEdge(name string) error {
	switch name {
	case card.EdgeFriends:
		m.ResetFriends()
		return nil
	case card.EdgeBestFriend:
		m.ResetBestFriend()
		return nil
	}
	return fmt.Errorf("unknown Card edge %s", name)
}
