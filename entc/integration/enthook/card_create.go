// Code generated by entc, DO NOT EDIT.

package enthook

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/entc/integration/enthook/card"
	"github.com/facebookincubator/ent/schema/field"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []ent.Hook
}

// SetBoring sets the boring field.
func (cc *CardCreate) SetBoring(t time.Time) *CardCreate {
	cc.mutation.SetBoring(t)
	return cc
}

// SetNillableBoring sets the boring field if the given value is not nil.
func (cc *CardCreate) SetNillableBoring(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetBoring(*t)
	}
	return cc
}

// SetNumber sets the number field.
func (cc *CardCreate) SetNumber(s string) *CardCreate {
	cc.mutation.SetNumber(s)
	return cc
}

// SetNillableNumber sets the number field if the given value is not nil.
func (cc *CardCreate) SetNillableNumber(s *string) *CardCreate {
	if s != nil {
		cc.SetNumber(*s)
	}
	return cc
}

// SetName sets the name field.
func (cc *CardCreate) SetName(s string) *CardCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the name field if the given value is not nil.
func (cc *CardCreate) SetNillableName(s *string) *CardCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// AddFriendIDs adds the friends edge to Card by ids.
func (cc *CardCreate) AddFriendIDs(ids ...int) *CardCreate {
	cc.mutation.AddFriendIDs(ids...)
	return cc
}

// AddFriends adds the friends edges to Card.
func (cc *CardCreate) AddFriends(c ...*Card) *CardCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddFriendIDs(ids...)
}

// SetBestFriendID sets the best_friend edge to Card by id.
func (cc *CardCreate) SetBestFriendID(id int) *CardCreate {
	cc.mutation.SetBestFriendID(id)
	return cc
}

// SetNillableBestFriendID sets the best_friend edge to Card by id if the given value is not nil.
func (cc *CardCreate) SetNillableBestFriendID(id *int) *CardCreate {
	if id != nil {
		cc = cc.SetBestFriendID(*id)
	}
	return cc
}

// SetBestFriend sets the best_friend edge to Card.
func (cc *CardCreate) SetBestFriend(c *Card) *CardCreate {
	return cc.SetBestFriendID(c.ID)
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	if _, ok := cc.mutation.Boring(); !ok {
		v := card.DefaultBoring()
		cc.mutation.SetBoring(v)
	}
	if _, ok := cc.mutation.Number(); !ok {
		v := card.DefaultNumber
		cc.mutation.SetNumber(v)
	}
	if v, ok := cc.mutation.Number(); ok {
		if err := card.NumberValidator(v); err != nil {
			return nil, fmt.Errorf("enthook: validator failed for field \"number\": %v", err)
		}
	}
	if len(cc.mutation.BestFriendIDs()) > 1 {
		return nil, errors.New("enthook: multiple assignments on a unique edge \"best_friend\"")
	}
	var (
		err  error
		node *Card
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut ent.Mutator = ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			return node, err
		})
		for _, hook := range cc.hooks {
			mut = hook(mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	var (
		c     = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Boring(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: card.FieldBoring,
		})
		c.Boring = value
	}
	if value, ok := cc.mutation.Number(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldNumber,
		})
		c.Number = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: card.FieldName,
		})
		c.Name = value
	}
	if nodes := cc.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   card.FriendsTable,
			Columns: card.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BestFriendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   card.BestFriendTable,
			Columns: []string{card.BestFriendColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}
