// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgeschema/ent/predicate"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweet"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweetlike"
	"entgo.io/ent/entc/integration/edgeschema/ent/user"
	"entgo.io/ent/schema/field"
)

// TweetLikeUpdate is the builder for updating TweetLike entities.
type TweetLikeUpdate struct {
	config
	hooks    []Hook
	mutation *TweetLikeMutation
}

// Where appends a list predicates to the TweetLikeUpdate builder.
func (_u *TweetLikeUpdate) Where(ps ...predicate.TweetLike) *TweetLikeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLikedAt sets the "liked_at" field.
func (_u *TweetLikeUpdate) SetLikedAt(v time.Time) *TweetLikeUpdate {
	_u.mutation.SetLikedAt(v)
	return _u
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (_u *TweetLikeUpdate) SetNillableLikedAt(v *time.Time) *TweetLikeUpdate {
	if v != nil {
		_u.SetLikedAt(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *TweetLikeUpdate) SetUserID(v int) *TweetLikeUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *TweetLikeUpdate) SetNillableUserID(v *int) *TweetLikeUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTweetID sets the "tweet_id" field.
func (_u *TweetLikeUpdate) SetTweetID(v int) *TweetLikeUpdate {
	_u.mutation.SetTweetID(v)
	return _u
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (_u *TweetLikeUpdate) SetNillableTweetID(v *int) *TweetLikeUpdate {
	if v != nil {
		_u.SetTweetID(*v)
	}
	return _u
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (_u *TweetLikeUpdate) SetTweet(v *Tweet) *TweetLikeUpdate {
	return _u.SetTweetID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *TweetLikeUpdate) SetUser(v *User) *TweetLikeUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TweetLikeMutation object of the builder.
func (_u *TweetLikeUpdate) Mutation() *TweetLikeMutation {
	return _u.mutation
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (_u *TweetLikeUpdate) ClearTweet() *TweetLikeUpdate {
	_u.mutation.ClearTweet()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TweetLikeUpdate) ClearUser() *TweetLikeUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TweetLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TweetLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TweetLikeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TweetLikeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TweetLikeUpdate) check() error {
	if _u.mutation.TweetCleared() && len(_u.mutation.TweetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetLike.tweet"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetLike.user"`)
	}
	return nil
}

func (_u *TweetLikeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweetlike.Table, tweetlike.Columns, sqlgraph.NewFieldSpec(tweetlike.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(tweetlike.FieldTweetID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LikedAt(); ok {
		_spec.SetField(tweetlike.FieldLikedAt, field.TypeTime, value)
	}
	if _u.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.TweetTable,
			Columns: []string{tweetlike.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.TweetTable,
			Columns: []string{tweetlike.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.UserTable,
			Columns: []string{tweetlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.UserTable,
			Columns: []string{tweetlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweetlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TweetLikeUpdateOne is the builder for updating a single TweetLike entity.
type TweetLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetLikeMutation
}

// SetLikedAt sets the "liked_at" field.
func (_u *TweetLikeUpdateOne) SetLikedAt(v time.Time) *TweetLikeUpdateOne {
	_u.mutation.SetLikedAt(v)
	return _u
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (_u *TweetLikeUpdateOne) SetNillableLikedAt(v *time.Time) *TweetLikeUpdateOne {
	if v != nil {
		_u.SetLikedAt(*v)
	}
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *TweetLikeUpdateOne) SetUserID(v int) *TweetLikeUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *TweetLikeUpdateOne) SetNillableUserID(v *int) *TweetLikeUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTweetID sets the "tweet_id" field.
func (_u *TweetLikeUpdateOne) SetTweetID(v int) *TweetLikeUpdateOne {
	_u.mutation.SetTweetID(v)
	return _u
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (_u *TweetLikeUpdateOne) SetNillableTweetID(v *int) *TweetLikeUpdateOne {
	if v != nil {
		_u.SetTweetID(*v)
	}
	return _u
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (_u *TweetLikeUpdateOne) SetTweet(v *Tweet) *TweetLikeUpdateOne {
	return _u.SetTweetID(v.ID)
}

// SetUser sets the "user" edge to the User entity.
func (_u *TweetLikeUpdateOne) SetUser(v *User) *TweetLikeUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the TweetLikeMutation object of the builder.
func (_u *TweetLikeUpdateOne) Mutation() *TweetLikeMutation {
	return _u.mutation
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (_u *TweetLikeUpdateOne) ClearTweet() *TweetLikeUpdateOne {
	_u.mutation.ClearTweet()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TweetLikeUpdateOne) ClearUser() *TweetLikeUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the TweetLikeUpdate builder.
func (_u *TweetLikeUpdateOne) Where(ps ...predicate.TweetLike) *TweetLikeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TweetLikeUpdateOne) Select(field string, fields ...string) *TweetLikeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TweetLike entity.
func (_u *TweetLikeUpdateOne) Save(ctx context.Context) (*TweetLike, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TweetLikeUpdateOne) SaveX(ctx context.Context) *TweetLike {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TweetLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TweetLikeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TweetLikeUpdateOne) check() error {
	if _u.mutation.TweetCleared() && len(_u.mutation.TweetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetLike.tweet"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetLike.user"`)
	}
	return nil
}

func (_u *TweetLikeUpdateOne) sqlSave(ctx context.Context) (_node *TweetLike, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweetlike.Table, tweetlike.Columns, sqlgraph.NewFieldSpec(tweetlike.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(tweetlike.FieldTweetID, field.TypeInt))
	if id, ok := _u.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "TweetLike.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := _u.mutation.TweetID(); !ok {
		return nil, &ValidationError{Name: "tweet_id", err: errors.New(`ent: missing "TweetLike.tweet_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !tweetlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LikedAt(); ok {
		_spec.SetField(tweetlike.FieldLikedAt, field.TypeTime, value)
	}
	if _u.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.TweetTable,
			Columns: []string{tweetlike.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.TweetTable,
			Columns: []string{tweetlike.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.UserTable,
			Columns: []string{tweetlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.UserTable,
			Columns: []string{tweetlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TweetLike{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweetlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
