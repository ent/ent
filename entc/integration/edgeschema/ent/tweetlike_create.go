// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweet"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweetlike"
	"entgo.io/ent/entc/integration/edgeschema/ent/user"
	"entgo.io/ent/schema/field"
)

// TweetLikeCreate is the builder for creating a TweetLike entity.
type TweetLikeCreate struct {
	config
	mutation *TweetLikeMutation
	hooks    []Hook
}

// SetLikedAt sets the "liked_at" field.
func (tlc *TweetLikeCreate) SetLikedAt(t time.Time) *TweetLikeCreate {
	tlc.mutation.SetLikedAt(t)
	return tlc
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (tlc *TweetLikeCreate) SetNillableLikedAt(t *time.Time) *TweetLikeCreate {
	if t != nil {
		tlc.SetLikedAt(*t)
	}
	return tlc
}

// SetUserID sets the "user_id" field.
func (tlc *TweetLikeCreate) SetUserID(i int) *TweetLikeCreate {
	tlc.mutation.SetUserID(i)
	return tlc
}

// SetTweetID sets the "tweet_id" field.
func (tlc *TweetLikeCreate) SetTweetID(i int) *TweetLikeCreate {
	tlc.mutation.SetTweetID(i)
	return tlc
}

// SetUser sets the "user" edge to the User entity.
func (tlc *TweetLikeCreate) SetUser(u *User) *TweetLikeCreate {
	return tlc.SetUserID(u.ID)
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (tlc *TweetLikeCreate) SetTweet(t *Tweet) *TweetLikeCreate {
	return tlc.SetTweetID(t.ID)
}

// Mutation returns the TweetLikeMutation object of the builder.
func (tlc *TweetLikeCreate) Mutation() *TweetLikeMutation {
	return tlc.mutation
}

// Save creates the TweetLike in the database.
func (tlc *TweetLikeCreate) Save(ctx context.Context) (*TweetLike, error) {
	var (
		err  error
		node *TweetLike
	)
	tlc.defaults()
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TweetLikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tlc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TweetLike)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TweetLikeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TweetLikeCreate) SaveX(ctx context.Context) *TweetLike {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TweetLikeCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TweetLikeCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TweetLikeCreate) defaults() {
	if _, ok := tlc.mutation.LikedAt(); !ok {
		v := tweetlike.DefaultLikedAt()
		tlc.mutation.SetLikedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TweetLikeCreate) check() error {
	if _, ok := tlc.mutation.LikedAt(); !ok {
		return &ValidationError{Name: "liked_at", err: errors.New(`ent: missing required field "TweetLike.liked_at"`)}
	}
	if _, ok := tlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TweetLike.user_id"`)}
	}
	if _, ok := tlc.mutation.TweetID(); !ok {
		return &ValidationError{Name: "tweet_id", err: errors.New(`ent: missing required field "TweetLike.tweet_id"`)}
	}
	if _, ok := tlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TweetLike.user"`)}
	}
	if _, ok := tlc.mutation.TweetID(); !ok {
		return &ValidationError{Name: "tweet", err: errors.New(`ent: missing required edge "TweetLike.tweet"`)}
	}
	return nil
}

func (tlc *TweetLikeCreate) sqlSave(ctx context.Context) (*TweetLike, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

func (tlc *TweetLikeCreate) createSpec() (*TweetLike, *sqlgraph.CreateSpec) {
	var (
		_node = &TweetLike{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tweetlike.Table,
		}
	)
	if value, ok := tlc.mutation.LikedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tweetlike.FieldLikedAt,
		})
		_node.LikedAt = value
	}
	if nodes := tlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.UserTable,
			Columns: []string{tweetlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tlc.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweetlike.TweetTable,
			Columns: []string{tweetlike.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tweet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TweetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TweetLikeCreateBulk is the builder for creating many TweetLike entities in bulk.
type TweetLikeCreateBulk struct {
	config
	builders []*TweetLikeCreate
}

// Save creates the TweetLike entities in the database.
func (tlcb *TweetLikeCreateBulk) Save(ctx context.Context) ([]*TweetLike, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TweetLike, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TweetLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TweetLikeCreateBulk) SaveX(ctx context.Context) []*TweetLike {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TweetLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TweetLikeCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
