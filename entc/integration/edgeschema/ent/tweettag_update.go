// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgeschema/ent/predicate"
	"entgo.io/ent/entc/integration/edgeschema/ent/tag"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweet"
	"entgo.io/ent/entc/integration/edgeschema/ent/tweettag"
	"entgo.io/ent/schema/field"
)

// TweetTagUpdate is the builder for updating TweetTag entities.
type TweetTagUpdate struct {
	config
	hooks    []Hook
	mutation *TweetTagMutation
}

// Where appends a list predicates to the TweetTagUpdate builder.
func (_u *TweetTagUpdate) Where(ps ...predicate.TweetTag) *TweetTagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAddedAt sets the "added_at" field.
func (_u *TweetTagUpdate) SetAddedAt(t time.Time) *TweetTagUpdate {
	_u.mutation.SetAddedAt(t)
	return _u
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (_u *TweetTagUpdate) SetNillableAddedAt(t *time.Time) *TweetTagUpdate {
	if t != nil {
		_u.SetAddedAt(*t)
	}
	return _u
}

// SetTagID sets the "tag_id" field.
func (_u *TweetTagUpdate) SetTagID(i int) *TweetTagUpdate {
	_u.mutation.SetTagID(i)
	return _u
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (_u *TweetTagUpdate) SetNillableTagID(i *int) *TweetTagUpdate {
	if i != nil {
		_u.SetTagID(*i)
	}
	return _u
}

// SetTweetID sets the "tweet_id" field.
func (_u *TweetTagUpdate) SetTweetID(i int) *TweetTagUpdate {
	_u.mutation.SetTweetID(i)
	return _u
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (_u *TweetTagUpdate) SetNillableTweetID(i *int) *TweetTagUpdate {
	if i != nil {
		_u.SetTweetID(*i)
	}
	return _u
}

// SetTag sets the "tag" edge to the Tag entity.
func (_u *TweetTagUpdate) SetTag(t *Tag) *TweetTagUpdate {
	return _u.SetTagID(t.ID)
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (_u *TweetTagUpdate) SetTweet(t *Tweet) *TweetTagUpdate {
	return _u.SetTweetID(t.ID)
}

// Mutation returns the TweetTagMutation object of the builder.
func (_u *TweetTagUpdate) Mutation() *TweetTagMutation {
	return _u.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (_u *TweetTagUpdate) ClearTag() *TweetTagUpdate {
	_u.mutation.ClearTag()
	return _u
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (_u *TweetTagUpdate) ClearTweet() *TweetTagUpdate {
	_u.mutation.ClearTweet()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TweetTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TweetTagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TweetTagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TweetTagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TweetTagUpdate) check() error {
	if _u.mutation.TagCleared() && len(_u.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetTag.tag"`)
	}
	if _u.mutation.TweetCleared() && len(_u.mutation.TweetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetTag.tweet"`)
	}
	return nil
}

func (_u *TweetTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := _u.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweettag.Table, tweettag.Columns, sqlgraph.NewFieldSpec(tweettag.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AddedAt(); ok {
		_spec.SetField(tweettag.FieldAddedAt, field.TypeTime, value)
	}
	if _u.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TagTable,
			Columns: []string{tweettag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TagTable,
			Columns: []string{tweettag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TweetTable,
			Columns: []string{tweettag.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TweetTable,
			Columns: []string{tweettag.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweettag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return n, nil
}

// TweetTagUpdateOne is the builder for updating a single TweetTag entity.
type TweetTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetTagMutation
}

// SetAddedAt sets the "added_at" field.
func (_u *TweetTagUpdateOne) SetAddedAt(t time.Time) *TweetTagUpdateOne {
	_u.mutation.SetAddedAt(t)
	return _u
}

// SetNillableAddedAt sets the "added_at" field if the given value is not nil.
func (_u *TweetTagUpdateOne) SetNillableAddedAt(t *time.Time) *TweetTagUpdateOne {
	if t != nil {
		_u.SetAddedAt(*t)
	}
	return _u
}

// SetTagID sets the "tag_id" field.
func (_u *TweetTagUpdateOne) SetTagID(i int) *TweetTagUpdateOne {
	_u.mutation.SetTagID(i)
	return _u
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (_u *TweetTagUpdateOne) SetNillableTagID(i *int) *TweetTagUpdateOne {
	if i != nil {
		_u.SetTagID(*i)
	}
	return _u
}

// SetTweetID sets the "tweet_id" field.
func (_u *TweetTagUpdateOne) SetTweetID(i int) *TweetTagUpdateOne {
	_u.mutation.SetTweetID(i)
	return _u
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (_u *TweetTagUpdateOne) SetNillableTweetID(i *int) *TweetTagUpdateOne {
	if i != nil {
		_u.SetTweetID(*i)
	}
	return _u
}

// SetTag sets the "tag" edge to the Tag entity.
func (_u *TweetTagUpdateOne) SetTag(t *Tag) *TweetTagUpdateOne {
	return _u.SetTagID(t.ID)
}

// SetTweet sets the "tweet" edge to the Tweet entity.
func (_u *TweetTagUpdateOne) SetTweet(t *Tweet) *TweetTagUpdateOne {
	return _u.SetTweetID(t.ID)
}

// Mutation returns the TweetTagMutation object of the builder.
func (_u *TweetTagUpdateOne) Mutation() *TweetTagMutation {
	return _u.mutation
}

// ClearTag clears the "tag" edge to the Tag entity.
func (_u *TweetTagUpdateOne) ClearTag() *TweetTagUpdateOne {
	_u.mutation.ClearTag()
	return _u
}

// ClearTweet clears the "tweet" edge to the Tweet entity.
func (_u *TweetTagUpdateOne) ClearTweet() *TweetTagUpdateOne {
	_u.mutation.ClearTweet()
	return _u
}

// Where appends a list predicates to the TweetTagUpdate builder.
func (_u *TweetTagUpdateOne) Where(ps ...predicate.TweetTag) *TweetTagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TweetTagUpdateOne) Select(field string, fields ...string) *TweetTagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TweetTag entity.
func (_u *TweetTagUpdateOne) Save(ctx context.Context) (*TweetTag, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TweetTagUpdateOne) SaveX(ctx context.Context) *TweetTag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TweetTagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TweetTagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TweetTagUpdateOne) check() error {
	if _u.mutation.TagCleared() && len(_u.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetTag.tag"`)
	}
	if _u.mutation.TweetCleared() && len(_u.mutation.TweetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TweetTag.tweet"`)
	}
	return nil
}

func (_u *TweetTagUpdateOne) sqlSave(ctx context.Context) (_node *TweetTag, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweettag.Table, tweettag.Columns, sqlgraph.NewFieldSpec(tweettag.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TweetTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tweettag.FieldID)
		for _, f := range fields {
			if !tweettag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tweettag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AddedAt(); ok {
		_spec.SetField(tweettag.FieldAddedAt, field.TypeTime, value)
	}
	if _u.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TagTable,
			Columns: []string{tweettag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TagTable,
			Columns: []string{tweettag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TweetTable,
			Columns: []string{tweettag.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tweettag.TweetTable,
			Columns: []string{tweettag.TweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TweetTag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweettag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
