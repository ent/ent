// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgeschema/ent/predicate"
	"entgo.io/ent/entc/integration/edgeschema/ent/relationship"
	"entgo.io/ent/entc/integration/edgeschema/ent/relationshipinfo"
	"entgo.io/ent/entc/integration/edgeschema/ent/user"
	"entgo.io/ent/schema/field"
)

// RelationshipUpdate is the builder for updating Relationship entities.
type RelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *RelationshipMutation
}

// Where appends a list predicates to the RelationshipUpdate builder.
func (u *RelationshipUpdate) Where(ps ...predicate.Relationship) *RelationshipUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetWeight sets the "weight" field.
func (m *RelationshipUpdate) SetWeight(v int) *RelationshipUpdate {
	m.mutation.ResetWeight()
	m.mutation.SetWeight(v)
	return m
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (m *RelationshipUpdate) SetNillableWeight(v *int) *RelationshipUpdate {
	if v != nil {
		m.SetWeight(*v)
	}
	return m
}

// AddWeight adds value to the "weight" field.
func (m *RelationshipUpdate) AddWeight(v int) *RelationshipUpdate {
	m.mutation.AddWeight(v)
	return m
}

// SetUserID sets the "user_id" field.
func (m *RelationshipUpdate) SetUserID(v int) *RelationshipUpdate {
	m.mutation.SetUserID(v)
	return m
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (m *RelationshipUpdate) SetNillableUserID(v *int) *RelationshipUpdate {
	if v != nil {
		m.SetUserID(*v)
	}
	return m
}

// SetRelativeID sets the "relative_id" field.
func (m *RelationshipUpdate) SetRelativeID(v int) *RelationshipUpdate {
	m.mutation.SetRelativeID(v)
	return m
}

// SetNillableRelativeID sets the "relative_id" field if the given value is not nil.
func (m *RelationshipUpdate) SetNillableRelativeID(v *int) *RelationshipUpdate {
	if v != nil {
		m.SetRelativeID(*v)
	}
	return m
}

// SetInfoID sets the "info_id" field.
func (m *RelationshipUpdate) SetInfoID(v int) *RelationshipUpdate {
	m.mutation.SetInfoID(v)
	return m
}

// SetNillableInfoID sets the "info_id" field if the given value is not nil.
func (m *RelationshipUpdate) SetNillableInfoID(v *int) *RelationshipUpdate {
	if v != nil {
		m.SetInfoID(*v)
	}
	return m
}

// ClearInfoID clears the value of the "info_id" field.
func (m *RelationshipUpdate) ClearInfoID() *RelationshipUpdate {
	m.mutation.ClearInfoID()
	return m
}

// SetUser sets the "user" edge to the User entity.
func (m *RelationshipUpdate) SetUser(v *User) *RelationshipUpdate {
	return m.SetUserID(v.ID)
}

// SetRelative sets the "relative" edge to the User entity.
func (m *RelationshipUpdate) SetRelative(v *User) *RelationshipUpdate {
	return m.SetRelativeID(v.ID)
}

// SetInfo sets the "info" edge to the RelationshipInfo entity.
func (m *RelationshipUpdate) SetInfo(v *RelationshipInfo) *RelationshipUpdate {
	return m.SetInfoID(v.ID)
}

// Mutation returns the RelationshipMutation object of the builder.
func (m *RelationshipUpdate) Mutation() *RelationshipMutation {
	return m.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (u *RelationshipUpdate) ClearUser() *RelationshipUpdate {
	u.mutation.ClearUser()
	return u
}

// ClearRelative clears the "relative" edge to the User entity.
func (u *RelationshipUpdate) ClearRelative() *RelationshipUpdate {
	u.mutation.ClearRelative()
	return u
}

// ClearInfo clears the "info" edge to the RelationshipInfo entity.
func (u *RelationshipUpdate) ClearInfo() *RelationshipUpdate {
	u.mutation.ClearInfo()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *RelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *RelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *RelationshipUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RelationshipUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *RelationshipUpdate) check() error {
	if u.mutation.UserCleared() && len(u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.user"`)
	}
	if u.mutation.RelativeCleared() && len(u.mutation.RelativeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.relative"`)
	}
	return nil
}

func (u *RelationshipUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(relationship.Table, relationship.Columns, sqlgraph.NewFieldSpec(relationship.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(relationship.FieldRelativeID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Weight(); ok {
		_spec.SetField(relationship.FieldWeight, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedWeight(); ok {
		_spec.AddField(relationship.FieldWeight, field.TypeInt, value)
	}
	if u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.UserTable,
			Columns: []string{relationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.UserTable,
			Columns: []string{relationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.RelativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.RelativeTable,
			Columns: []string{relationship.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RelativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.RelativeTable,
			Columns: []string{relationship.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.InfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.InfoTable,
			Columns: []string{relationship.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationshipinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.InfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.InfoTable,
			Columns: []string{relationship.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationshipinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// RelationshipUpdateOne is the builder for updating a single Relationship entity.
type RelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RelationshipMutation
}

// SetWeight sets the "weight" field.
func (m *RelationshipUpdateOne) SetWeight(v int) *RelationshipUpdateOne {
	m.mutation.ResetWeight()
	m.mutation.SetWeight(v)
	return m
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (m *RelationshipUpdateOne) SetNillableWeight(v *int) *RelationshipUpdateOne {
	if v != nil {
		m.SetWeight(*v)
	}
	return m
}

// AddWeight adds value to the "weight" field.
func (m *RelationshipUpdateOne) AddWeight(v int) *RelationshipUpdateOne {
	m.mutation.AddWeight(v)
	return m
}

// SetUserID sets the "user_id" field.
func (m *RelationshipUpdateOne) SetUserID(v int) *RelationshipUpdateOne {
	m.mutation.SetUserID(v)
	return m
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (m *RelationshipUpdateOne) SetNillableUserID(v *int) *RelationshipUpdateOne {
	if v != nil {
		m.SetUserID(*v)
	}
	return m
}

// SetRelativeID sets the "relative_id" field.
func (m *RelationshipUpdateOne) SetRelativeID(v int) *RelationshipUpdateOne {
	m.mutation.SetRelativeID(v)
	return m
}

// SetNillableRelativeID sets the "relative_id" field if the given value is not nil.
func (m *RelationshipUpdateOne) SetNillableRelativeID(v *int) *RelationshipUpdateOne {
	if v != nil {
		m.SetRelativeID(*v)
	}
	return m
}

// SetInfoID sets the "info_id" field.
func (m *RelationshipUpdateOne) SetInfoID(v int) *RelationshipUpdateOne {
	m.mutation.SetInfoID(v)
	return m
}

// SetNillableInfoID sets the "info_id" field if the given value is not nil.
func (m *RelationshipUpdateOne) SetNillableInfoID(v *int) *RelationshipUpdateOne {
	if v != nil {
		m.SetInfoID(*v)
	}
	return m
}

// ClearInfoID clears the value of the "info_id" field.
func (m *RelationshipUpdateOne) ClearInfoID() *RelationshipUpdateOne {
	m.mutation.ClearInfoID()
	return m
}

// SetUser sets the "user" edge to the User entity.
func (m *RelationshipUpdateOne) SetUser(v *User) *RelationshipUpdateOne {
	return m.SetUserID(v.ID)
}

// SetRelative sets the "relative" edge to the User entity.
func (m *RelationshipUpdateOne) SetRelative(v *User) *RelationshipUpdateOne {
	return m.SetRelativeID(v.ID)
}

// SetInfo sets the "info" edge to the RelationshipInfo entity.
func (m *RelationshipUpdateOne) SetInfo(v *RelationshipInfo) *RelationshipUpdateOne {
	return m.SetInfoID(v.ID)
}

// Mutation returns the RelationshipMutation object of the builder.
func (m *RelationshipUpdateOne) Mutation() *RelationshipMutation {
	return m.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (u *RelationshipUpdateOne) ClearUser() *RelationshipUpdateOne {
	u.mutation.ClearUser()
	return u
}

// ClearRelative clears the "relative" edge to the User entity.
func (u *RelationshipUpdateOne) ClearRelative() *RelationshipUpdateOne {
	u.mutation.ClearRelative()
	return u
}

// ClearInfo clears the "info" edge to the RelationshipInfo entity.
func (u *RelationshipUpdateOne) ClearInfo() *RelationshipUpdateOne {
	u.mutation.ClearInfo()
	return u
}

// Where appends a list predicates to the RelationshipUpdate builder.
func (u *RelationshipUpdateOne) Where(ps ...predicate.Relationship) *RelationshipUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *RelationshipUpdateOne) Select(field string, fields ...string) *RelationshipUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Relationship entity.
func (u *RelationshipUpdateOne) Save(ctx context.Context) (*Relationship, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *RelationshipUpdateOne) SaveX(ctx context.Context) *Relationship {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *RelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *RelationshipUpdateOne) check() error {
	if u.mutation.UserCleared() && len(u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.user"`)
	}
	if u.mutation.RelativeCleared() && len(u.mutation.RelativeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Relationship.relative"`)
	}
	return nil
}

func (u *RelationshipUpdateOne) sqlSave(ctx context.Context) (_n *Relationship, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(relationship.Table, relationship.Columns, sqlgraph.NewFieldSpec(relationship.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(relationship.FieldRelativeID, field.TypeInt))
	if id, ok := u.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Relationship.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := u.mutation.RelativeID(); !ok {
		return nil, &ValidationError{Name: "relative_id", err: errors.New(`ent: missing "Relationship.relative_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !relationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Weight(); ok {
		_spec.SetField(relationship.FieldWeight, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedWeight(); ok {
		_spec.AddField(relationship.FieldWeight, field.TypeInt, value)
	}
	if u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.UserTable,
			Columns: []string{relationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.UserTable,
			Columns: []string{relationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.RelativeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.RelativeTable,
			Columns: []string{relationship.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RelativeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.RelativeTable,
			Columns: []string{relationship.RelativeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.InfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.InfoTable,
			Columns: []string{relationship.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationshipinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.InfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   relationship.InfoTable,
			Columns: []string{relationship.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(relationshipinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Relationship{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{relationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
