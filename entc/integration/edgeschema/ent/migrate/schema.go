// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FriendshipsColumns holds the columns for the "friendships" table.
	FriendshipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "weight", Type: field.TypeInt, Default: 1},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "friend_id", Type: field.TypeInt},
	}
	// FriendshipsTable holds the schema information for the "friendships" table.
	FriendshipsTable = &schema.Table{
		Name:       "friendships",
		Columns:    FriendshipsColumns,
		PrimaryKey: []*schema.Column{FriendshipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "friendships_users_user",
				Columns:    []*schema.Column{FriendshipsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "friendships_users_friend",
				Columns:    []*schema.Column{FriendshipsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "friendship_user_id_friend_id",
				Unique:  true,
				Columns: []*schema.Column{FriendshipsColumns[3], FriendshipsColumns[4]},
			},
			{
				Name:    "friendship_created_at",
				Unique:  false,
				Columns: []*schema.Column{FriendshipsColumns[2]},
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "Unknown"},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// RelationshipsColumns holds the columns for the "relationships" table.
	RelationshipsColumns = []*schema.Column{
		{Name: "weight", Type: field.TypeInt, Default: 1},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "relative_id", Type: field.TypeInt},
	}
	// RelationshipsTable holds the schema information for the "relationships" table.
	RelationshipsTable = &schema.Table{
		Name:       "relationships",
		Columns:    RelationshipsColumns,
		PrimaryKey: []*schema.Column{RelationshipsColumns[1], RelationshipsColumns[2]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "relationships_users_user",
				Columns:    []*schema.Column{RelationshipsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "relationships_users_relative",
				Columns:    []*schema.Column{RelationshipsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "relationship_weight",
				Unique:  false,
				Columns: []*schema.Column{RelationshipsColumns[0]},
			},
		},
	}
	// TweetsColumns holds the columns for the "tweets" table.
	TweetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "text", Type: field.TypeString, Size: 2147483647},
	}
	// TweetsTable holds the schema information for the "tweets" table.
	TweetsTable = &schema.Table{
		Name:       "tweets",
		Columns:    TweetsColumns,
		PrimaryKey: []*schema.Column{TweetsColumns[0]},
	}
	// TweetLikesColumns holds the columns for the "tweet_likes" table.
	TweetLikesColumns = []*schema.Column{
		{Name: "liked_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "tweet_id", Type: field.TypeInt},
	}
	// TweetLikesTable holds the schema information for the "tweet_likes" table.
	TweetLikesTable = &schema.Table{
		Name:       "tweet_likes",
		Columns:    TweetLikesColumns,
		PrimaryKey: []*schema.Column{TweetLikesColumns[1], TweetLikesColumns[2]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tweet_likes_users_user",
				Columns:    []*schema.Column{TweetLikesColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tweet_likes_tweets_tweet",
				Columns:    []*schema.Column{TweetLikesColumns[2]},
				RefColumns: []*schema.Column{TweetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "Unknown"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserGroupsColumns holds the columns for the "user_groups" table.
	UserGroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "group_id", Type: field.TypeInt},
	}
	// UserGroupsTable holds the schema information for the "user_groups" table.
	UserGroupsTable = &schema.Table{
		Name:       "user_groups",
		Columns:    UserGroupsColumns,
		PrimaryKey: []*schema.Column{UserGroupsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_groups_users_user",
				Columns:    []*schema.Column{UserGroupsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_groups_groups_group",
				Columns:    []*schema.Column{UserGroupsColumns[3]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usergroup_user_id_group_id",
				Unique:  true,
				Columns: []*schema.Column{UserGroupsColumns[2], UserGroupsColumns[3]},
			},
		},
	}
	// UserTweetsColumns holds the columns for the "user_tweets" table.
	UserTweetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
		{Name: "tweet_id", Type: field.TypeInt},
	}
	// UserTweetsTable holds the schema information for the "user_tweets" table.
	UserTweetsTable = &schema.Table{
		Name:       "user_tweets",
		Columns:    UserTweetsColumns,
		PrimaryKey: []*schema.Column{UserTweetsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tweets_users_user",
				Columns:    []*schema.Column{UserTweetsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_tweets_tweets_tweet",
				Columns:    []*schema.Column{UserTweetsColumns[3]},
				RefColumns: []*schema.Column{TweetsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usertweet_user_id_tweet_id",
				Unique:  true,
				Columns: []*schema.Column{UserTweetsColumns[2], UserTweetsColumns[3]},
			},
			{
				Name:    "usertweet_tweet_id",
				Unique:  true,
				Columns: []*schema.Column{UserTweetsColumns[3]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FriendshipsTable,
		GroupsTable,
		RelationshipsTable,
		TweetsTable,
		TweetLikesTable,
		UsersTable,
		UserGroupsTable,
		UserTweetsTable,
	}
)

func init() {
	FriendshipsTable.ForeignKeys[0].RefTable = UsersTable
	FriendshipsTable.ForeignKeys[1].RefTable = UsersTable
	RelationshipsTable.ForeignKeys[0].RefTable = UsersTable
	RelationshipsTable.ForeignKeys[1].RefTable = UsersTable
	TweetLikesTable.ForeignKeys[0].RefTable = UsersTable
	TweetLikesTable.ForeignKeys[1].RefTable = TweetsTable
	UserGroupsTable.ForeignKeys[0].RefTable = UsersTable
	UserGroupsTable.ForeignKeys[1].RefTable = GroupsTable
	UserTweetsTable.ForeignKeys[0].RefTable = UsersTable
	UserTweetsTable.ForeignKeys[1].RefTable = TweetsTable
}
