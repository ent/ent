// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/intsid"
	"entgo.io/ent/entc/integration/customid/sid"
	"entgo.io/ent/schema/field"
)

// IntSidCreate is the builder for creating a IntSid entity.
type IntSidCreate struct {
	config
	mutation *IntSidMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetID sets the "id" field.
func (isc *IntSidCreate) SetID(s sid.ID) *IntSidCreate {
	isc.mutation.SetID(s)
	return isc
}

// SetParentID sets the "parent" edge to the IntSid entity by ID.
func (isc *IntSidCreate) SetParentID(id sid.ID) *IntSidCreate {
	isc.mutation.SetParentID(id)
	return isc
}

// SetNillableParentID sets the "parent" edge to the IntSid entity by ID if the given value is not nil.
func (isc *IntSidCreate) SetNillableParentID(id *sid.ID) *IntSidCreate {
	if id != nil {
		isc = isc.SetParentID(*id)
	}
	return isc
}

// SetParent sets the "parent" edge to the IntSid entity.
func (isc *IntSidCreate) SetParent(i *IntSid) *IntSidCreate {
	return isc.SetParentID(i.ID)
}

// AddChildIDs adds the "children" edge to the IntSid entity by IDs.
func (isc *IntSidCreate) AddChildIDs(ids ...sid.ID) *IntSidCreate {
	isc.mutation.AddChildIDs(ids...)
	return isc
}

// AddChildren adds the "children" edges to the IntSid entity.
func (isc *IntSidCreate) AddChildren(i ...*IntSid) *IntSidCreate {
	ids := make([]sid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return isc.AddChildIDs(ids...)
}

// Mutation returns the IntSidMutation object of the builder.
func (isc *IntSidCreate) Mutation() *IntSidMutation {
	return isc.mutation
}

// Save creates the IntSid in the database.
func (isc *IntSidCreate) Save(ctx context.Context) (*IntSid, error) {
	var (
		err  error
		node *IntSid
	)
	if len(isc.hooks) == 0 {
		if err = isc.check(); err != nil {
			return nil, err
		}
		node, err = isc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IntSidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = isc.check(); err != nil {
				return nil, err
			}
			isc.mutation = mutation
			if node, err = isc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(isc.hooks) - 1; i >= 0; i-- {
			if isc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = isc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, isc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IntSid)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IntSidMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (isc *IntSidCreate) SaveX(ctx context.Context) *IntSid {
	v, err := isc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (isc *IntSidCreate) Exec(ctx context.Context) error {
	_, err := isc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (isc *IntSidCreate) ExecX(ctx context.Context) {
	if err := isc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (isc *IntSidCreate) check() error {
	return nil
}

func (isc *IntSidCreate) sqlSave(ctx context.Context) (*IntSid, error) {
	_node, _spec := isc.createSpec()
	if err := sqlgraph.CreateNode(ctx, isc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*sid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (isc *IntSidCreate) createSpec() (*IntSid, *sqlgraph.CreateSpec) {
	var (
		_node = &IntSid{config: isc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: intsid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: intsid.FieldID,
			},
		}
	)
	_spec.OnConflict = isc.conflict
	if id, ok := isc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := isc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   intsid.ParentTable,
			Columns: []string{intsid.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: intsid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.int_sid_parent = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := isc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   intsid.ChildrenTable,
			Columns: []string{intsid.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: intsid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntSid.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (isc *IntSidCreate) OnConflict(opts ...sql.ConflictOption) *IntSidUpsertOne {
	isc.conflict = opts
	return &IntSidUpsertOne{
		create: isc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntSid.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (isc *IntSidCreate) OnConflictColumns(columns ...string) *IntSidUpsertOne {
	isc.conflict = append(isc.conflict, sql.ConflictColumns(columns...))
	return &IntSidUpsertOne{
		create: isc,
	}
}

type (
	// IntSidUpsertOne is the builder for "upsert"-ing
	//  one IntSid node.
	IntSidUpsertOne struct {
		create *IntSidCreate
	}

	// IntSidUpsert is the "OnConflict" setter.
	IntSidUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IntSid.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(intsid.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *IntSidUpsertOne) UpdateNewValues() *IntSidUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(intsid.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.IntSid.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *IntSidUpsertOne) Ignore() *IntSidUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntSidUpsertOne) DoNothing() *IntSidUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntSidCreate.OnConflict
// documentation for more info.
func (u *IntSidUpsertOne) Update(set func(*IntSidUpsert)) *IntSidUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntSidUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *IntSidUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IntSidCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntSidUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IntSidUpsertOne) ID(ctx context.Context) (id sid.ID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IntSidUpsertOne) IDX(ctx context.Context) sid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IntSidCreateBulk is the builder for creating many IntSid entities in bulk.
type IntSidCreateBulk struct {
	config
	builders []*IntSidCreate
	conflict []sql.ConflictOption
}

// Save creates the IntSid entities in the database.
func (iscb *IntSidCreateBulk) Save(ctx context.Context) ([]*IntSid, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iscb.builders))
	nodes := make([]*IntSid, len(iscb.builders))
	mutators := make([]Mutator, len(iscb.builders))
	for i := range iscb.builders {
		func(i int, root context.Context) {
			builder := iscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IntSidMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					nodes[i].ID.Scan(specs[i].ID.Value)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iscb *IntSidCreateBulk) SaveX(ctx context.Context) []*IntSid {
	v, err := iscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iscb *IntSidCreateBulk) Exec(ctx context.Context) error {
	_, err := iscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iscb *IntSidCreateBulk) ExecX(ctx context.Context) {
	if err := iscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IntSid.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (iscb *IntSidCreateBulk) OnConflict(opts ...sql.ConflictOption) *IntSidUpsertBulk {
	iscb.conflict = opts
	return &IntSidUpsertBulk{
		create: iscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IntSid.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (iscb *IntSidCreateBulk) OnConflictColumns(columns ...string) *IntSidUpsertBulk {
	iscb.conflict = append(iscb.conflict, sql.ConflictColumns(columns...))
	return &IntSidUpsertBulk{
		create: iscb,
	}
}

// IntSidUpsertBulk is the builder for "upsert"-ing
// a bulk of IntSid nodes.
type IntSidUpsertBulk struct {
	create *IntSidCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IntSid.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(intsid.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *IntSidUpsertBulk) UpdateNewValues() *IntSidUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(intsid.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IntSid.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *IntSidUpsertBulk) Ignore() *IntSidUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IntSidUpsertBulk) DoNothing() *IntSidUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IntSidCreateBulk.OnConflict
// documentation for more info.
func (u *IntSidUpsertBulk) Update(set func(*IntSidUpsert)) *IntSidUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IntSidUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *IntSidUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IntSidCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IntSidCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IntSidUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
