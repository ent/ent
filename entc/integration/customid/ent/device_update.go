// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/device"
	"entgo.io/ent/entc/integration/customid/ent/predicate"
	"entgo.io/ent/entc/integration/customid/ent/schema"
	"entgo.io/ent/entc/integration/customid/ent/session"
	"entgo.io/ent/schema/field"
)

// DeviceUpdate is the builder for updating Device entities.
type DeviceUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceMutation
}

// Where appends a list predicates to the DeviceUpdate builder.
func (u *DeviceUpdate) Where(ps ...predicate.Device) *DeviceUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetActiveSessionID sets the "active_session" edge to the Session entity by ID.
func (m *DeviceUpdate) SetActiveSessionID(id schema.ID) *DeviceUpdate {
	m.mutation.SetActiveSessionID(id)
	return m
}

// SetNillableActiveSessionID sets the "active_session" edge to the Session entity by ID if the given value is not nil.
func (m *DeviceUpdate) SetNillableActiveSessionID(id *schema.ID) *DeviceUpdate {
	if id != nil {
		m = m.SetActiveSessionID(*id)
	}
	return m
}

// SetActiveSession sets the "active_session" edge to the Session entity.
func (m *DeviceUpdate) SetActiveSession(v *Session) *DeviceUpdate {
	return m.SetActiveSessionID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (m *DeviceUpdate) AddSessionIDs(ids ...schema.ID) *DeviceUpdate {
	m.mutation.AddSessionIDs(ids...)
	return m
}

// AddSessions adds the "sessions" edges to the Session entity.
func (m *DeviceUpdate) AddSessions(v ...*Session) *DeviceUpdate {
	ids := make([]schema.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddSessionIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (m *DeviceUpdate) Mutation() *DeviceMutation {
	return m.mutation
}

// ClearActiveSession clears the "active_session" edge to the Session entity.
func (u *DeviceUpdate) ClearActiveSession() *DeviceUpdate {
	u.mutation.ClearActiveSession()
	return u
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (u *DeviceUpdate) ClearSessions() *DeviceUpdate {
	u.mutation.ClearSessions()
	return u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (u *DeviceUpdate) RemoveSessionIDs(ids ...schema.ID) *DeviceUpdate {
	u.mutation.RemoveSessionIDs(ids...)
	return u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (u *DeviceUpdate) RemoveSessions(v ...*Session) *DeviceUpdate {
	ids := make([]schema.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *DeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *DeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *DeviceUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *DeviceUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeBytes))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if u.mutation.ActiveSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.ActiveSessionTable,
			Columns: []string{device.ActiveSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ActiveSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.ActiveSessionTable,
			Columns: []string{device.ActiveSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// DeviceUpdateOne is the builder for updating a single Device entity.
type DeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceMutation
}

// SetActiveSessionID sets the "active_session" edge to the Session entity by ID.
func (m *DeviceUpdateOne) SetActiveSessionID(id schema.ID) *DeviceUpdateOne {
	m.mutation.SetActiveSessionID(id)
	return m
}

// SetNillableActiveSessionID sets the "active_session" edge to the Session entity by ID if the given value is not nil.
func (m *DeviceUpdateOne) SetNillableActiveSessionID(id *schema.ID) *DeviceUpdateOne {
	if id != nil {
		m = m.SetActiveSessionID(*id)
	}
	return m
}

// SetActiveSession sets the "active_session" edge to the Session entity.
func (m *DeviceUpdateOne) SetActiveSession(v *Session) *DeviceUpdateOne {
	return m.SetActiveSessionID(v.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (m *DeviceUpdateOne) AddSessionIDs(ids ...schema.ID) *DeviceUpdateOne {
	m.mutation.AddSessionIDs(ids...)
	return m
}

// AddSessions adds the "sessions" edges to the Session entity.
func (m *DeviceUpdateOne) AddSessions(v ...*Session) *DeviceUpdateOne {
	ids := make([]schema.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddSessionIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (m *DeviceUpdateOne) Mutation() *DeviceMutation {
	return m.mutation
}

// ClearActiveSession clears the "active_session" edge to the Session entity.
func (u *DeviceUpdateOne) ClearActiveSession() *DeviceUpdateOne {
	u.mutation.ClearActiveSession()
	return u
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (u *DeviceUpdateOne) ClearSessions() *DeviceUpdateOne {
	u.mutation.ClearSessions()
	return u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (u *DeviceUpdateOne) RemoveSessionIDs(ids ...schema.ID) *DeviceUpdateOne {
	u.mutation.RemoveSessionIDs(ids...)
	return u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (u *DeviceUpdateOne) RemoveSessions(v ...*Session) *DeviceUpdateOne {
	ids := make([]schema.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveSessionIDs(ids...)
}

// Where appends a list predicates to the DeviceUpdate builder.
func (u *DeviceUpdateOne) Where(ps ...predicate.Device) *DeviceUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *DeviceUpdateOne) Select(field string, fields ...string) *DeviceUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Device entity.
func (u *DeviceUpdateOne) Save(ctx context.Context) (*Device, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *DeviceUpdateOne) SaveX(ctx context.Context) *Device {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *DeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *DeviceUpdateOne) sqlSave(ctx context.Context) (_n *Device, err error) {
	_spec := sqlgraph.NewUpdateSpec(device.Table, device.Columns, sqlgraph.NewFieldSpec(device.FieldID, field.TypeBytes))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Device.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, device.FieldID)
		for _, f := range fields {
			if !device.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != device.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if u.mutation.ActiveSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.ActiveSessionTable,
			Columns: []string{device.ActiveSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ActiveSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   device.ActiveSessionTable,
			Columns: []string{device.ActiveSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.SessionsTable,
			Columns: []string{device.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeBytes),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Device{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{device.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
