// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/blob"
	"entgo.io/ent/entc/integration/customid/ent/bloblink"
	"entgo.io/ent/entc/integration/customid/ent/predicate"
	"github.com/google/uuid"
)

// BlobLinkQuery is the builder for querying BlobLink entities.
type BlobLinkQuery struct {
	config
	ctx        *QueryContext
	order      []bloblink.OrderOption
	inters     []Interceptor
	predicates []predicate.BlobLink
	withBlob   *BlobQuery
	withLink   *BlobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BlobLinkQuery builder.
func (_q *BlobLinkQuery) Where(ps ...predicate.BlobLink) *BlobLinkQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *BlobLinkQuery) Limit(limit int) *BlobLinkQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *BlobLinkQuery) Offset(offset int) *BlobLinkQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *BlobLinkQuery) Unique(unique bool) *BlobLinkQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *BlobLinkQuery) Order(o ...bloblink.OrderOption) *BlobLinkQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryBlob chains the current query on the "blob" edge.
func (_q *BlobLinkQuery) QueryBlob() *BlobQuery {
	query := (&BlobClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bloblink.Table, bloblink.BlobColumn, selector),
			sqlgraph.To(blob.Table, blob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bloblink.BlobTable, bloblink.BlobColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLink chains the current query on the "link" edge.
func (_q *BlobLinkQuery) QueryLink() *BlobQuery {
	query := (&BlobClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bloblink.Table, bloblink.LinkColumn, selector),
			sqlgraph.To(blob.Table, blob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, bloblink.LinkTable, bloblink.LinkColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BlobLink entity from the query.
// Returns a *NotFoundError when no BlobLink was found.
func (_q *BlobLinkQuery) First(ctx context.Context) (*BlobLink, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bloblink.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *BlobLinkQuery) FirstX(ctx context.Context) *BlobLink {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single BlobLink entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BlobLink entity is found.
// Returns a *NotFoundError when no BlobLink entities are found.
func (_q *BlobLinkQuery) Only(ctx context.Context) (*BlobLink, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bloblink.Label}
	default:
		return nil, &NotSingularError{bloblink.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *BlobLinkQuery) OnlyX(ctx context.Context) *BlobLink {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of BlobLinks.
func (_q *BlobLinkQuery) All(ctx context.Context) ([]*BlobLink, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BlobLink, *BlobLinkQuery]()
	return withInterceptors[[]*BlobLink](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *BlobLinkQuery) AllX(ctx context.Context) []*BlobLink {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (_q *BlobLinkQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*BlobLinkQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *BlobLinkQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *BlobLinkQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *BlobLinkQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BlobLinkQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *BlobLinkQuery) Clone() *BlobLinkQuery {
	if _q == nil {
		return nil
	}
	return &BlobLinkQuery{
		config:     _q.config,
		ctx:        _q.ctx.Clone(),
		order:      append([]bloblink.OrderOption{}, _q.order...),
		inters:     append([]Interceptor{}, _q.inters...),
		predicates: append([]predicate.BlobLink{}, _q.predicates...),
		withBlob:   _q.withBlob.Clone(),
		withLink:   _q.withLink.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithBlob tells the query-builder to eager-load the nodes that are connected to
// the "blob" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BlobLinkQuery) WithBlob(opts ...func(*BlobQuery)) *BlobLinkQuery {
	query := (&BlobClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBlob = query
	return _q
}

// WithLink tells the query-builder to eager-load the nodes that are connected to
// the "link" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *BlobLinkQuery) WithLink(opts ...func(*BlobQuery)) *BlobLinkQuery {
	query := (&BlobClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withLink = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BlobLink.Query().
//		GroupBy(bloblink.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *BlobLinkQuery) GroupBy(field string, fields ...string) *BlobLinkGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BlobLinkGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = bloblink.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BlobLink.Query().
//		Select(bloblink.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *BlobLinkQuery) Select(fields ...string) *BlobLinkSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &BlobLinkSelect{BlobLinkQuery: _q}
	sbuild.label = bloblink.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BlobLinkSelect configured with the given aggregations.
func (_q *BlobLinkQuery) Aggregate(fns ...AggregateFunc) *BlobLinkSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *BlobLinkQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !bloblink.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *BlobLinkQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BlobLink, error) {
	var (
		nodes       = []*BlobLink{}
		_spec       = _q.querySpec()
		loadedTypes = [2]bool{
			_q.withBlob != nil,
			_q.withLink != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BlobLink).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BlobLink{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withBlob; query != nil {
		if err := _q.loadBlob(ctx, query, nodes, nil,
			func(n *BlobLink, e *Blob) { n.Edges.Blob = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withLink; query != nil {
		if err := _q.loadLink(ctx, query, nodes, nil,
			func(n *BlobLink, e *Blob) { n.Edges.Link = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *BlobLinkQuery) loadBlob(ctx context.Context, query *BlobQuery, nodes []*BlobLink, init func(*BlobLink), assign func(*BlobLink, *Blob)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BlobLink)
	for i := range nodes {
		fk := nodes[i].BlobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(blob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "blob_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *BlobLinkQuery) loadLink(ctx context.Context, query *BlobQuery, nodes []*BlobLink, init func(*BlobLink), assign func(*BlobLink, *Blob)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BlobLink)
	for i := range nodes {
		fk := nodes[i].LinkID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(blob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "link_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (_q *BlobLinkQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *BlobLinkQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bloblink.Table, bloblink.Columns, nil)
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if _q.withBlob != nil {
			_spec.Node.AddColumnOnce(bloblink.FieldBlobID)
		}
		if _q.withLink != nil {
			_spec.Node.AddColumnOnce(bloblink.FieldLinkID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *BlobLinkQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(bloblink.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = bloblink.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BlobLinkGroupBy is the group-by builder for BlobLink entities.
type BlobLinkGroupBy struct {
	selector
	build *BlobLinkQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (blgb *BlobLinkGroupBy) Aggregate(fns ...AggregateFunc) *BlobLinkGroupBy {
	blgb.fns = append(blgb.fns, fns...)
	return blgb
}

// Scan applies the selector query and scans the result into the given value.
func (blgb *BlobLinkGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, blgb.build.ctx, ent.OpQueryGroupBy)
	if err := blgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlobLinkQuery, *BlobLinkGroupBy](ctx, blgb.build, blgb, blgb.build.inters, v)
}

func (blgb *BlobLinkGroupBy) sqlScan(ctx context.Context, root *BlobLinkQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(blgb.fns))
	for _, fn := range blgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*blgb.flds)+len(blgb.fns))
		for _, f := range *blgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*blgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := blgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BlobLinkSelect is the builder for selecting fields of BlobLink entities.
type BlobLinkSelect struct {
	*BlobLinkQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bls *BlobLinkSelect) Aggregate(fns ...AggregateFunc) *BlobLinkSelect {
	bls.fns = append(bls.fns, fns...)
	return bls
}

// Scan applies the selector query and scans the result into the given value.
func (bls *BlobLinkSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bls.ctx, ent.OpQuerySelect)
	if err := bls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BlobLinkQuery, *BlobLinkSelect](ctx, bls.BlobLinkQuery, bls, bls.inters, v)
}

func (bls *BlobLinkSelect) sqlScan(ctx context.Context, root *BlobLinkQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bls.fns))
	for _, fn := range bls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
