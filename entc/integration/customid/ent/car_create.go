// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/entc/integration/customid/ent/car"
	"github.com/facebookincubator/ent/entc/integration/customid/ent/pet"
	"github.com/facebookincubator/ent/schema/field"
)

// CarCreate is the builder for creating a Car entity.
type CarCreate struct {
	config
	mutation *CarMutation
	hooks    []Hook
}

// SetBeforeID sets the before_id field.
func (cc *CarCreate) SetBeforeID(f float64) *CarCreate {
	cc.mutation.SetBeforeID(f)
	return cc
}

// SetNillableBeforeID sets the before_id field if the given value is not nil.
func (cc *CarCreate) SetNillableBeforeID(f *float64) *CarCreate {
	if f != nil {
		cc.SetBeforeID(*f)
	}
	return cc
}

// SetAfterID sets the after_id field.
func (cc *CarCreate) SetAfterID(f float64) *CarCreate {
	cc.mutation.SetAfterID(f)
	return cc
}

// SetNillableAfterID sets the after_id field if the given value is not nil.
func (cc *CarCreate) SetNillableAfterID(f *float64) *CarCreate {
	if f != nil {
		cc.SetAfterID(*f)
	}
	return cc
}

// SetModel sets the model field.
func (cc *CarCreate) SetModel(s string) *CarCreate {
	cc.mutation.SetModel(s)
	return cc
}

// SetID sets the id field.
func (cc *CarCreate) SetID(i int) *CarCreate {
	cc.mutation.SetID(i)
	return cc
}

// SetOwnerID sets the owner edge to Pet by id.
func (cc *CarCreate) SetOwnerID(id string) *CarCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the owner edge to Pet by id if the given value is not nil.
func (cc *CarCreate) SetNillableOwnerID(id *string) *CarCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the owner edge to Pet.
func (cc *CarCreate) SetOwner(p *Pet) *CarCreate {
	return cc.SetOwnerID(p.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cc *CarCreate) Mutation() *CarMutation {
	return cc.mutation
}

// Save creates the Car in the database.
func (cc *CarCreate) Save(ctx context.Context) (*Car, error) {
	if v, ok := cc.mutation.BeforeID(); ok {
		if err := car.BeforeIDValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"before_id\": %w", err)
		}
	}
	if v, ok := cc.mutation.AfterID(); ok {
		if err := car.AfterIDValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"after_id\": %w", err)
		}
	}
	if _, ok := cc.mutation.Model(); !ok {
		return nil, errors.New("ent: missing required field \"model\"")
	}
	if v, ok := cc.mutation.ID(); ok {
		if err := car.IDValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"id\": %w", err)
		}
	}
	var (
		err  error
		node *Car
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CarCreate) SaveX(ctx context.Context) *Car {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CarCreate) sqlSave(ctx context.Context) (*Car, error) {
	var (
		c     = &Car{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: car.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: car.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		c.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.BeforeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: car.FieldBeforeID,
		})
		c.BeforeID = value
	}
	if value, ok := cc.mutation.AfterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: car.FieldAfterID,
		})
		c.AfterID = value
	}
	if value, ok := cc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: car.FieldModel,
		})
		c.Model = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: pet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if c.ID == 0 {
		id := _spec.ID.Value.(int64)
		c.ID = int(id)
	}
	return c, nil
}
