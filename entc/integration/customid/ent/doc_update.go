// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/doc"
	"entgo.io/ent/entc/integration/customid/ent/predicate"
	"entgo.io/ent/entc/integration/customid/ent/schema"
	"entgo.io/ent/schema/field"
)

// DocUpdate is the builder for updating Doc entities.
type DocUpdate struct {
	config
	hooks    []Hook
	mutation *DocMutation
}

// Where appends a list predicates to the DocUpdate builder.
func (u *DocUpdate) Where(ps ...predicate.Doc) *DocUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetText sets the "text" field.
func (m *DocUpdate) SetText(v string) *DocUpdate {
	m.mutation.SetText(v)
	return m
}

// SetNillableText sets the "text" field if the given value is not nil.
func (m *DocUpdate) SetNillableText(v *string) *DocUpdate {
	if v != nil {
		m.SetText(*v)
	}
	return m
}

// ClearText clears the value of the "text" field.
func (m *DocUpdate) ClearText() *DocUpdate {
	m.mutation.ClearText()
	return m
}

// SetParentID sets the "parent" edge to the Doc entity by ID.
func (m *DocUpdate) SetParentID(id schema.DocID) *DocUpdate {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the Doc entity by ID if the given value is not nil.
func (m *DocUpdate) SetNillableParentID(id *schema.DocID) *DocUpdate {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the Doc entity.
func (m *DocUpdate) SetParent(v *Doc) *DocUpdate {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Doc entity by IDs.
func (m *DocUpdate) AddChildIDs(ids ...schema.DocID) *DocUpdate {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the Doc entity.
func (m *DocUpdate) AddChildren(v ...*Doc) *DocUpdate {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// AddRelatedIDs adds the "related" edge to the Doc entity by IDs.
func (m *DocUpdate) AddRelatedIDs(ids ...schema.DocID) *DocUpdate {
	m.mutation.AddRelatedIDs(ids...)
	return m
}

// AddRelated adds the "related" edges to the Doc entity.
func (m *DocUpdate) AddRelated(v ...*Doc) *DocUpdate {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddRelatedIDs(ids...)
}

// Mutation returns the DocMutation object of the builder.
func (m *DocUpdate) Mutation() *DocMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the Doc entity.
func (u *DocUpdate) ClearParent() *DocUpdate {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the Doc entity.
func (u *DocUpdate) ClearChildren() *DocUpdate {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to Doc entities by IDs.
func (u *DocUpdate) RemoveChildIDs(ids ...schema.DocID) *DocUpdate {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to Doc entities.
func (u *DocUpdate) RemoveChildren(v ...*Doc) *DocUpdate {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearRelated clears all "related" edges to the Doc entity.
func (u *DocUpdate) ClearRelated() *DocUpdate {
	u.mutation.ClearRelated()
	return u
}

// RemoveRelatedIDs removes the "related" edge to Doc entities by IDs.
func (u *DocUpdate) RemoveRelatedIDs(ids ...schema.DocID) *DocUpdate {
	u.mutation.RemoveRelatedIDs(ids...)
	return u
}

// RemoveRelated removes "related" edges to Doc entities.
func (u *DocUpdate) RemoveRelated(v ...*Doc) *DocUpdate {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveRelatedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *DocUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *DocUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *DocUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *DocUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(doc.Table, doc.Columns, sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Text(); ok {
		_spec.SetField(doc.FieldText, field.TypeString, value)
	}
	if u.mutation.TextCleared() {
		_spec.ClearField(doc.FieldText, field.TypeString)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doc.ParentTable,
			Columns: []string{doc.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doc.ParentTable,
			Columns: []string{doc.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedRelatedIDs(); len(nodes) > 0 && !u.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// DocUpdateOne is the builder for updating a single Doc entity.
type DocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocMutation
}

// SetText sets the "text" field.
func (m *DocUpdateOne) SetText(v string) *DocUpdateOne {
	m.mutation.SetText(v)
	return m
}

// SetNillableText sets the "text" field if the given value is not nil.
func (m *DocUpdateOne) SetNillableText(v *string) *DocUpdateOne {
	if v != nil {
		m.SetText(*v)
	}
	return m
}

// ClearText clears the value of the "text" field.
func (m *DocUpdateOne) ClearText() *DocUpdateOne {
	m.mutation.ClearText()
	return m
}

// SetParentID sets the "parent" edge to the Doc entity by ID.
func (m *DocUpdateOne) SetParentID(id schema.DocID) *DocUpdateOne {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the Doc entity by ID if the given value is not nil.
func (m *DocUpdateOne) SetNillableParentID(id *schema.DocID) *DocUpdateOne {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the Doc entity.
func (m *DocUpdateOne) SetParent(v *Doc) *DocUpdateOne {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Doc entity by IDs.
func (m *DocUpdateOne) AddChildIDs(ids ...schema.DocID) *DocUpdateOne {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the Doc entity.
func (m *DocUpdateOne) AddChildren(v ...*Doc) *DocUpdateOne {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// AddRelatedIDs adds the "related" edge to the Doc entity by IDs.
func (m *DocUpdateOne) AddRelatedIDs(ids ...schema.DocID) *DocUpdateOne {
	m.mutation.AddRelatedIDs(ids...)
	return m
}

// AddRelated adds the "related" edges to the Doc entity.
func (m *DocUpdateOne) AddRelated(v ...*Doc) *DocUpdateOne {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddRelatedIDs(ids...)
}

// Mutation returns the DocMutation object of the builder.
func (m *DocUpdateOne) Mutation() *DocMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the Doc entity.
func (u *DocUpdateOne) ClearParent() *DocUpdateOne {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the Doc entity.
func (u *DocUpdateOne) ClearChildren() *DocUpdateOne {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to Doc entities by IDs.
func (u *DocUpdateOne) RemoveChildIDs(ids ...schema.DocID) *DocUpdateOne {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to Doc entities.
func (u *DocUpdateOne) RemoveChildren(v ...*Doc) *DocUpdateOne {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearRelated clears all "related" edges to the Doc entity.
func (u *DocUpdateOne) ClearRelated() *DocUpdateOne {
	u.mutation.ClearRelated()
	return u
}

// RemoveRelatedIDs removes the "related" edge to Doc entities by IDs.
func (u *DocUpdateOne) RemoveRelatedIDs(ids ...schema.DocID) *DocUpdateOne {
	u.mutation.RemoveRelatedIDs(ids...)
	return u
}

// RemoveRelated removes "related" edges to Doc entities.
func (u *DocUpdateOne) RemoveRelated(v ...*Doc) *DocUpdateOne {
	ids := make([]schema.DocID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveRelatedIDs(ids...)
}

// Where appends a list predicates to the DocUpdate builder.
func (u *DocUpdateOne) Where(ps ...predicate.Doc) *DocUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *DocUpdateOne) Select(field string, fields ...string) *DocUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Doc entity.
func (u *DocUpdateOne) Save(ctx context.Context) (*Doc, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *DocUpdateOne) SaveX(ctx context.Context) *Doc {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *DocUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *DocUpdateOne) sqlSave(ctx context.Context) (_n *Doc, err error) {
	_spec := sqlgraph.NewUpdateSpec(doc.Table, doc.Columns, sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Doc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, doc.FieldID)
		for _, f := range fields {
			if !doc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != doc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Text(); ok {
		_spec.SetField(doc.FieldText, field.TypeString, value)
	}
	if u.mutation.TextCleared() {
		_spec.ClearField(doc.FieldText, field.TypeString)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doc.ParentTable,
			Columns: []string{doc.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   doc.ParentTable,
			Columns: []string{doc.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   doc.ChildrenTable,
			Columns: []string{doc.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedRelatedIDs(); len(nodes) > 0 && !u.mutation.RelatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RelatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   doc.RelatedTable,
			Columns: doc.RelatedPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doc.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Doc{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
