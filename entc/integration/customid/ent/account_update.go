// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/account"
	"entgo.io/ent/entc/integration/customid/ent/predicate"
	"entgo.io/ent/entc/integration/customid/ent/token"
	"entgo.io/ent/entc/integration/customid/sid"
	"entgo.io/ent/schema/field"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (u *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetEmail sets the "email" field.
func (m *AccountUpdate) SetEmail(v string) *AccountUpdate {
	m.mutation.SetEmail(v)
	return m
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (m *AccountUpdate) SetNillableEmail(v *string) *AccountUpdate {
	if v != nil {
		m.SetEmail(*v)
	}
	return m
}

// AddTokenIDs adds the "token" edge to the Token entity by IDs.
func (m *AccountUpdate) AddTokenIDs(ids ...sid.ID) *AccountUpdate {
	m.mutation.AddTokenIDs(ids...)
	return m
}

// AddToken adds the "token" edges to the Token entity.
func (m *AccountUpdate) AddToken(v ...*Token) *AccountUpdate {
	ids := make([]sid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTokenIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (m *AccountUpdate) Mutation() *AccountMutation {
	return m.mutation
}

// ClearToken clears all "token" edges to the Token entity.
func (u *AccountUpdate) ClearToken() *AccountUpdate {
	u.mutation.ClearToken()
	return u
}

// RemoveTokenIDs removes the "token" edge to Token entities by IDs.
func (u *AccountUpdate) RemoveTokenIDs(ids ...sid.ID) *AccountUpdate {
	u.mutation.RemoveTokenIDs(ids...)
	return u
}

// RemoveToken removes "token" edges to Token entities.
func (u *AccountUpdate) RemoveToken(v ...*Token) *AccountUpdate {
	ids := make([]sid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *AccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *AccountUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *AccountUpdate) check() error {
	if v, ok := u.mutation.Email(); ok {
		if err := account.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Account.email": %w`, err)}
		}
	}
	return nil
}

func (u *AccountUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeOther))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTokenIDs(); len(nodes) > 0 && !u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetEmail sets the "email" field.
func (m *AccountUpdateOne) SetEmail(v string) *AccountUpdateOne {
	m.mutation.SetEmail(v)
	return m
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (m *AccountUpdateOne) SetNillableEmail(v *string) *AccountUpdateOne {
	if v != nil {
		m.SetEmail(*v)
	}
	return m
}

// AddTokenIDs adds the "token" edge to the Token entity by IDs.
func (m *AccountUpdateOne) AddTokenIDs(ids ...sid.ID) *AccountUpdateOne {
	m.mutation.AddTokenIDs(ids...)
	return m
}

// AddToken adds the "token" edges to the Token entity.
func (m *AccountUpdateOne) AddToken(v ...*Token) *AccountUpdateOne {
	ids := make([]sid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTokenIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (m *AccountUpdateOne) Mutation() *AccountMutation {
	return m.mutation
}

// ClearToken clears all "token" edges to the Token entity.
func (u *AccountUpdateOne) ClearToken() *AccountUpdateOne {
	u.mutation.ClearToken()
	return u
}

// RemoveTokenIDs removes the "token" edge to Token entities by IDs.
func (u *AccountUpdateOne) RemoveTokenIDs(ids ...sid.ID) *AccountUpdateOne {
	u.mutation.RemoveTokenIDs(ids...)
	return u
}

// RemoveToken removes "token" edges to Token entities.
func (u *AccountUpdateOne) RemoveToken(v ...*Token) *AccountUpdateOne {
	ids := make([]sid.ID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTokenIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (u *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Account entity.
func (u *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *AccountUpdateOne) check() error {
	if v, ok := u.mutation.Email(); ok {
		if err := account.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Account.email": %w`, err)}
		}
	}
	return nil
}

func (u *AccountUpdateOne) sqlSave(ctx context.Context) (_n *Account, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeOther))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTokenIDs(); len(nodes) > 0 && !u.mutation.TokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.TokenTable,
			Columns: []string{account.TokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(token.FieldID, field.TypeOther),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Account{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
