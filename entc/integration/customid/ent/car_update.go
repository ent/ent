// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/customid/ent/car"
	"entgo.io/ent/entc/integration/customid/ent/pet"
	"entgo.io/ent/entc/integration/customid/ent/predicate"
	"entgo.io/ent/schema/field"
)

// CarUpdate is the builder for updating Car entities.
type CarUpdate struct {
	config
	hooks    []Hook
	mutation *CarMutation
}

// Where appends a list predicates to the CarUpdate builder.
func (u *CarUpdate) Where(ps ...predicate.Car) *CarUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetBeforeID sets the "before_id" field.
func (m *CarUpdate) SetBeforeID(v float64) *CarUpdate {
	m.mutation.ResetBeforeID()
	m.mutation.SetBeforeID(v)
	return m
}

// SetNillableBeforeID sets the "before_id" field if the given value is not nil.
func (m *CarUpdate) SetNillableBeforeID(v *float64) *CarUpdate {
	if v != nil {
		m.SetBeforeID(*v)
	}
	return m
}

// AddBeforeID adds value to the "before_id" field.
func (m *CarUpdate) AddBeforeID(v float64) *CarUpdate {
	m.mutation.AddBeforeID(v)
	return m
}

// ClearBeforeID clears the value of the "before_id" field.
func (m *CarUpdate) ClearBeforeID() *CarUpdate {
	m.mutation.ClearBeforeID()
	return m
}

// SetAfterID sets the "after_id" field.
func (m *CarUpdate) SetAfterID(v float64) *CarUpdate {
	m.mutation.ResetAfterID()
	m.mutation.SetAfterID(v)
	return m
}

// SetNillableAfterID sets the "after_id" field if the given value is not nil.
func (m *CarUpdate) SetNillableAfterID(v *float64) *CarUpdate {
	if v != nil {
		m.SetAfterID(*v)
	}
	return m
}

// AddAfterID adds value to the "after_id" field.
func (m *CarUpdate) AddAfterID(v float64) *CarUpdate {
	m.mutation.AddAfterID(v)
	return m
}

// ClearAfterID clears the value of the "after_id" field.
func (m *CarUpdate) ClearAfterID() *CarUpdate {
	m.mutation.ClearAfterID()
	return m
}

// SetModel sets the "model" field.
func (m *CarUpdate) SetModel(v string) *CarUpdate {
	m.mutation.SetModel(v)
	return m
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (m *CarUpdate) SetNillableModel(v *string) *CarUpdate {
	if v != nil {
		m.SetModel(*v)
	}
	return m
}

// SetOwnerID sets the "owner" edge to the Pet entity by ID.
func (m *CarUpdate) SetOwnerID(id string) *CarUpdate {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the Pet entity by ID if the given value is not nil.
func (m *CarUpdate) SetNillableOwnerID(id *string) *CarUpdate {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the Pet entity.
func (m *CarUpdate) SetOwner(v *Pet) *CarUpdate {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the CarMutation object of the builder.
func (m *CarUpdate) Mutation() *CarMutation {
	return m.mutation
}

// ClearOwner clears the "owner" edge to the Pet entity.
func (u *CarUpdate) ClearOwner() *CarUpdate {
	u.mutation.ClearOwner()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *CarUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *CarUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *CarUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *CarUpdate) check() error {
	if v, ok := u.mutation.BeforeID(); ok {
		if err := car.BeforeIDValidator(v); err != nil {
			return &ValidationError{Name: "before_id", err: fmt.Errorf(`ent: validator failed for field "Car.before_id": %w`, err)}
		}
	}
	if v, ok := u.mutation.AfterID(); ok {
		if err := car.AfterIDValidator(v); err != nil {
			return &ValidationError{Name: "after_id", err: fmt.Errorf(`ent: validator failed for field "Car.after_id": %w`, err)}
		}
	}
	return nil
}

func (u *CarUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.BeforeID(); ok {
		_spec.SetField(car.FieldBeforeID, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedBeforeID(); ok {
		_spec.AddField(car.FieldBeforeID, field.TypeFloat64, value)
	}
	if u.mutation.BeforeIDCleared() {
		_spec.ClearField(car.FieldBeforeID, field.TypeFloat64)
	}
	if value, ok := u.mutation.AfterID(); ok {
		_spec.SetField(car.FieldAfterID, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedAfterID(); ok {
		_spec.AddField(car.FieldAfterID, field.TypeFloat64, value)
	}
	if u.mutation.AfterIDCleared() {
		_spec.ClearField(car.FieldAfterID, field.TypeFloat64)
	}
	if value, ok := u.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// CarUpdateOne is the builder for updating a single Car entity.
type CarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarMutation
}

// SetBeforeID sets the "before_id" field.
func (m *CarUpdateOne) SetBeforeID(v float64) *CarUpdateOne {
	m.mutation.ResetBeforeID()
	m.mutation.SetBeforeID(v)
	return m
}

// SetNillableBeforeID sets the "before_id" field if the given value is not nil.
func (m *CarUpdateOne) SetNillableBeforeID(v *float64) *CarUpdateOne {
	if v != nil {
		m.SetBeforeID(*v)
	}
	return m
}

// AddBeforeID adds value to the "before_id" field.
func (m *CarUpdateOne) AddBeforeID(v float64) *CarUpdateOne {
	m.mutation.AddBeforeID(v)
	return m
}

// ClearBeforeID clears the value of the "before_id" field.
func (m *CarUpdateOne) ClearBeforeID() *CarUpdateOne {
	m.mutation.ClearBeforeID()
	return m
}

// SetAfterID sets the "after_id" field.
func (m *CarUpdateOne) SetAfterID(v float64) *CarUpdateOne {
	m.mutation.ResetAfterID()
	m.mutation.SetAfterID(v)
	return m
}

// SetNillableAfterID sets the "after_id" field if the given value is not nil.
func (m *CarUpdateOne) SetNillableAfterID(v *float64) *CarUpdateOne {
	if v != nil {
		m.SetAfterID(*v)
	}
	return m
}

// AddAfterID adds value to the "after_id" field.
func (m *CarUpdateOne) AddAfterID(v float64) *CarUpdateOne {
	m.mutation.AddAfterID(v)
	return m
}

// ClearAfterID clears the value of the "after_id" field.
func (m *CarUpdateOne) ClearAfterID() *CarUpdateOne {
	m.mutation.ClearAfterID()
	return m
}

// SetModel sets the "model" field.
func (m *CarUpdateOne) SetModel(v string) *CarUpdateOne {
	m.mutation.SetModel(v)
	return m
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (m *CarUpdateOne) SetNillableModel(v *string) *CarUpdateOne {
	if v != nil {
		m.SetModel(*v)
	}
	return m
}

// SetOwnerID sets the "owner" edge to the Pet entity by ID.
func (m *CarUpdateOne) SetOwnerID(id string) *CarUpdateOne {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the Pet entity by ID if the given value is not nil.
func (m *CarUpdateOne) SetNillableOwnerID(id *string) *CarUpdateOne {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the Pet entity.
func (m *CarUpdateOne) SetOwner(v *Pet) *CarUpdateOne {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the CarMutation object of the builder.
func (m *CarUpdateOne) Mutation() *CarMutation {
	return m.mutation
}

// ClearOwner clears the "owner" edge to the Pet entity.
func (u *CarUpdateOne) ClearOwner() *CarUpdateOne {
	u.mutation.ClearOwner()
	return u
}

// Where appends a list predicates to the CarUpdate builder.
func (u *CarUpdateOne) Where(ps ...predicate.Car) *CarUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *CarUpdateOne) Select(field string, fields ...string) *CarUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Car entity.
func (u *CarUpdateOne) Save(ctx context.Context) (*Car, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *CarUpdateOne) SaveX(ctx context.Context) *Car {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *CarUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *CarUpdateOne) check() error {
	if v, ok := u.mutation.BeforeID(); ok {
		if err := car.BeforeIDValidator(v); err != nil {
			return &ValidationError{Name: "before_id", err: fmt.Errorf(`ent: validator failed for field "Car.before_id": %w`, err)}
		}
	}
	if v, ok := u.mutation.AfterID(); ok {
		if err := car.AfterIDValidator(v); err != nil {
			return &ValidationError{Name: "after_id", err: fmt.Errorf(`ent: validator failed for field "Car.after_id": %w`, err)}
		}
	}
	return nil
}

func (u *CarUpdateOne) sqlSave(ctx context.Context) (_n *Car, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Car.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for _, f := range fields {
			if !car.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.BeforeID(); ok {
		_spec.SetField(car.FieldBeforeID, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedBeforeID(); ok {
		_spec.AddField(car.FieldBeforeID, field.TypeFloat64, value)
	}
	if u.mutation.BeforeIDCleared() {
		_spec.ClearField(car.FieldBeforeID, field.TypeFloat64)
	}
	if value, ok := u.mutation.AfterID(); ok {
		_spec.SetField(car.FieldAfterID, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedAfterID(); ok {
		_spec.AddField(car.FieldAfterID, field.TypeFloat64, value)
	}
	if u.mutation.AfterIDCleared() {
		_spec.ClearField(car.FieldAfterID, field.TypeFloat64)
	}
	if value, ok := u.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Car{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
