// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/privacy/ent/predicate"
	"entgo.io/ent/entc/integration/privacy/ent/task"
	"entgo.io/ent/entc/integration/privacy/ent/team"
	"entgo.io/ent/entc/integration/privacy/ent/user"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetAge sets the "age" field.
func (m *UserUpdate) SetAge(v uint) *UserUpdate {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdate) SetNillableAge(v *uint) *UserUpdate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdate) AddAge(v int) *UserUpdate {
	m.mutation.AddAge(v)
	return m
}

// ClearAge clears the value of the "age" field.
func (m *UserUpdate) ClearAge() *UserUpdate {
	m.mutation.ClearAge()
	return m
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (m *UserUpdate) AddTeamIDs(ids ...int) *UserUpdate {
	m.mutation.AddTeamIDs(ids...)
	return m
}

// AddTeams adds the "teams" edges to the Team entity.
func (m *UserUpdate) AddTeams(v ...*Team) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTeamIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (m *UserUpdate) AddTaskIDs(ids ...int) *UserUpdate {
	m.mutation.AddTaskIDs(ids...)
	return m
}

// AddTasks adds the "tasks" edges to the Task entity.
func (m *UserUpdate) AddTasks(v ...*Task) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTaskIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdate) Mutation() *UserMutation {
	return m.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (u *UserUpdate) ClearTeams() *UserUpdate {
	u.mutation.ClearTeams()
	return u
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (u *UserUpdate) RemoveTeamIDs(ids ...int) *UserUpdate {
	u.mutation.RemoveTeamIDs(ids...)
	return u
}

// RemoveTeams removes "teams" edges to Team entities.
func (u *UserUpdate) RemoveTeams(v ...*Team) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTeamIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (u *UserUpdate) ClearTasks() *UserUpdate {
	u.mutation.ClearTasks()
	return u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (u *UserUpdate) RemoveTaskIDs(ids ...int) *UserUpdate {
	u.mutation.RemoveTaskIDs(ids...)
	return u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (u *UserUpdate) RemoveTasks(v ...*Task) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *UserUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *UserUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeUint, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeUint, value)
	}
	if u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeUint)
	}
	if u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAge sets the "age" field.
func (m *UserUpdateOne) SetAge(v uint) *UserUpdateOne {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAge(v *uint) *UserUpdateOne {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	m.mutation.AddAge(v)
	return m
}

// ClearAge clears the value of the "age" field.
func (m *UserUpdateOne) ClearAge() *UserUpdateOne {
	m.mutation.ClearAge()
	return m
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (m *UserUpdateOne) AddTeamIDs(ids ...int) *UserUpdateOne {
	m.mutation.AddTeamIDs(ids...)
	return m
}

// AddTeams adds the "teams" edges to the Team entity.
func (m *UserUpdateOne) AddTeams(v ...*Team) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTeamIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (m *UserUpdateOne) AddTaskIDs(ids ...int) *UserUpdateOne {
	m.mutation.AddTaskIDs(ids...)
	return m
}

// AddTasks adds the "tasks" edges to the Task entity.
func (m *UserUpdateOne) AddTasks(v ...*Task) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTaskIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdateOne) Mutation() *UserMutation {
	return m.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (u *UserUpdateOne) ClearTeams() *UserUpdateOne {
	u.mutation.ClearTeams()
	return u
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (u *UserUpdateOne) RemoveTeamIDs(ids ...int) *UserUpdateOne {
	u.mutation.RemoveTeamIDs(ids...)
	return u
}

// RemoveTeams removes "teams" edges to Team entities.
func (u *UserUpdateOne) RemoveTeams(v ...*Team) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTeamIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (u *UserUpdateOne) ClearTasks() *UserUpdateOne {
	u.mutation.ClearTasks()
	return u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (u *UserUpdateOne) RemoveTaskIDs(ids ...int) *UserUpdateOne {
	u.mutation.RemoveTaskIDs(ids...)
	return u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (u *UserUpdateOne) RemoveTasks(v ...*Task) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated User entity.
func (u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *UserUpdateOne) sqlSave(ctx context.Context) (_n *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeUint, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeUint, value)
	}
	if u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeUint)
	}
	if u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TeamsTable,
			Columns: user.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TasksTable,
			Columns: []string{user.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &User{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
