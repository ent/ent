// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"

	"github.com/facebook/ent/entc/integration/privacy/ent/schema"
	"github.com/facebook/ent/entc/integration/privacy/ent/task"
	"github.com/facebook/ent/entc/integration/privacy/ent/team"
	"github.com/facebook/ent/entc/integration/privacy/ent/user"

	"github.com/facebook/ent"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	taskMixin := schema.Task{}.Mixin()
	task.Policy = newPolicy(taskMixin[0], taskMixin[1], schema.Task{})
	task.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := task.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	taskHooks := schema.Task{}.Hooks()

	task.Hooks[1] = taskHooks[0]
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[0].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = taskDescTitle.Validators[0].(func(string) error)
	teamMixin := schema.Team{}.Mixin()
	team.Policy = newPolicy(teamMixin[0], schema.Team{})
	team.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := team.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescName is the schema descriptor for name field.
	teamDescName := teamFields[0].Descriptor()
	// team.NameValidator is a validator for the "name" field. It is called by the builders before save.
	team.NameValidator = teamDescName.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	user.Policy = newPolicy(userMixin[0], userMixin[1], schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
}

type policies []ent.Policy

// newPolicy creates a policy from list of mixin and ent.Schema.
func newPolicy(ps ...interface{ Policy() ent.Policy }) ent.Policy {
	pocs := make(policies, 0, len(ps))
	for _, p := range ps {
		if policy := p.Policy(); policy != nil {
			pocs = append(pocs, policy)
		}
	}
	return pocs
}

func (p policies) EvalMutation(ctx context.Context, m ent.Mutation) error {
	for i := range p {
		if err := p[i].EvalMutation(ctx, m); err != nil {
			return err
		}
	}
	return nil
}

func (p policies) EvalQuery(ctx context.Context, q ent.Query) error {
	for i := range p {
		if err := p[i].EvalQuery(ctx, q); err != nil {
			return err
		}
	}
	return nil
}

const (
	Version = "(devel)" // Version of ent codegen.
)
