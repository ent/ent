// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/privacy/ent/predicate"
	"entgo.io/ent/entc/integration/privacy/ent/task"
	"entgo.io/ent/entc/integration/privacy/ent/team"
	"entgo.io/ent/entc/integration/privacy/ent/user"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetTitle sets the "title" field.
func (m *TaskUpdate) SetTitle(v string) *TaskUpdate {
	m.mutation.SetTitle(v)
	return m
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (m *TaskUpdate) SetNillableTitle(v *string) *TaskUpdate {
	if v != nil {
		m.SetTitle(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *TaskUpdate) SetDescription(v string) *TaskUpdate {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *TaskUpdate) SetNillableDescription(v *string) *TaskUpdate {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *TaskUpdate) ClearDescription() *TaskUpdate {
	m.mutation.ClearDescription()
	return m
}

// SetStatus sets the "status" field.
func (m *TaskUpdate) SetStatus(v task.Status) *TaskUpdate {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *TaskUpdate) SetNillableStatus(v *task.Status) *TaskUpdate {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// SetUUID sets the "uuid" field.
func (m *TaskUpdate) SetUUID(v uuid.UUID) *TaskUpdate {
	m.mutation.SetUUID(v)
	return m
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (m *TaskUpdate) SetNillableUUID(v *uuid.UUID) *TaskUpdate {
	if v != nil {
		m.SetUUID(*v)
	}
	return m
}

// ClearUUID clears the value of the "uuid" field.
func (m *TaskUpdate) ClearUUID() *TaskUpdate {
	m.mutation.ClearUUID()
	return m
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (m *TaskUpdate) AddTeamIDs(ids ...int) *TaskUpdate {
	m.mutation.AddTeamIDs(ids...)
	return m
}

// AddTeams adds the "teams" edges to the Team entity.
func (m *TaskUpdate) AddTeams(v ...*Team) *TaskUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTeamIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (m *TaskUpdate) SetOwnerID(id int) *TaskUpdate {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (m *TaskUpdate) SetNillableOwnerID(id *int) *TaskUpdate {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the User entity.
func (m *TaskUpdate) SetOwner(v *User) *TaskUpdate {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (m *TaskUpdate) Mutation() *TaskMutation {
	return m.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (u *TaskUpdate) ClearTeams() *TaskUpdate {
	u.mutation.ClearTeams()
	return u
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (u *TaskUpdate) RemoveTeamIDs(ids ...int) *TaskUpdate {
	u.mutation.RemoveTeamIDs(ids...)
	return u
}

// RemoveTeams removes "teams" edges to Team entities.
func (u *TaskUpdate) RemoveTeams(v ...*Team) *TaskUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTeamIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (u *TaskUpdate) ClearOwner() *TaskUpdate {
	u.mutation.ClearOwner()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *TaskUpdate) check() error {
	if v, ok := u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	return nil
}

func (u *TaskUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := u.mutation.UUID(); ok {
		_spec.SetField(task.FieldUUID, field.TypeUUID, value)
	}
	if u.mutation.UUIDCleared() {
		_spec.ClearField(task.FieldUUID, field.TypeUUID)
	}
	if u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetTitle sets the "title" field.
func (m *TaskUpdateOne) SetTitle(v string) *TaskUpdateOne {
	m.mutation.SetTitle(v)
	return m
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableTitle(v *string) *TaskUpdateOne {
	if v != nil {
		m.SetTitle(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *TaskUpdateOne) SetDescription(v string) *TaskUpdateOne {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableDescription(v *string) *TaskUpdateOne {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	m.mutation.ClearDescription()
	return m
}

// SetStatus sets the "status" field.
func (m *TaskUpdateOne) SetStatus(v task.Status) *TaskUpdateOne {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableStatus(v *task.Status) *TaskUpdateOne {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// SetUUID sets the "uuid" field.
func (m *TaskUpdateOne) SetUUID(v uuid.UUID) *TaskUpdateOne {
	m.mutation.SetUUID(v)
	return m
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableUUID(v *uuid.UUID) *TaskUpdateOne {
	if v != nil {
		m.SetUUID(*v)
	}
	return m
}

// ClearUUID clears the value of the "uuid" field.
func (m *TaskUpdateOne) ClearUUID() *TaskUpdateOne {
	m.mutation.ClearUUID()
	return m
}

// AddTeamIDs adds the "teams" edge to the Team entity by IDs.
func (m *TaskUpdateOne) AddTeamIDs(ids ...int) *TaskUpdateOne {
	m.mutation.AddTeamIDs(ids...)
	return m
}

// AddTeams adds the "teams" edges to the Team entity.
func (m *TaskUpdateOne) AddTeams(v ...*Team) *TaskUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddTeamIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (m *TaskUpdateOne) SetOwnerID(id int) *TaskUpdateOne {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (m *TaskUpdateOne) SetNillableOwnerID(id *int) *TaskUpdateOne {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the User entity.
func (m *TaskUpdateOne) SetOwner(v *User) *TaskUpdateOne {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (m *TaskUpdateOne) Mutation() *TaskMutation {
	return m.mutation
}

// ClearTeams clears all "teams" edges to the Team entity.
func (u *TaskUpdateOne) ClearTeams() *TaskUpdateOne {
	u.mutation.ClearTeams()
	return u
}

// RemoveTeamIDs removes the "teams" edge to Team entities by IDs.
func (u *TaskUpdateOne) RemoveTeamIDs(ids ...int) *TaskUpdateOne {
	u.mutation.RemoveTeamIDs(ids...)
	return u
}

// RemoveTeams removes "teams" edges to Team entities.
func (u *TaskUpdateOne) RemoveTeams(v ...*Team) *TaskUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveTeamIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (u *TaskUpdateOne) ClearOwner() *TaskUpdateOne {
	u.mutation.ClearOwner()
	return u
}

// Where appends a list predicates to the TaskUpdate builder.
func (u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Task entity.
func (u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *TaskUpdateOne) check() error {
	if v, ok := u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	return nil
}

func (u *TaskUpdateOne) sqlSave(ctx context.Context) (_n *Task, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := u.mutation.UUID(); ok {
		_spec.SetField(task.FieldUUID, field.TypeUUID, value)
	}
	if u.mutation.UUIDCleared() {
		_spec.ClearField(task.FieldUUID, field.TypeUUID)
	}
	if u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !u.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   task.TeamsTable,
			Columns: task.TeamsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.OwnerTable,
			Columns: []string{task.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Task{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
