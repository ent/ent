// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/hooks/ent/card"
	"entgo.io/ent/entc/integration/hooks/ent/user"
	"entgo.io/ent/schema/field"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (_c *CardCreate) SetNumber(v string) *CardCreate {
	_c.mutation.SetNumber(v)
	return _c
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (_c *CardCreate) SetNillableNumber(v *string) *CardCreate {
	if v != nil {
		_c.SetNumber(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *CardCreate) SetName(v string) *CardCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *CardCreate) SetNillableName(v *string) *CardCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *CardCreate) SetCreatedAt(v time.Time) *CardCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *CardCreate) SetNillableCreatedAt(v *time.Time) *CardCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetInHook sets the "in_hook" field.
func (_c *CardCreate) SetInHook(v string) *CardCreate {
	_c.mutation.SetInHook(v)
	return _c
}

// SetExpiredAt sets the "expired_at" field.
func (_c *CardCreate) SetExpiredAt(v time.Time) *CardCreate {
	_c.mutation.SetExpiredAt(v)
	return _c
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (_c *CardCreate) SetNillableExpiredAt(v *time.Time) *CardCreate {
	if v != nil {
		_c.SetExpiredAt(*v)
	}
	return _c
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_c *CardCreate) SetOwnerID(id int) *CardCreate {
	_c.mutation.SetOwnerID(id)
	return _c
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_c *CardCreate) SetNillableOwnerID(id *int) *CardCreate {
	if id != nil {
		_c = _c.SetOwnerID(*id)
	}
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *CardCreate) SetOwner(v *User) *CardCreate {
	return _c.SetOwnerID(v.ID)
}

// Mutation returns the CardMutation object of the builder.
func (_c *CardCreate) Mutation() *CardMutation {
	return _c.mutation
}

// Save creates the Card in the database.
func (_c *CardCreate) Save(ctx context.Context) (*Card, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CardCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CardCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *CardCreate) defaults() error {
	if _, ok := _c.mutation.Number(); !ok {
		v := card.DefaultNumber
		_c.mutation.SetNumber(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if card.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized card.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := card.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *CardCreate) check() error {
	if _, ok := _c.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Card.number"`)}
	}
	if v, ok := _c.mutation.Number(); ok {
		if err := card.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Card.number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Card.created_at"`)}
	}
	if _, ok := _c.mutation.InHook(); !ok {
		return &ValidationError{Name: "in_hook", err: errors.New(`ent: missing required field "Card.in_hook"`)}
	}
	return nil
}

func (_c *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(card.Table, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Number(); ok {
		_spec.SetField(card.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(card.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(card.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.InHook(); ok {
		_spec.SetField(card.FieldInHook, field.TypeString, value)
		_node.InHook = value
	}
	if value, ok := _c.mutation.ExpiredAt(); ok {
		_spec.SetField(card.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.OwnerTable,
			Columns: []string{card.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	err      error
	builders []*CardCreate
}

// Save creates the Card entities in the database.
func (_c *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Card, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *CardCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
