// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/edgefield/ent/card"
	"entgo.io/ent/entc/integration/edgefield/ent/metadata"
	"entgo.io/ent/entc/integration/edgefield/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// SpouseID holds the value of the "spouse_id" field.
	SpouseID int `json:"spouse_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Pets holds the value of the pets edge.
	Pets []*Pet `json:"pets,omitempty"`
	// The parent edge and its field are immutable
	Parent *User `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*User `json:"children,omitempty"`
	// Spouse holds the value of the spouse edge.
	Spouse *User `json:"spouse,omitempty"`
	// Card holds the value of the card edge.
	Card *Card `json:"card,omitempty"`
	// Metadata holds the value of the metadata edge.
	Metadata *Metadata `json:"metadata,omitempty"`
	// Info holds the value of the info edge.
	Info []*Info `json:"info,omitempty"`
	// Rentals holds the value of the rentals edge.
	Rentals []*Rental `json:"rentals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes   [8]bool
	namedPets     map[string][]*Pet
	namedChildren map[string][]*User
	namedInfo     map[string][]*Info
	namedRentals  map[string][]*Rental
}

// PetsOrErr returns the Pets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PetsOrErr() ([]*Pet, error) {
	if e.loadedTypes[0] {
		return e.Pets, nil
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ParentOrErr() (*User, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChildrenOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// SpouseOrErr returns the Spouse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SpouseOrErr() (*User, error) {
	if e.Spouse != nil {
		return e.Spouse, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "spouse"}
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CardOrErr() (*Card, error) {
	if e.Card != nil {
		return e.Card, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "card"}
}

// MetadataOrErr returns the Metadata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) MetadataOrErr() (*Metadata, error) {
	if e.Metadata != nil {
		return e.Metadata, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: metadata.Label}
	}
	return nil, &NotLoadedError{edge: "metadata"}
}

// InfoOrErr returns the Info value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InfoOrErr() ([]*Info, error) {
	if e.loadedTypes[6] {
		return e.Info, nil
	}
	return nil, &NotLoadedError{edge: "info"}
}

// RentalsOrErr returns the Rentals value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RentalsOrErr() ([]*Rental, error) {
	if e.loadedTypes[7] {
		return e.Rentals, nil
	}
	return nil, &NotLoadedError{edge: "rentals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldParentID, user.FieldSpouseID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (m *User) assignValues(columns []string, values []any) error {
	if v, c := len(values), len(columns); v < c {
		return fmt.Errorf("mismatch number of scan values: %d != %d", v, c)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case user.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				m.ParentID = int(value.Int64)
			}
		case user.FieldSpouseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field spouse_id", values[i])
			} else if value.Valid {
				m.SpouseID = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (m *User) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPets queries the "pets" edge of the User entity.
func (m *User) QueryPets() *PetQuery {
	return NewUserClient(m.config).QueryPets(m)
}

// QueryParent queries the "parent" edge of the User entity.
func (m *User) QueryParent() *UserQuery {
	return NewUserClient(m.config).QueryParent(m)
}

// QueryChildren queries the "children" edge of the User entity.
func (m *User) QueryChildren() *UserQuery {
	return NewUserClient(m.config).QueryChildren(m)
}

// QuerySpouse queries the "spouse" edge of the User entity.
func (m *User) QuerySpouse() *UserQuery {
	return NewUserClient(m.config).QuerySpouse(m)
}

// QueryCard queries the "card" edge of the User entity.
func (m *User) QueryCard() *CardQuery {
	return NewUserClient(m.config).QueryCard(m)
}

// QueryMetadata queries the "metadata" edge of the User entity.
func (m *User) QueryMetadata() *MetadataQuery {
	return NewUserClient(m.config).QueryMetadata(m)
}

// QueryInfo queries the "info" edge of the User entity.
func (m *User) QueryInfo() *InfoQuery {
	return NewUserClient(m.config).QueryInfo(m)
}

// QueryRentals queries the "rentals" edge of the User entity.
func (m *User) QueryRentals() *RentalQuery {
	return NewUserClient(m.config).QueryRentals(m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *User) Update() *UserUpdateOne {
	return NewUserClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *User) Unwrap() *User {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ParentID))
	builder.WriteString(", ")
	builder.WriteString("spouse_id=")
	builder.WriteString(fmt.Sprintf("%v", m.SpouseID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPets returns the Pets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedPets(name string) ([]*Pet, error) {
	if m.Edges.namedPets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedPets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedPets(name string, edges ...*Pet) {
	if m.Edges.namedPets == nil {
		m.Edges.namedPets = make(map[string][]*Pet)
	}
	if len(edges) == 0 {
		m.Edges.namedPets[name] = []*Pet{}
	} else {
		m.Edges.namedPets[name] = append(m.Edges.namedPets[name], edges...)
	}
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedChildren(name string) ([]*User, error) {
	if m.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedChildren(name string, edges ...*User) {
	if m.Edges.namedChildren == nil {
		m.Edges.namedChildren = make(map[string][]*User)
	}
	if len(edges) == 0 {
		m.Edges.namedChildren[name] = []*User{}
	} else {
		m.Edges.namedChildren[name] = append(m.Edges.namedChildren[name], edges...)
	}
}

// NamedInfo returns the Info named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedInfo(name string) ([]*Info, error) {
	if m.Edges.namedInfo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedInfo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedInfo(name string, edges ...*Info) {
	if m.Edges.namedInfo == nil {
		m.Edges.namedInfo = make(map[string][]*Info)
	}
	if len(edges) == 0 {
		m.Edges.namedInfo[name] = []*Info{}
	} else {
		m.Edges.namedInfo[name] = append(m.Edges.namedInfo[name], edges...)
	}
}

// NamedRentals returns the Rentals named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedRentals(name string) ([]*Rental, error) {
	if m.Edges.namedRentals == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedRentals[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedRentals(name string, edges ...*Rental) {
	if m.Edges.namedRentals == nil {
		m.Edges.namedRentals = make(map[string][]*Rental)
	}
	if len(edges) == 0 {
		m.Edges.namedRentals[name] = []*Rental{}
	} else {
		m.Edges.namedRentals[name] = append(m.Edges.namedRentals[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
