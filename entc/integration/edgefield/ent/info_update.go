// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/entc/integration/edgefield/ent/info"
	"entgo.io/ent/entc/integration/edgefield/ent/predicate"
	"entgo.io/ent/entc/integration/edgefield/ent/user"
	"entgo.io/ent/schema/field"
)

// InfoUpdate is the builder for updating Info entities.
type InfoUpdate struct {
	config
	hooks    []Hook
	mutation *InfoMutation
}

// Where appends a list predicates to the InfoUpdate builder.
func (u *InfoUpdate) Where(ps ...predicate.Info) *InfoUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetContent sets the "content" field.
func (m *InfoUpdate) SetContent(v json.RawMessage) *InfoUpdate {
	m.mutation.SetContent(v)
	return m
}

// AppendContent appends value to the "content" field.
func (m *InfoUpdate) AppendContent(v json.RawMessage) *InfoUpdate {
	m.mutation.AppendContent(v)
	return m
}

// SetUserID sets the "user" edge to the User entity by ID.
func (m *InfoUpdate) SetUserID(id int) *InfoUpdate {
	m.mutation.SetUserID(id)
	return m
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (m *InfoUpdate) SetNillableUserID(id *int) *InfoUpdate {
	if id != nil {
		m = m.SetUserID(*id)
	}
	return m
}

// SetUser sets the "user" edge to the User entity.
func (m *InfoUpdate) SetUser(v *User) *InfoUpdate {
	return m.SetUserID(v.ID)
}

// Mutation returns the InfoMutation object of the builder.
func (m *InfoUpdate) Mutation() *InfoMutation {
	return m.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (u *InfoUpdate) ClearUser() *InfoUpdate {
	u.mutation.ClearUser()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *InfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *InfoUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *InfoUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InfoUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *InfoUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(info.Table, info.Columns, sqlgraph.NewFieldSpec(info.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Content(); ok {
		_spec.SetField(info.FieldContent, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedContent(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, info.FieldContent, value)
		})
	}
	if u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   info.UserTable,
			Columns: []string{info.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   info.UserTable,
			Columns: []string{info.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{info.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// InfoUpdateOne is the builder for updating a single Info entity.
type InfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InfoMutation
}

// SetContent sets the "content" field.
func (m *InfoUpdateOne) SetContent(v json.RawMessage) *InfoUpdateOne {
	m.mutation.SetContent(v)
	return m
}

// AppendContent appends value to the "content" field.
func (m *InfoUpdateOne) AppendContent(v json.RawMessage) *InfoUpdateOne {
	m.mutation.AppendContent(v)
	return m
}

// SetUserID sets the "user" edge to the User entity by ID.
func (m *InfoUpdateOne) SetUserID(id int) *InfoUpdateOne {
	m.mutation.SetUserID(id)
	return m
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (m *InfoUpdateOne) SetNillableUserID(id *int) *InfoUpdateOne {
	if id != nil {
		m = m.SetUserID(*id)
	}
	return m
}

// SetUser sets the "user" edge to the User entity.
func (m *InfoUpdateOne) SetUser(v *User) *InfoUpdateOne {
	return m.SetUserID(v.ID)
}

// Mutation returns the InfoMutation object of the builder.
func (m *InfoUpdateOne) Mutation() *InfoMutation {
	return m.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (u *InfoUpdateOne) ClearUser() *InfoUpdateOne {
	u.mutation.ClearUser()
	return u
}

// Where appends a list predicates to the InfoUpdate builder.
func (u *InfoUpdateOne) Where(ps ...predicate.Info) *InfoUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *InfoUpdateOne) Select(field string, fields ...string) *InfoUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Info entity.
func (u *InfoUpdateOne) Save(ctx context.Context) (*Info, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *InfoUpdateOne) SaveX(ctx context.Context) *Info {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *InfoUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InfoUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *InfoUpdateOne) sqlSave(ctx context.Context) (_n *Info, err error) {
	_spec := sqlgraph.NewUpdateSpec(info.Table, info.Columns, sqlgraph.NewFieldSpec(info.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Info.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, info.FieldID)
		for _, f := range fields {
			if !info.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != info.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Content(); ok {
		_spec.SetField(info.FieldContent, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedContent(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, info.FieldContent, value)
		})
	}
	if u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   info.UserTable,
			Columns: []string{info.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   info.UserTable,
			Columns: []string{info.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &Info{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{info.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
