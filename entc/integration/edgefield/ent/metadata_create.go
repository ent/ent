// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgefield/ent/metadata"
	"entgo.io/ent/entc/integration/edgefield/ent/user"
	"entgo.io/ent/schema/field"
)

// MetadataCreate is the builder for creating a Metadata entity.
type MetadataCreate struct {
	config
	mutation *MetadataMutation
	hooks    []Hook
}

// SetAge sets the "age" field.
func (m *MetadataCreate) SetAge(v int) *MetadataCreate {
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *MetadataCreate) SetNillableAge(v *int) *MetadataCreate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// SetParentID sets the "parent_id" field.
func (m *MetadataCreate) SetParentID(v int) *MetadataCreate {
	m.mutation.SetParentID(v)
	return m
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (m *MetadataCreate) SetNillableParentID(v *int) *MetadataCreate {
	if v != nil {
		m.SetParentID(*v)
	}
	return m
}

// SetID sets the "id" field.
func (m *MetadataCreate) SetID(v int) *MetadataCreate {
	m.mutation.SetID(v)
	return m
}

// SetUserID sets the "user" edge to the User entity by ID.
func (m *MetadataCreate) SetUserID(id int) *MetadataCreate {
	m.mutation.SetUserID(id)
	return m
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (m *MetadataCreate) SetNillableUserID(id *int) *MetadataCreate {
	if id != nil {
		m = m.SetUserID(*id)
	}
	return m
}

// SetUser sets the "user" edge to the User entity.
func (m *MetadataCreate) SetUser(v *User) *MetadataCreate {
	return m.SetUserID(v.ID)
}

// AddChildIDs adds the "children" edge to the Metadata entity by IDs.
func (m *MetadataCreate) AddChildIDs(ids ...int) *MetadataCreate {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the Metadata entity.
func (m *MetadataCreate) AddChildren(v ...*Metadata) *MetadataCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Metadata entity.
func (m *MetadataCreate) SetParent(v *Metadata) *MetadataCreate {
	return m.SetParentID(v.ID)
}

// Mutation returns the MetadataMutation object of the builder.
func (m *MetadataCreate) Mutation() *MetadataMutation {
	return m.mutation
}

// Save creates the Metadata in the database.
func (c *MetadataCreate) Save(ctx context.Context) (*Metadata, error) {
	c.defaults()
	return withHooks(ctx, c.sqlSave, c.mutation, c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (c *MetadataCreate) SaveX(ctx context.Context) *Metadata {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *MetadataCreate) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *MetadataCreate) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (c *MetadataCreate) defaults() {
	if _, ok := c.mutation.Age(); !ok {
		v := metadata.DefaultAge
		c.mutation.SetAge(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (c *MetadataCreate) check() error {
	if _, ok := c.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Metadata.age"`)}
	}
	return nil
}

func (c *MetadataCreate) sqlSave(ctx context.Context) (*Metadata, error) {
	if err := c.check(); err != nil {
		return nil, err
	}
	_node, _spec := c.createSpec()
	if err := sqlgraph.CreateNode(ctx, c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	c.mutation.id = &_node.ID
	c.mutation.done = true
	return _node, nil
}

func (c *MetadataCreate) createSpec() (*Metadata, *sqlgraph.CreateSpec) {
	var (
		_node = &Metadata{config: c.config}
		_spec = sqlgraph.NewCreateSpec(metadata.Table, sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt))
	)
	if id, ok := c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := c.mutation.Age(); ok {
		_spec.SetField(metadata.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if nodes := c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   metadata.UserTable,
			Columns: []string{metadata.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   metadata.ChildrenTable,
			Columns: []string{metadata.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   metadata.ParentTable,
			Columns: []string{metadata.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MetadataCreateBulk is the builder for creating many Metadata entities in bulk.
type MetadataCreateBulk struct {
	config
	err      error
	builders []*MetadataCreate
}

// Save creates the Metadata entities in the database.
func (c *MetadataCreateBulk) Save(ctx context.Context) ([]*Metadata, error) {
	if c.err != nil {
		return nil, c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(c.builders))
	nodes := make([]*Metadata, len(c.builders))
	mutators := make([]Mutator, len(c.builders))
	for i := range c.builders {
		func(i int, root context.Context) {
			builder := c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (c *MetadataCreateBulk) SaveX(ctx context.Context) []*Metadata {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *MetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *MetadataCreateBulk) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}
