// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/edgefield/ent/predicate"
	"entgo.io/ent/entc/integration/edgefield/ent/rental"
	"entgo.io/ent/schema/field"
)

// RentalUpdate is the builder for updating Rental entities.
type RentalUpdate struct {
	config
	hooks    []Hook
	mutation *RentalMutation
}

// Where appends a list predicates to the RentalUpdate builder.
func (_u *RentalUpdate) Where(ps ...predicate.Rental) *RentalUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDate sets the "date" field.
func (_u *RentalUpdate) SetDate(v time.Time) *RentalUpdate {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableDate(v *time.Time) *RentalUpdate {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// Mutation returns the RentalMutation object of the builder.
func (_u *RentalUpdate) Mutation() *RentalMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RentalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RentalUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalUpdate) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.user"`)
	}
	if _u.mutation.CarCleared() && len(_u.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.car"`)
	}
	return nil
}

func (_u *RentalUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rental.Table, rental.Columns, sqlgraph.NewFieldSpec(rental.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(rental.FieldDate, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RentalUpdateOne is the builder for updating a single Rental entity.
type RentalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RentalMutation
}

// SetDate sets the "date" field.
func (_u *RentalUpdateOne) SetDate(v time.Time) *RentalUpdateOne {
	_u.mutation.SetDate(v)
	return _u
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableDate(v *time.Time) *RentalUpdateOne {
	if v != nil {
		_u.SetDate(*v)
	}
	return _u
}

// Mutation returns the RentalMutation object of the builder.
func (_u *RentalUpdateOne) Mutation() *RentalMutation {
	return _u.mutation
}

// Where appends a list predicates to the RentalUpdate builder.
func (_u *RentalUpdateOne) Where(ps ...predicate.Rental) *RentalUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RentalUpdateOne) Select(field string, fields ...string) *RentalUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Rental entity.
func (_u *RentalUpdateOne) Save(ctx context.Context) (*Rental, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalUpdateOne) SaveX(ctx context.Context) *Rental {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RentalUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalUpdateOne) check() error {
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.user"`)
	}
	if _u.mutation.CarCleared() && len(_u.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.car"`)
	}
	return nil
}

func (_u *RentalUpdateOne) sqlSave(ctx context.Context) (_node *Rental, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rental.Table, rental.Columns, sqlgraph.NewFieldSpec(rental.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rental.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rental.FieldID)
		for _, f := range fields {
			if !rental.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rental.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Date(); ok {
		_spec.SetField(rental.FieldDate, field.TypeTime, value)
	}
	_node = &Rental{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
