// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/entc/integration/ent"
	"github.com/facebookincubator/ent/entc/integration/migrate/entv1"
)

// The CarFunc type is an adapter to allow the use of ordinary
// function as Car mutator.
type CarFunc func(context.Context, *entv1.CarMutation) (entv1.Value, error)

// Mutate calls f(ctx, m).
func (f CarFunc) Mutate(ctx context.Context, m entv1.Mutation) (entv1.Value, error) {
	mv, ok := m.(*entv1.CarMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entv1.CarMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *entv1.UserMutation) (entv1.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m entv1.Mutation) (entv1.Value, error) {
	mv, ok := m.(*entv1.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *entv1.UserMutation", m)
	}
	return f(ctx, mv)
}

// On executes the given hook only of the given operation.
//
//	hook.On(Log, entv1.Delete|entv1.Create)
//
func On(hk entv1.Hook, op entv1.Op) entv1.Hook {
	return func(next entv1.Mutator) entv1.Mutator {
		return entv1.MutateFunc(func(ctx context.Context, m entv1.Mutation) (entv1.Value, error) {
			if m.Op().Is(op) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []entv1.Hook {
//		return []entv1.Hook{
//			Reject(entv1.Delete|entv1.Update),
//		}
//	}
//
func Reject(op entv1.Op) ent.Hook {
	return func(next entv1.Mutator) entv1.Mutator {
		return entv1.MutateFunc(func(ctx context.Context, m entv1.Mutation) (entv1.Value, error) {
			if m.Op().Is(op) {
				return nil, fmt.Errorf("%s operation is not allowed", m.Op())
			}
			return next.Mutate(ctx, m)
		})
	}
}
