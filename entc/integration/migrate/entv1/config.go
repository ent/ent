// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package entv1

import (
	"github.com/facebook/ent"
	"github.com/facebook/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
	// optional schema name for the Car table.
	CarSchema string
	// optional schema name for the Conversion table.
	ConversionSchema string
	// optional schema name for the CustomType table.
	CustomTypeSchema string
	// optional schema name for the User table.
	UserSchema string
}

// hooks per client, for fast access.
type hooks struct {
	Car        []ent.Hook
	Conversion []ent.Hook
	CustomType []ent.Hook
	User       []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// WithCarSchema allows an alternate
// database name to be passed into ent operations.
func WithCarSchema(schema string) Option {
	return func(c *config) {
		c.CarSchema = schema
	}
} // WithConversionSchema allows an alternate
// database name to be passed into ent operations.
func WithConversionSchema(schema string) Option {
	return func(c *config) {
		c.ConversionSchema = schema
	}
} // WithCustomTypeSchema allows an alternate
// database name to be passed into ent operations.
func WithCustomTypeSchema(schema string) Option {
	return func(c *config) {
		c.CustomTypeSchema = schema
	}
} // WithUserSchema allows an alternate
// database name to be passed into ent operations.
func WithUserSchema(schema string) Option {
	return func(c *config) {
		c.UserSchema = schema
	}
}
