// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package entv1

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/migrate/entv1/car"
	"entgo.io/ent/entc/integration/migrate/entv1/predicate"
	"entgo.io/ent/entc/integration/migrate/entv1/user"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetAge sets the "age" field.
func (m *UserUpdate) SetAge(v int32) *UserUpdate {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdate) SetNillableAge(v *int32) *UserUpdate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdate) AddAge(v int32) *UserUpdate {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdate) SetName(v string) *UserUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *UserUpdate) SetDescription(v string) *UserUpdate {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *UserUpdate) SetNillableDescription(v *string) *UserUpdate {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *UserUpdate) ClearDescription() *UserUpdate {
	m.mutation.ClearDescription()
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdate) SetNickname(v string) *UserUpdate {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// SetAddress sets the "address" field.
func (m *UserUpdate) SetAddress(v string) *UserUpdate {
	m.mutation.SetAddress(v)
	return m
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (m *UserUpdate) SetNillableAddress(v *string) *UserUpdate {
	if v != nil {
		m.SetAddress(*v)
	}
	return m
}

// ClearAddress clears the value of the "address" field.
func (m *UserUpdate) ClearAddress() *UserUpdate {
	m.mutation.ClearAddress()
	return m
}

// SetRenamed sets the "renamed" field.
func (m *UserUpdate) SetRenamed(v string) *UserUpdate {
	m.mutation.SetRenamed(v)
	return m
}

// SetNillableRenamed sets the "renamed" field if the given value is not nil.
func (m *UserUpdate) SetNillableRenamed(v *string) *UserUpdate {
	if v != nil {
		m.SetRenamed(*v)
	}
	return m
}

// ClearRenamed clears the value of the "renamed" field.
func (m *UserUpdate) ClearRenamed() *UserUpdate {
	m.mutation.ClearRenamed()
	return m
}

// SetOldToken sets the "old_token" field.
func (m *UserUpdate) SetOldToken(v string) *UserUpdate {
	m.mutation.SetOldToken(v)
	return m
}

// SetNillableOldToken sets the "old_token" field if the given value is not nil.
func (m *UserUpdate) SetNillableOldToken(v *string) *UserUpdate {
	if v != nil {
		m.SetOldToken(*v)
	}
	return m
}

// SetBlob sets the "blob" field.
func (m *UserUpdate) SetBlob(v []byte) *UserUpdate {
	m.mutation.SetBlob(v)
	return m
}

// ClearBlob clears the value of the "blob" field.
func (m *UserUpdate) ClearBlob() *UserUpdate {
	m.mutation.ClearBlob()
	return m
}

// SetState sets the "state" field.
func (m *UserUpdate) SetState(v user.State) *UserUpdate {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *UserUpdate) SetNillableState(v *user.State) *UserUpdate {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *UserUpdate) ClearState() *UserUpdate {
	m.mutation.ClearState()
	return m
}

// SetStatus sets the "status" field.
func (m *UserUpdate) SetStatus(v string) *UserUpdate {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *UserUpdate) SetNillableStatus(v *string) *UserUpdate {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// ClearStatus clears the value of the "status" field.
func (m *UserUpdate) ClearStatus() *UserUpdate {
	m.mutation.ClearStatus()
	return m
}

// SetWorkplace sets the "workplace" field.
func (m *UserUpdate) SetWorkplace(v string) *UserUpdate {
	m.mutation.SetWorkplace(v)
	return m
}

// SetNillableWorkplace sets the "workplace" field if the given value is not nil.
func (m *UserUpdate) SetNillableWorkplace(v *string) *UserUpdate {
	if v != nil {
		m.SetWorkplace(*v)
	}
	return m
}

// ClearWorkplace clears the value of the "workplace" field.
func (m *UserUpdate) ClearWorkplace() *UserUpdate {
	m.mutation.ClearWorkplace()
	return m
}

// SetDropOptional sets the "drop_optional" field.
func (m *UserUpdate) SetDropOptional(v string) *UserUpdate {
	m.mutation.SetDropOptional(v)
	return m
}

// SetNillableDropOptional sets the "drop_optional" field if the given value is not nil.
func (m *UserUpdate) SetNillableDropOptional(v *string) *UserUpdate {
	if v != nil {
		m.SetDropOptional(*v)
	}
	return m
}

// ClearDropOptional clears the value of the "drop_optional" field.
func (m *UserUpdate) ClearDropOptional() *UserUpdate {
	m.mutation.ClearDropOptional()
	return m
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (m *UserUpdate) SetParentID(id int) *UserUpdate {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableParentID(id *int) *UserUpdate {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the User entity.
func (m *UserUpdate) SetParent(v *User) *UserUpdate {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (m *UserUpdate) AddChildIDs(ids ...int) *UserUpdate {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the User entity.
func (m *UserUpdate) AddChildren(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (m *UserUpdate) SetSpouseID(id int) *UserUpdate {
	m.mutation.SetSpouseID(id)
	return m
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableSpouseID(id *int) *UserUpdate {
	if id != nil {
		m = m.SetSpouseID(*id)
	}
	return m
}

// SetSpouse sets the "spouse" edge to the User entity.
func (m *UserUpdate) SetSpouse(v *User) *UserUpdate {
	return m.SetSpouseID(v.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (m *UserUpdate) SetCarID(id int) *UserUpdate {
	m.mutation.SetCarID(id)
	return m
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableCarID(id *int) *UserUpdate {
	if id != nil {
		m = m.SetCarID(*id)
	}
	return m
}

// SetCar sets the "car" edge to the Car entity.
func (m *UserUpdate) SetCar(v *Car) *UserUpdate {
	return m.SetCarID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdate) Mutation() *UserMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the User entity.
func (u *UserUpdate) ClearParent() *UserUpdate {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the User entity.
func (u *UserUpdate) ClearChildren() *UserUpdate {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (u *UserUpdate) RemoveChildIDs(ids ...int) *UserUpdate {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to User entities.
func (u *UserUpdate) RemoveChildren(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (u *UserUpdate) ClearSpouse() *UserUpdate {
	u.mutation.ClearSpouse()
	return u
}

// ClearCar clears the "car" edge to the Car entity.
func (u *UserUpdate) ClearCar() *UserUpdate {
	u.mutation.ClearCar()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *UserUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdate) check() error {
	if v, ok := u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entv1: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := u.mutation.Blob(); ok {
		if err := user.BlobValidator(v); err != nil {
			return &ValidationError{Name: "blob", err: fmt.Errorf(`entv1: validator failed for field "User.blob": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`entv1: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.Workplace(); ok {
		if err := user.WorkplaceValidator(v); err != nil {
			return &ValidationError{Name: "workplace", err: fmt.Errorf(`entv1: validator failed for field "User.workplace": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt32, value)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := u.mutation.Renamed(); ok {
		_spec.SetField(user.FieldRenamed, field.TypeString, value)
	}
	if u.mutation.RenamedCleared() {
		_spec.ClearField(user.FieldRenamed, field.TypeString)
	}
	if value, ok := u.mutation.OldToken(); ok {
		_spec.SetField(user.FieldOldToken, field.TypeString, value)
	}
	if value, ok := u.mutation.Blob(); ok {
		_spec.SetField(user.FieldBlob, field.TypeBytes, value)
	}
	if u.mutation.BlobCleared() {
		_spec.ClearField(user.FieldBlob, field.TypeBytes)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(user.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeString, value)
	}
	if u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeString)
	}
	if value, ok := u.mutation.Workplace(); ok {
		_spec.SetField(user.FieldWorkplace, field.TypeString, value)
	}
	if u.mutation.WorkplaceCleared() {
		_spec.ClearField(user.FieldWorkplace, field.TypeString)
	}
	if value, ok := u.mutation.DropOptional(); ok {
		_spec.SetField(user.FieldDropOptional, field.TypeString, value)
	}
	if u.mutation.DropOptionalCleared() {
		_spec.ClearField(user.FieldDropOptional, field.TypeString)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAge sets the "age" field.
func (m *UserUpdateOne) SetAge(v int32) *UserUpdateOne {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAge(v *int32) *UserUpdateOne {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdateOne) AddAge(v int32) *UserUpdateOne {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdateOne) SetName(v string) *UserUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *UserUpdateOne) SetDescription(v string) *UserUpdateOne {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDescription(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *UserUpdateOne) ClearDescription() *UserUpdateOne {
	m.mutation.ClearDescription()
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// SetAddress sets the "address" field.
func (m *UserUpdateOne) SetAddress(v string) *UserUpdateOne {
	m.mutation.SetAddress(v)
	return m
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAddress(v *string) *UserUpdateOne {
	if v != nil {
		m.SetAddress(*v)
	}
	return m
}

// ClearAddress clears the value of the "address" field.
func (m *UserUpdateOne) ClearAddress() *UserUpdateOne {
	m.mutation.ClearAddress()
	return m
}

// SetRenamed sets the "renamed" field.
func (m *UserUpdateOne) SetRenamed(v string) *UserUpdateOne {
	m.mutation.SetRenamed(v)
	return m
}

// SetNillableRenamed sets the "renamed" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableRenamed(v *string) *UserUpdateOne {
	if v != nil {
		m.SetRenamed(*v)
	}
	return m
}

// ClearRenamed clears the value of the "renamed" field.
func (m *UserUpdateOne) ClearRenamed() *UserUpdateOne {
	m.mutation.ClearRenamed()
	return m
}

// SetOldToken sets the "old_token" field.
func (m *UserUpdateOne) SetOldToken(v string) *UserUpdateOne {
	m.mutation.SetOldToken(v)
	return m
}

// SetNillableOldToken sets the "old_token" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableOldToken(v *string) *UserUpdateOne {
	if v != nil {
		m.SetOldToken(*v)
	}
	return m
}

// SetBlob sets the "blob" field.
func (m *UserUpdateOne) SetBlob(v []byte) *UserUpdateOne {
	m.mutation.SetBlob(v)
	return m
}

// ClearBlob clears the value of the "blob" field.
func (m *UserUpdateOne) ClearBlob() *UserUpdateOne {
	m.mutation.ClearBlob()
	return m
}

// SetState sets the "state" field.
func (m *UserUpdateOne) SetState(v user.State) *UserUpdateOne {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableState(v *user.State) *UserUpdateOne {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *UserUpdateOne) ClearState() *UserUpdateOne {
	m.mutation.ClearState()
	return m
}

// SetStatus sets the "status" field.
func (m *UserUpdateOne) SetStatus(v string) *UserUpdateOne {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableStatus(v *string) *UserUpdateOne {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// ClearStatus clears the value of the "status" field.
func (m *UserUpdateOne) ClearStatus() *UserUpdateOne {
	m.mutation.ClearStatus()
	return m
}

// SetWorkplace sets the "workplace" field.
func (m *UserUpdateOne) SetWorkplace(v string) *UserUpdateOne {
	m.mutation.SetWorkplace(v)
	return m
}

// SetNillableWorkplace sets the "workplace" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableWorkplace(v *string) *UserUpdateOne {
	if v != nil {
		m.SetWorkplace(*v)
	}
	return m
}

// ClearWorkplace clears the value of the "workplace" field.
func (m *UserUpdateOne) ClearWorkplace() *UserUpdateOne {
	m.mutation.ClearWorkplace()
	return m
}

// SetDropOptional sets the "drop_optional" field.
func (m *UserUpdateOne) SetDropOptional(v string) *UserUpdateOne {
	m.mutation.SetDropOptional(v)
	return m
}

// SetNillableDropOptional sets the "drop_optional" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDropOptional(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDropOptional(*v)
	}
	return m
}

// ClearDropOptional clears the value of the "drop_optional" field.
func (m *UserUpdateOne) ClearDropOptional() *UserUpdateOne {
	m.mutation.ClearDropOptional()
	return m
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (m *UserUpdateOne) SetParentID(id int) *UserUpdateOne {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableParentID(id *int) *UserUpdateOne {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the User entity.
func (m *UserUpdateOne) SetParent(v *User) *UserUpdateOne {
	return m.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (m *UserUpdateOne) AddChildIDs(ids ...int) *UserUpdateOne {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the User entity.
func (m *UserUpdateOne) AddChildren(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (m *UserUpdateOne) SetSpouseID(id int) *UserUpdateOne {
	m.mutation.SetSpouseID(id)
	return m
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableSpouseID(id *int) *UserUpdateOne {
	if id != nil {
		m = m.SetSpouseID(*id)
	}
	return m
}

// SetSpouse sets the "spouse" edge to the User entity.
func (m *UserUpdateOne) SetSpouse(v *User) *UserUpdateOne {
	return m.SetSpouseID(v.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (m *UserUpdateOne) SetCarID(id int) *UserUpdateOne {
	m.mutation.SetCarID(id)
	return m
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableCarID(id *int) *UserUpdateOne {
	if id != nil {
		m = m.SetCarID(*id)
	}
	return m
}

// SetCar sets the "car" edge to the Car entity.
func (m *UserUpdateOne) SetCar(v *Car) *UserUpdateOne {
	return m.SetCarID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdateOne) Mutation() *UserMutation {
	return m.mutation
}

// ClearParent clears the "parent" edge to the User entity.
func (u *UserUpdateOne) ClearParent() *UserUpdateOne {
	u.mutation.ClearParent()
	return u
}

// ClearChildren clears all "children" edges to the User entity.
func (u *UserUpdateOne) ClearChildren() *UserUpdateOne {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveChildIDs(ids ...int) *UserUpdateOne {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to User entities.
func (u *UserUpdateOne) RemoveChildren(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (u *UserUpdateOne) ClearSpouse() *UserUpdateOne {
	u.mutation.ClearSpouse()
	return u
}

// ClearCar clears the "car" edge to the Car entity.
func (u *UserUpdateOne) ClearCar() *UserUpdateOne {
	u.mutation.ClearCar()
	return u
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated User entity.
func (u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdateOne) check() error {
	if v, ok := u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entv1: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := u.mutation.Blob(); ok {
		if err := user.BlobValidator(v); err != nil {
			return &ValidationError{Name: "blob", err: fmt.Errorf(`entv1: validator failed for field "User.blob": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`entv1: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.Workplace(); ok {
		if err := user.WorkplaceValidator(v); err != nil {
			return &ValidationError{Name: "workplace", err: fmt.Errorf(`entv1: validator failed for field "User.workplace": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdateOne) sqlSave(ctx context.Context) (_n *User, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entv1: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entv1: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt32, value)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := u.mutation.Renamed(); ok {
		_spec.SetField(user.FieldRenamed, field.TypeString, value)
	}
	if u.mutation.RenamedCleared() {
		_spec.ClearField(user.FieldRenamed, field.TypeString)
	}
	if value, ok := u.mutation.OldToken(); ok {
		_spec.SetField(user.FieldOldToken, field.TypeString, value)
	}
	if value, ok := u.mutation.Blob(); ok {
		_spec.SetField(user.FieldBlob, field.TypeBytes, value)
	}
	if u.mutation.BlobCleared() {
		_spec.ClearField(user.FieldBlob, field.TypeBytes)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(user.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeString, value)
	}
	if u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeString)
	}
	if value, ok := u.mutation.Workplace(); ok {
		_spec.SetField(user.FieldWorkplace, field.TypeString, value)
	}
	if u.mutation.WorkplaceCleared() {
		_spec.ClearField(user.FieldWorkplace, field.TypeString)
	}
	if value, ok := u.mutation.DropOptional(); ok {
		_spec.SetField(user.FieldDropOptional, field.TypeString, value)
	}
	if u.mutation.DropOptionalCleared() {
		_spec.ClearField(user.FieldDropOptional, field.TypeString)
	}
	if u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &User{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
