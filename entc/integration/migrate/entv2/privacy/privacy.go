// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/entc/integration/migrate/entv2"
)

var (
	// Allow may be returned by read/write rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by read/write rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by read/write rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type (
	// ReadPolicy combines multiple read rules into a single policy.
	ReadPolicy []ReadRule

	// ReadRule defines the interface deciding whether a read is allowed.
	ReadRule interface {
		EvalRead(context.Context, entv2.Value) error
	}
)

// EvalRead evaluates a load against a read policy.
func (policy ReadPolicy) EvalRead(ctx context.Context, v entv2.Value) error {
	for _, rule := range policy {
		switch err := rule.EvalRead(ctx, v); {
		case err == nil || errors.Is(err, Skip):
		case errors.Is(err, Allow):
			return nil
		default:
			return err
		}
	}
	return nil
}

// ReadRuleFunc type is an adapter to allow the use of
// ordinary functions as read rules.
type ReadRuleFunc func(context.Context, entv2.Value) error

// Eval calls f(ctx, v).
func (f ReadRuleFunc) EvalRead(ctx context.Context, v entv2.Value) error {
	return f(ctx, v)
}

type (
	// WritePolicy combines multiple write rules into a single policy.
	WritePolicy []WriteRule

	// WriteRule defines the interface deciding whether a write is allowed.
	WriteRule interface {
		EvalWrite(context.Context, entv2.Mutation) error
	}
)

// EvalWrite evaluates a mutation against a write policy.
func (policy WritePolicy) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	for _, rule := range policy {
		switch err := rule.EvalWrite(ctx, m); {
		case err == nil || errors.Is(err, Skip):
		case errors.Is(err, Allow):
			return nil
		default:
			return err
		}
	}
	return nil
}

// WriteRuleFunc type is an adapter to allow the use of
// ordinary functions as write rules.
type WriteRuleFunc func(context.Context, entv2.Mutation) error

// Eval calls f(ctx, m).
func (f WriteRuleFunc) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	return f(ctx, m)
}

// Policy groups read and write policies.
type Policy struct {
	Read  ReadPolicy
	Write WritePolicy
}

// EvalRead forwards evaluation to read policy.
func (policy Policy) EvalRead(ctx context.Context, v entv2.Value) error {
	return policy.Read.EvalRead(ctx, v)
}

// EvalWrite forwards evaluation to write policy.
func (policy Policy) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	return policy.Write.EvalWrite(ctx, m)
}

// ReadWriteRule is the interface that groups read and write rules.
type ReadWriteRule interface {
	ReadRule
	WriteRule
}

// AlwaysAllowRule returns a read/write rule that returns an allow decision.
func AlwaysAllowRule() ReadWriteRule {
	return fixedDecisionRule{Allow}
}

// AlwaysDenyRule returns a read/write rule that returns a deny decision.
func AlwaysDenyRule() ReadWriteRule {
	return fixedDecisionRule{Deny}
}

type fixedDecisionRule struct{ err error }

func (f fixedDecisionRule) EvalRead(context.Context, entv2.Value) error     { return f.err }
func (f fixedDecisionRule) EvalWrite(context.Context, entv2.Mutation) error { return f.err }

// The CarReadRuleFunc type is an adapter to allow the use of ordinary
// functions as a read rule.
type CarReadRuleFunc func(context.Context, *entv2.Car) error

// EvalRead calls f(ctx, v).
func (f CarReadRuleFunc) EvalRead(ctx context.Context, v entv2.Value) error {
	if v, ok := v.(*entv2.Car); ok {
		return f(ctx, v)
	}
	return Denyf("ent/privacy: unexpected value type %T, expect *entv2.Car", v)
}

// The CarWriteRuleFunc type is an adapter to allow the use of ordinary
// functions as a write rule.
type CarWriteRuleFunc func(context.Context, *entv2.CarMutation) error

// EvalWrite calls f(ctx, m).
func (f CarWriteRuleFunc) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	if m, ok := m.(*entv2.CarMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *entv2.CarMutation", m)
}

// The GroupReadRuleFunc type is an adapter to allow the use of ordinary
// functions as a read rule.
type GroupReadRuleFunc func(context.Context, *entv2.Group) error

// EvalRead calls f(ctx, v).
func (f GroupReadRuleFunc) EvalRead(ctx context.Context, v entv2.Value) error {
	if v, ok := v.(*entv2.Group); ok {
		return f(ctx, v)
	}
	return Denyf("ent/privacy: unexpected value type %T, expect *entv2.Group", v)
}

// The GroupWriteRuleFunc type is an adapter to allow the use of ordinary
// functions as a write rule.
type GroupWriteRuleFunc func(context.Context, *entv2.GroupMutation) error

// EvalWrite calls f(ctx, m).
func (f GroupWriteRuleFunc) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	if m, ok := m.(*entv2.GroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *entv2.GroupMutation", m)
}

// The PetReadRuleFunc type is an adapter to allow the use of ordinary
// functions as a read rule.
type PetReadRuleFunc func(context.Context, *entv2.Pet) error

// EvalRead calls f(ctx, v).
func (f PetReadRuleFunc) EvalRead(ctx context.Context, v entv2.Value) error {
	if v, ok := v.(*entv2.Pet); ok {
		return f(ctx, v)
	}
	return Denyf("ent/privacy: unexpected value type %T, expect *entv2.Pet", v)
}

// The PetWriteRuleFunc type is an adapter to allow the use of ordinary
// functions as a write rule.
type PetWriteRuleFunc func(context.Context, *entv2.PetMutation) error

// EvalWrite calls f(ctx, m).
func (f PetWriteRuleFunc) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	if m, ok := m.(*entv2.PetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *entv2.PetMutation", m)
}

// The UserReadRuleFunc type is an adapter to allow the use of ordinary
// functions as a read rule.
type UserReadRuleFunc func(context.Context, *entv2.User) error

// EvalRead calls f(ctx, v).
func (f UserReadRuleFunc) EvalRead(ctx context.Context, v entv2.Value) error {
	if v, ok := v.(*entv2.User); ok {
		return f(ctx, v)
	}
	return Denyf("ent/privacy: unexpected value type %T, expect *entv2.User", v)
}

// The UserWriteRuleFunc type is an adapter to allow the use of ordinary
// functions as a write rule.
type UserWriteRuleFunc func(context.Context, *entv2.UserMutation) error

// EvalWrite calls f(ctx, m).
func (f UserWriteRuleFunc) EvalWrite(ctx context.Context, m entv2.Mutation) error {
	if m, ok := m.(*entv2.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *entv2.UserMutation", m)
}
