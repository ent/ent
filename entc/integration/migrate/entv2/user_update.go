// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package entv2

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/entc/integration/migrate/entv2/car"
	"entgo.io/ent/entc/integration/migrate/entv2/pet"
	"entgo.io/ent/entc/integration/migrate/entv2/predicate"
	"entgo.io/ent/entc/integration/migrate/entv2/user"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetMixedString sets the "mixed_string" field.
func (m *UserUpdate) SetMixedString(v string) *UserUpdate {
	m.mutation.SetMixedString(v)
	return m
}

// SetNillableMixedString sets the "mixed_string" field if the given value is not nil.
func (m *UserUpdate) SetNillableMixedString(v *string) *UserUpdate {
	if v != nil {
		m.SetMixedString(*v)
	}
	return m
}

// SetMixedEnum sets the "mixed_enum" field.
func (m *UserUpdate) SetMixedEnum(v user.MixedEnum) *UserUpdate {
	m.mutation.SetMixedEnum(v)
	return m
}

// SetNillableMixedEnum sets the "mixed_enum" field if the given value is not nil.
func (m *UserUpdate) SetNillableMixedEnum(v *user.MixedEnum) *UserUpdate {
	if v != nil {
		m.SetMixedEnum(*v)
	}
	return m
}

// SetActive sets the "active" field.
func (m *UserUpdate) SetActive(v bool) *UserUpdate {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *UserUpdate) SetNillableActive(v *bool) *UserUpdate {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// SetAge sets the "age" field.
func (m *UserUpdate) SetAge(v int) *UserUpdate {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdate) AddAge(v int) *UserUpdate {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdate) SetName(v string) *UserUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *UserUpdate) SetDescription(v string) *UserUpdate {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *UserUpdate) SetNillableDescription(v *string) *UserUpdate {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *UserUpdate) ClearDescription() *UserUpdate {
	m.mutation.ClearDescription()
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdate) SetNickname(v string) *UserUpdate {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// SetPhone sets the "phone" field.
func (m *UserUpdate) SetPhone(v string) *UserUpdate {
	m.mutation.SetPhone(v)
	return m
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (m *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		m.SetPhone(*v)
	}
	return m
}

// SetBuffer sets the "buffer" field.
func (m *UserUpdate) SetBuffer(v []byte) *UserUpdate {
	m.mutation.SetBuffer(v)
	return m
}

// ClearBuffer clears the value of the "buffer" field.
func (m *UserUpdate) ClearBuffer() *UserUpdate {
	m.mutation.ClearBuffer()
	return m
}

// SetTitle sets the "title" field.
func (m *UserUpdate) SetTitle(v string) *UserUpdate {
	m.mutation.SetTitle(v)
	return m
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (m *UserUpdate) SetNillableTitle(v *string) *UserUpdate {
	if v != nil {
		m.SetTitle(*v)
	}
	return m
}

// SetNewName sets the "new_name" field.
func (m *UserUpdate) SetNewName(v string) *UserUpdate {
	m.mutation.SetNewName(v)
	return m
}

// SetNillableNewName sets the "new_name" field if the given value is not nil.
func (m *UserUpdate) SetNillableNewName(v *string) *UserUpdate {
	if v != nil {
		m.SetNewName(*v)
	}
	return m
}

// ClearNewName clears the value of the "new_name" field.
func (m *UserUpdate) ClearNewName() *UserUpdate {
	m.mutation.ClearNewName()
	return m
}

// SetNewToken sets the "new_token" field.
func (m *UserUpdate) SetNewToken(v string) *UserUpdate {
	m.mutation.SetNewToken(v)
	return m
}

// SetNillableNewToken sets the "new_token" field if the given value is not nil.
func (m *UserUpdate) SetNillableNewToken(v *string) *UserUpdate {
	if v != nil {
		m.SetNewToken(*v)
	}
	return m
}

// SetBlob sets the "blob" field.
func (m *UserUpdate) SetBlob(v []byte) *UserUpdate {
	m.mutation.SetBlob(v)
	return m
}

// ClearBlob clears the value of the "blob" field.
func (m *UserUpdate) ClearBlob() *UserUpdate {
	m.mutation.ClearBlob()
	return m
}

// SetState sets the "state" field.
func (m *UserUpdate) SetState(v user.State) *UserUpdate {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *UserUpdate) SetNillableState(v *user.State) *UserUpdate {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *UserUpdate) ClearState() *UserUpdate {
	m.mutation.ClearState()
	return m
}

// SetStatus sets the "status" field.
func (m *UserUpdate) SetStatus(v user.Status) *UserUpdate {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *UserUpdate) SetNillableStatus(v *user.Status) *UserUpdate {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// ClearStatus clears the value of the "status" field.
func (m *UserUpdate) ClearStatus() *UserUpdate {
	m.mutation.ClearStatus()
	return m
}

// SetWorkplace sets the "workplace" field.
func (m *UserUpdate) SetWorkplace(v string) *UserUpdate {
	m.mutation.SetWorkplace(v)
	return m
}

// SetNillableWorkplace sets the "workplace" field if the given value is not nil.
func (m *UserUpdate) SetNillableWorkplace(v *string) *UserUpdate {
	if v != nil {
		m.SetWorkplace(*v)
	}
	return m
}

// ClearWorkplace clears the value of the "workplace" field.
func (m *UserUpdate) ClearWorkplace() *UserUpdate {
	m.mutation.ClearWorkplace()
	return m
}

// SetRoles sets the "roles" field.
func (m *UserUpdate) SetRoles(v []string) *UserUpdate {
	m.mutation.SetRoles(v)
	return m
}

// AppendRoles appends value to the "roles" field.
func (m *UserUpdate) AppendRoles(v []string) *UserUpdate {
	m.mutation.AppendRoles(v)
	return m
}

// ClearRoles clears the value of the "roles" field.
func (m *UserUpdate) ClearRoles() *UserUpdate {
	m.mutation.ClearRoles()
	return m
}

// SetDefaultExpr sets the "default_expr" field.
func (m *UserUpdate) SetDefaultExpr(v string) *UserUpdate {
	m.mutation.SetDefaultExpr(v)
	return m
}

// SetNillableDefaultExpr sets the "default_expr" field if the given value is not nil.
func (m *UserUpdate) SetNillableDefaultExpr(v *string) *UserUpdate {
	if v != nil {
		m.SetDefaultExpr(*v)
	}
	return m
}

// ClearDefaultExpr clears the value of the "default_expr" field.
func (m *UserUpdate) ClearDefaultExpr() *UserUpdate {
	m.mutation.ClearDefaultExpr()
	return m
}

// SetDefaultExprs sets the "default_exprs" field.
func (m *UserUpdate) SetDefaultExprs(v string) *UserUpdate {
	m.mutation.SetDefaultExprs(v)
	return m
}

// SetNillableDefaultExprs sets the "default_exprs" field if the given value is not nil.
func (m *UserUpdate) SetNillableDefaultExprs(v *string) *UserUpdate {
	if v != nil {
		m.SetDefaultExprs(*v)
	}
	return m
}

// ClearDefaultExprs clears the value of the "default_exprs" field.
func (m *UserUpdate) ClearDefaultExprs() *UserUpdate {
	m.mutation.ClearDefaultExprs()
	return m
}

// SetCreatedAt sets the "created_at" field.
func (m *UserUpdate) SetCreatedAt(v time.Time) *UserUpdate {
	m.mutation.SetCreatedAt(v)
	return m
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (m *UserUpdate) SetNillableCreatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		m.SetCreatedAt(*v)
	}
	return m
}

// SetDropOptional sets the "drop_optional" field.
func (m *UserUpdate) SetDropOptional(v string) *UserUpdate {
	m.mutation.SetDropOptional(v)
	return m
}

// SetNillableDropOptional sets the "drop_optional" field if the given value is not nil.
func (m *UserUpdate) SetNillableDropOptional(v *string) *UserUpdate {
	if v != nil {
		m.SetDropOptional(*v)
	}
	return m
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (m *UserUpdate) AddCarIDs(ids ...int) *UserUpdate {
	m.mutation.AddCarIDs(ids...)
	return m
}

// AddCar adds the "car" edges to the Car entity.
func (m *UserUpdate) AddCar(v ...*Car) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddCarIDs(ids...)
}

// SetPetsID sets the "pets" edge to the Pet entity by ID.
func (m *UserUpdate) SetPetsID(id int) *UserUpdate {
	m.mutation.SetPetsID(id)
	return m
}

// SetNillablePetsID sets the "pets" edge to the Pet entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillablePetsID(id *int) *UserUpdate {
	if id != nil {
		m = m.SetPetsID(*id)
	}
	return m
}

// SetPets sets the "pets" edge to the Pet entity.
func (m *UserUpdate) SetPets(v *Pet) *UserUpdate {
	return m.SetPetsID(v.ID)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (m *UserUpdate) AddFriendIDs(ids ...int) *UserUpdate {
	m.mutation.AddFriendIDs(ids...)
	return m
}

// AddFriends adds the "friends" edges to the User entity.
func (m *UserUpdate) AddFriends(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFriendIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdate) Mutation() *UserMutation {
	return m.mutation
}

// ClearCar clears all "car" edges to the Car entity.
func (u *UserUpdate) ClearCar() *UserUpdate {
	u.mutation.ClearCar()
	return u
}

// RemoveCarIDs removes the "car" edge to Car entities by IDs.
func (u *UserUpdate) RemoveCarIDs(ids ...int) *UserUpdate {
	u.mutation.RemoveCarIDs(ids...)
	return u
}

// RemoveCar removes "car" edges to Car entities.
func (u *UserUpdate) RemoveCar(v ...*Car) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveCarIDs(ids...)
}

// ClearPets clears the "pets" edge to the Pet entity.
func (u *UserUpdate) ClearPets() *UserUpdate {
	u.mutation.ClearPets()
	return u
}

// ClearFriends clears all "friends" edges to the User entity.
func (u *UserUpdate) ClearFriends() *UserUpdate {
	u.mutation.ClearFriends()
	return u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (u *UserUpdate) RemoveFriendIDs(ids ...int) *UserUpdate {
	u.mutation.RemoveFriendIDs(ids...)
	return u
}

// RemoveFriends removes "friends" edges to User entities.
func (u *UserUpdate) RemoveFriends(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFriendIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *UserUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdate) check() error {
	if v, ok := u.mutation.MixedEnum(); ok {
		if err := user.MixedEnumValidator(v); err != nil {
			return &ValidationError{Name: "mixed_enum", err: fmt.Errorf(`entv2: validator failed for field "User.mixed_enum": %w`, err)}
		}
	}
	if v, ok := u.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`entv2: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := u.mutation.Blob(); ok {
		if err := user.BlobValidator(v); err != nil {
			return &ValidationError{Name: "blob", err: fmt.Errorf(`entv2: validator failed for field "User.blob": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`entv2: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entv2: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.MixedString(); ok {
		_spec.SetField(user.FieldMixedString, field.TypeString, value)
	}
	if value, ok := u.mutation.MixedEnum(); ok {
		_spec.SetField(user.FieldMixedEnum, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := u.mutation.Buffer(); ok {
		_spec.SetField(user.FieldBuffer, field.TypeBytes, value)
	}
	if u.mutation.BufferCleared() {
		_spec.ClearField(user.FieldBuffer, field.TypeBytes)
	}
	if value, ok := u.mutation.Title(); ok {
		_spec.SetField(user.FieldTitle, field.TypeString, value)
	}
	if value, ok := u.mutation.NewName(); ok {
		_spec.SetField(user.FieldNewName, field.TypeString, value)
	}
	if u.mutation.NewNameCleared() {
		_spec.ClearField(user.FieldNewName, field.TypeString)
	}
	if value, ok := u.mutation.NewToken(); ok {
		_spec.SetField(user.FieldNewToken, field.TypeString, value)
	}
	if value, ok := u.mutation.Blob(); ok {
		_spec.SetField(user.FieldBlob, field.TypeBytes, value)
	}
	if u.mutation.BlobCleared() {
		_spec.ClearField(user.FieldBlob, field.TypeBytes)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(user.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := u.mutation.Workplace(); ok {
		_spec.SetField(user.FieldWorkplace, field.TypeString, value)
	}
	if u.mutation.WorkplaceCleared() {
		_spec.ClearField(user.FieldWorkplace, field.TypeString)
	}
	if value, ok := u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if u.mutation.RolesCleared() {
		_spec.ClearField(user.FieldRoles, field.TypeJSON)
	}
	if value, ok := u.mutation.DefaultExpr(); ok {
		_spec.SetField(user.FieldDefaultExpr, field.TypeString, value)
	}
	if u.mutation.DefaultExprCleared() {
		_spec.ClearField(user.FieldDefaultExpr, field.TypeString)
	}
	if value, ok := u.mutation.DefaultExprs(); ok {
		_spec.SetField(user.FieldDefaultExprs, field.TypeString, value)
	}
	if u.mutation.DefaultExprsCleared() {
		_spec.ClearField(user.FieldDefaultExprs, field.TypeString)
	}
	if value, ok := u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := u.mutation.DropOptional(); ok {
		_spec.SetField(user.FieldDropOptional, field.TypeString, value)
	}
	if u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedCarIDs(); len(nodes) > 0 && !u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetMixedString sets the "mixed_string" field.
func (m *UserUpdateOne) SetMixedString(v string) *UserUpdateOne {
	m.mutation.SetMixedString(v)
	return m
}

// SetNillableMixedString sets the "mixed_string" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableMixedString(v *string) *UserUpdateOne {
	if v != nil {
		m.SetMixedString(*v)
	}
	return m
}

// SetMixedEnum sets the "mixed_enum" field.
func (m *UserUpdateOne) SetMixedEnum(v user.MixedEnum) *UserUpdateOne {
	m.mutation.SetMixedEnum(v)
	return m
}

// SetNillableMixedEnum sets the "mixed_enum" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableMixedEnum(v *user.MixedEnum) *UserUpdateOne {
	if v != nil {
		m.SetMixedEnum(*v)
	}
	return m
}

// SetActive sets the "active" field.
func (m *UserUpdateOne) SetActive(v bool) *UserUpdateOne {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableActive(v *bool) *UserUpdateOne {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// SetAge sets the "age" field.
func (m *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdateOne) SetName(v string) *UserUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetDescription sets the "description" field.
func (m *UserUpdateOne) SetDescription(v string) *UserUpdateOne {
	m.mutation.SetDescription(v)
	return m
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDescription(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDescription(*v)
	}
	return m
}

// ClearDescription clears the value of the "description" field.
func (m *UserUpdateOne) ClearDescription() *UserUpdateOne {
	m.mutation.ClearDescription()
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// SetPhone sets the "phone" field.
func (m *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	m.mutation.SetPhone(v)
	return m
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (m *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		m.SetPhone(*v)
	}
	return m
}

// SetBuffer sets the "buffer" field.
func (m *UserUpdateOne) SetBuffer(v []byte) *UserUpdateOne {
	m.mutation.SetBuffer(v)
	return m
}

// ClearBuffer clears the value of the "buffer" field.
func (m *UserUpdateOne) ClearBuffer() *UserUpdateOne {
	m.mutation.ClearBuffer()
	return m
}

// SetTitle sets the "title" field.
func (m *UserUpdateOne) SetTitle(v string) *UserUpdateOne {
	m.mutation.SetTitle(v)
	return m
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableTitle(v *string) *UserUpdateOne {
	if v != nil {
		m.SetTitle(*v)
	}
	return m
}

// SetNewName sets the "new_name" field.
func (m *UserUpdateOne) SetNewName(v string) *UserUpdateOne {
	m.mutation.SetNewName(v)
	return m
}

// SetNillableNewName sets the "new_name" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableNewName(v *string) *UserUpdateOne {
	if v != nil {
		m.SetNewName(*v)
	}
	return m
}

// ClearNewName clears the value of the "new_name" field.
func (m *UserUpdateOne) ClearNewName() *UserUpdateOne {
	m.mutation.ClearNewName()
	return m
}

// SetNewToken sets the "new_token" field.
func (m *UserUpdateOne) SetNewToken(v string) *UserUpdateOne {
	m.mutation.SetNewToken(v)
	return m
}

// SetNillableNewToken sets the "new_token" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableNewToken(v *string) *UserUpdateOne {
	if v != nil {
		m.SetNewToken(*v)
	}
	return m
}

// SetBlob sets the "blob" field.
func (m *UserUpdateOne) SetBlob(v []byte) *UserUpdateOne {
	m.mutation.SetBlob(v)
	return m
}

// ClearBlob clears the value of the "blob" field.
func (m *UserUpdateOne) ClearBlob() *UserUpdateOne {
	m.mutation.ClearBlob()
	return m
}

// SetState sets the "state" field.
func (m *UserUpdateOne) SetState(v user.State) *UserUpdateOne {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableState(v *user.State) *UserUpdateOne {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *UserUpdateOne) ClearState() *UserUpdateOne {
	m.mutation.ClearState()
	return m
}

// SetStatus sets the "status" field.
func (m *UserUpdateOne) SetStatus(v user.Status) *UserUpdateOne {
	m.mutation.SetStatus(v)
	return m
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableStatus(v *user.Status) *UserUpdateOne {
	if v != nil {
		m.SetStatus(*v)
	}
	return m
}

// ClearStatus clears the value of the "status" field.
func (m *UserUpdateOne) ClearStatus() *UserUpdateOne {
	m.mutation.ClearStatus()
	return m
}

// SetWorkplace sets the "workplace" field.
func (m *UserUpdateOne) SetWorkplace(v string) *UserUpdateOne {
	m.mutation.SetWorkplace(v)
	return m
}

// SetNillableWorkplace sets the "workplace" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableWorkplace(v *string) *UserUpdateOne {
	if v != nil {
		m.SetWorkplace(*v)
	}
	return m
}

// ClearWorkplace clears the value of the "workplace" field.
func (m *UserUpdateOne) ClearWorkplace() *UserUpdateOne {
	m.mutation.ClearWorkplace()
	return m
}

// SetRoles sets the "roles" field.
func (m *UserUpdateOne) SetRoles(v []string) *UserUpdateOne {
	m.mutation.SetRoles(v)
	return m
}

// AppendRoles appends value to the "roles" field.
func (m *UserUpdateOne) AppendRoles(v []string) *UserUpdateOne {
	m.mutation.AppendRoles(v)
	return m
}

// ClearRoles clears the value of the "roles" field.
func (m *UserUpdateOne) ClearRoles() *UserUpdateOne {
	m.mutation.ClearRoles()
	return m
}

// SetDefaultExpr sets the "default_expr" field.
func (m *UserUpdateOne) SetDefaultExpr(v string) *UserUpdateOne {
	m.mutation.SetDefaultExpr(v)
	return m
}

// SetNillableDefaultExpr sets the "default_expr" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDefaultExpr(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDefaultExpr(*v)
	}
	return m
}

// ClearDefaultExpr clears the value of the "default_expr" field.
func (m *UserUpdateOne) ClearDefaultExpr() *UserUpdateOne {
	m.mutation.ClearDefaultExpr()
	return m
}

// SetDefaultExprs sets the "default_exprs" field.
func (m *UserUpdateOne) SetDefaultExprs(v string) *UserUpdateOne {
	m.mutation.SetDefaultExprs(v)
	return m
}

// SetNillableDefaultExprs sets the "default_exprs" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDefaultExprs(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDefaultExprs(*v)
	}
	return m
}

// ClearDefaultExprs clears the value of the "default_exprs" field.
func (m *UserUpdateOne) ClearDefaultExprs() *UserUpdateOne {
	m.mutation.ClearDefaultExprs()
	return m
}

// SetCreatedAt sets the "created_at" field.
func (m *UserUpdateOne) SetCreatedAt(v time.Time) *UserUpdateOne {
	m.mutation.SetCreatedAt(v)
	return m
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableCreatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		m.SetCreatedAt(*v)
	}
	return m
}

// SetDropOptional sets the "drop_optional" field.
func (m *UserUpdateOne) SetDropOptional(v string) *UserUpdateOne {
	m.mutation.SetDropOptional(v)
	return m
}

// SetNillableDropOptional sets the "drop_optional" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableDropOptional(v *string) *UserUpdateOne {
	if v != nil {
		m.SetDropOptional(*v)
	}
	return m
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (m *UserUpdateOne) AddCarIDs(ids ...int) *UserUpdateOne {
	m.mutation.AddCarIDs(ids...)
	return m
}

// AddCar adds the "car" edges to the Car entity.
func (m *UserUpdateOne) AddCar(v ...*Car) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddCarIDs(ids...)
}

// SetPetsID sets the "pets" edge to the Pet entity by ID.
func (m *UserUpdateOne) SetPetsID(id int) *UserUpdateOne {
	m.mutation.SetPetsID(id)
	return m
}

// SetNillablePetsID sets the "pets" edge to the Pet entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillablePetsID(id *int) *UserUpdateOne {
	if id != nil {
		m = m.SetPetsID(*id)
	}
	return m
}

// SetPets sets the "pets" edge to the Pet entity.
func (m *UserUpdateOne) SetPets(v *Pet) *UserUpdateOne {
	return m.SetPetsID(v.ID)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (m *UserUpdateOne) AddFriendIDs(ids ...int) *UserUpdateOne {
	m.mutation.AddFriendIDs(ids...)
	return m
}

// AddFriends adds the "friends" edges to the User entity.
func (m *UserUpdateOne) AddFriends(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFriendIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdateOne) Mutation() *UserMutation {
	return m.mutation
}

// ClearCar clears all "car" edges to the Car entity.
func (u *UserUpdateOne) ClearCar() *UserUpdateOne {
	u.mutation.ClearCar()
	return u
}

// RemoveCarIDs removes the "car" edge to Car entities by IDs.
func (u *UserUpdateOne) RemoveCarIDs(ids ...int) *UserUpdateOne {
	u.mutation.RemoveCarIDs(ids...)
	return u
}

// RemoveCar removes "car" edges to Car entities.
func (u *UserUpdateOne) RemoveCar(v ...*Car) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveCarIDs(ids...)
}

// ClearPets clears the "pets" edge to the Pet entity.
func (u *UserUpdateOne) ClearPets() *UserUpdateOne {
	u.mutation.ClearPets()
	return u
}

// ClearFriends clears all "friends" edges to the User entity.
func (u *UserUpdateOne) ClearFriends() *UserUpdateOne {
	u.mutation.ClearFriends()
	return u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveFriendIDs(ids ...int) *UserUpdateOne {
	u.mutation.RemoveFriendIDs(ids...)
	return u
}

// RemoveFriends removes "friends" edges to User entities.
func (u *UserUpdateOne) RemoveFriends(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFriendIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated User entity.
func (u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdateOne) check() error {
	if v, ok := u.mutation.MixedEnum(); ok {
		if err := user.MixedEnumValidator(v); err != nil {
			return &ValidationError{Name: "mixed_enum", err: fmt.Errorf(`entv2: validator failed for field "User.mixed_enum": %w`, err)}
		}
	}
	if v, ok := u.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`entv2: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := u.mutation.Blob(); ok {
		if err := user.BlobValidator(v); err != nil {
			return &ValidationError{Name: "blob", err: fmt.Errorf(`entv2: validator failed for field "User.blob": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`entv2: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entv2: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdateOne) sqlSave(ctx context.Context) (_n *User, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entv2: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entv2: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.MixedString(); ok {
		_spec.SetField(user.FieldMixedString, field.TypeString, value)
	}
	if value, ok := u.mutation.MixedEnum(); ok {
		_spec.SetField(user.FieldMixedEnum, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if value, ok := u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if value, ok := u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if value, ok := u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := u.mutation.Buffer(); ok {
		_spec.SetField(user.FieldBuffer, field.TypeBytes, value)
	}
	if u.mutation.BufferCleared() {
		_spec.ClearField(user.FieldBuffer, field.TypeBytes)
	}
	if value, ok := u.mutation.Title(); ok {
		_spec.SetField(user.FieldTitle, field.TypeString, value)
	}
	if value, ok := u.mutation.NewName(); ok {
		_spec.SetField(user.FieldNewName, field.TypeString, value)
	}
	if u.mutation.NewNameCleared() {
		_spec.ClearField(user.FieldNewName, field.TypeString)
	}
	if value, ok := u.mutation.NewToken(); ok {
		_spec.SetField(user.FieldNewToken, field.TypeString, value)
	}
	if value, ok := u.mutation.Blob(); ok {
		_spec.SetField(user.FieldBlob, field.TypeBytes, value)
	}
	if u.mutation.BlobCleared() {
		_spec.ClearField(user.FieldBlob, field.TypeBytes)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(user.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if u.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeEnum)
	}
	if value, ok := u.mutation.Workplace(); ok {
		_spec.SetField(user.FieldWorkplace, field.TypeString, value)
	}
	if u.mutation.WorkplaceCleared() {
		_spec.ClearField(user.FieldWorkplace, field.TypeString)
	}
	if value, ok := u.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldRoles, value)
		})
	}
	if u.mutation.RolesCleared() {
		_spec.ClearField(user.FieldRoles, field.TypeJSON)
	}
	if value, ok := u.mutation.DefaultExpr(); ok {
		_spec.SetField(user.FieldDefaultExpr, field.TypeString, value)
	}
	if u.mutation.DefaultExprCleared() {
		_spec.ClearField(user.FieldDefaultExpr, field.TypeString)
	}
	if value, ok := u.mutation.DefaultExprs(); ok {
		_spec.SetField(user.FieldDefaultExprs, field.TypeString, value)
	}
	if u.mutation.DefaultExprsCleared() {
		_spec.ClearField(user.FieldDefaultExprs, field.TypeString)
	}
	if value, ok := u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := u.mutation.DropOptional(); ok {
		_spec.SetField(user.FieldDropOptional, field.TypeString, value)
	}
	if u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedCarIDs(); len(nodes) > 0 && !u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_n = &User{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
