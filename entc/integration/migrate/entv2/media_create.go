// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package entv2

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/migrate/entv2/media"
	"entgo.io/ent/schema/field"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation         *MediaMutation
	hooks            []Hook
	constraintFields []string
}

// SetSource sets the "source" field.
func (mc *MediaCreate) SetSource(s string) *MediaCreate {
	mc.mutation.SetSource(s)
	return mc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSource(s *string) *MediaCreate {
	if s != nil {
		mc.SetSource(*s)
	}
	return mc
}

// SetSourceURI sets the "source_uri" field.
func (mc *MediaCreate) SetSourceURI(s string) *MediaCreate {
	mc.mutation.SetSourceURI(s)
	return mc
}

// SetNillableSourceURI sets the "source_uri" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSourceURI(s *string) *MediaCreate {
	if s != nil {
		mc.SetSourceURI(*s)
	}
	return mc
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	var (
		err  error
		node *Media
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	return nil
}

// OnConflict specifies how to handle inserts that conflict with a unique constraint on Media entities.
func (mc *MediaCreate) OnConflict(constraintField string, otherFields ...string) *MediaCreate {
	mc.constraintFields = []string{constraintField}
	mc.constraintFields = append(mc.constraintFields, otherFields...)
	return mc
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	err := mc.validateUpsertConstraints()
	if err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: media.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: media.FieldID,
			},
		}
	)

	if mc.constraintFields != nil {
		_spec.ConstraintFields = mc.constraintFields
	}
	if value, ok := mc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := mc.mutation.SourceURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: media.FieldSourceURI,
		})
		_node.SourceURI = value
	}
	return _node, _spec
}

// validateUpsertConstraints validates the columns specified in OnConflict are valid for
// handling conflicts on Media entities.
func (mc *MediaCreate) validateUpsertConstraints() error {
	for _, f := range mc.constraintFields {
		if !media.ValidConstraintColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for upsert conflict resolution, valid fields are: %+v", f, media.UniqueColumns)}
		}
	}
	return nil
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	builders              []*MediaCreate
	batchConstraintFields []string
}

// OnConflict specifies how to handle bulk inserts that conflict with a unique constraint on Media entities.
func (mcb *MediaCreateBulk) OnConflict(constraintField string, otherFields ...string) *MediaCreateBulk {
	mcb.batchConstraintFields = []string{constraintField}
	mcb.batchConstraintFields = append(mcb.batchConstraintFields, otherFields...)

	return mcb
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	err := mcb.validateUpsertConstraints()
	if err != nil {
		return nil, err
	}

	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs, BatchConstraintFields: mcb.batchConstraintFields}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// validateUpsertConstraints validates the columns specified in OnConflict are valid for
// handling conflicts on batch inserted Media entities.
func (mcb *MediaCreateBulk) validateUpsertConstraints() error {
	for _, f := range mcb.batchConstraintFields {
		if !media.ValidConstraintColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for upsert conflict resolution, valid fields are: %+v", f, media.UniqueColumns)}
		}
	}
	return nil
}
