// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package entv2

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/migrate/entv2/car"
	"entgo.io/ent/entc/integration/migrate/entv2/pet"
	"entgo.io/ent/entc/integration/migrate/entv2/user"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetMixedString sets the "mixed_string" field.
func (_c *UserCreate) SetMixedString(v string) *UserCreate {
	_c.mutation.SetMixedString(v)
	return _c
}

// SetNillableMixedString sets the "mixed_string" field if the given value is not nil.
func (_c *UserCreate) SetNillableMixedString(v *string) *UserCreate {
	if v != nil {
		_c.SetMixedString(*v)
	}
	return _c
}

// SetMixedEnum sets the "mixed_enum" field.
func (_c *UserCreate) SetMixedEnum(v user.MixedEnum) *UserCreate {
	_c.mutation.SetMixedEnum(v)
	return _c
}

// SetNillableMixedEnum sets the "mixed_enum" field if the given value is not nil.
func (_c *UserCreate) SetNillableMixedEnum(v *user.MixedEnum) *UserCreate {
	if v != nil {
		_c.SetMixedEnum(*v)
	}
	return _c
}

// SetActive sets the "active" field.
func (_c *UserCreate) SetActive(v bool) *UserCreate {
	_c.mutation.SetActive(v)
	return _c
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_c *UserCreate) SetNillableActive(v *bool) *UserCreate {
	if v != nil {
		_c.SetActive(*v)
	}
	return _c
}

// SetAge sets the "age" field.
func (_c *UserCreate) SetAge(v int) *UserCreate {
	_c.mutation.SetAge(v)
	return _c
}

// SetName sets the "name" field.
func (_c *UserCreate) SetName(v string) *UserCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *UserCreate) SetDescription(v string) *UserCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *UserCreate) SetNillableDescription(v *string) *UserCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetNickname sets the "nickname" field.
func (_c *UserCreate) SetNickname(v string) *UserCreate {
	_c.mutation.SetNickname(v)
	return _c
}

// SetPhone sets the "phone" field.
func (_c *UserCreate) SetPhone(v string) *UserCreate {
	_c.mutation.SetPhone(v)
	return _c
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_c *UserCreate) SetNillablePhone(v *string) *UserCreate {
	if v != nil {
		_c.SetPhone(*v)
	}
	return _c
}

// SetBuffer sets the "buffer" field.
func (_c *UserCreate) SetBuffer(v []byte) *UserCreate {
	_c.mutation.SetBuffer(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *UserCreate) SetTitle(v string) *UserCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *UserCreate) SetNillableTitle(v *string) *UserCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetNewName sets the "new_name" field.
func (_c *UserCreate) SetNewName(v string) *UserCreate {
	_c.mutation.SetNewName(v)
	return _c
}

// SetNillableNewName sets the "new_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableNewName(v *string) *UserCreate {
	if v != nil {
		_c.SetNewName(*v)
	}
	return _c
}

// SetNewToken sets the "new_token" field.
func (_c *UserCreate) SetNewToken(v string) *UserCreate {
	_c.mutation.SetNewToken(v)
	return _c
}

// SetNillableNewToken sets the "new_token" field if the given value is not nil.
func (_c *UserCreate) SetNillableNewToken(v *string) *UserCreate {
	if v != nil {
		_c.SetNewToken(*v)
	}
	return _c
}

// SetBlob sets the "blob" field.
func (_c *UserCreate) SetBlob(v []byte) *UserCreate {
	_c.mutation.SetBlob(v)
	return _c
}

// SetState sets the "state" field.
func (_c *UserCreate) SetState(v user.State) *UserCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_c *UserCreate) SetNillableState(v *user.State) *UserCreate {
	if v != nil {
		_c.SetState(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *UserCreate) SetStatus(v user.Status) *UserCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *UserCreate) SetNillableStatus(v *user.Status) *UserCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetWorkplace sets the "workplace" field.
func (_c *UserCreate) SetWorkplace(v string) *UserCreate {
	_c.mutation.SetWorkplace(v)
	return _c
}

// SetNillableWorkplace sets the "workplace" field if the given value is not nil.
func (_c *UserCreate) SetNillableWorkplace(v *string) *UserCreate {
	if v != nil {
		_c.SetWorkplace(*v)
	}
	return _c
}

// SetRoles sets the "roles" field.
func (_c *UserCreate) SetRoles(v []string) *UserCreate {
	_c.mutation.SetRoles(v)
	return _c
}

// SetDefaultExpr sets the "default_expr" field.
func (_c *UserCreate) SetDefaultExpr(v string) *UserCreate {
	_c.mutation.SetDefaultExpr(v)
	return _c
}

// SetNillableDefaultExpr sets the "default_expr" field if the given value is not nil.
func (_c *UserCreate) SetNillableDefaultExpr(v *string) *UserCreate {
	if v != nil {
		_c.SetDefaultExpr(*v)
	}
	return _c
}

// SetDefaultExprs sets the "default_exprs" field.
func (_c *UserCreate) SetDefaultExprs(v string) *UserCreate {
	_c.mutation.SetDefaultExprs(v)
	return _c
}

// SetNillableDefaultExprs sets the "default_exprs" field if the given value is not nil.
func (_c *UserCreate) SetNillableDefaultExprs(v *string) *UserCreate {
	if v != nil {
		_c.SetDefaultExprs(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetDropOptional sets the "drop_optional" field.
func (_c *UserCreate) SetDropOptional(v string) *UserCreate {
	_c.mutation.SetDropOptional(v)
	return _c
}

// SetNillableDropOptional sets the "drop_optional" field if the given value is not nil.
func (_c *UserCreate) SetNillableDropOptional(v *string) *UserCreate {
	if v != nil {
		_c.SetDropOptional(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v int) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddCarIDs adds the "car" edge to the Car entity by IDs.
func (_c *UserCreate) AddCarIDs(ids ...int) *UserCreate {
	_c.mutation.AddCarIDs(ids...)
	return _c
}

// AddCar adds the "car" edges to the Car entity.
func (_c *UserCreate) AddCar(v ...*Car) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCarIDs(ids...)
}

// SetPetsID sets the "pets" edge to the Pet entity by ID.
func (_c *UserCreate) SetPetsID(id int) *UserCreate {
	_c.mutation.SetPetsID(id)
	return _c
}

// SetNillablePetsID sets the "pets" edge to the Pet entity by ID if the given value is not nil.
func (_c *UserCreate) SetNillablePetsID(id *int) *UserCreate {
	if id != nil {
		_c = _c.SetPetsID(*id)
	}
	return _c
}

// SetPets sets the "pets" edge to the Pet entity.
func (_c *UserCreate) SetPets(v *Pet) *UserCreate {
	return _c.SetPetsID(v.ID)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (_c *UserCreate) AddFriendIDs(ids ...int) *UserCreate {
	_c.mutation.AddFriendIDs(ids...)
	return _c
}

// AddFriends adds the "friends" edges to the User entity.
func (_c *UserCreate) AddFriends(v ...*User) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFriendIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.MixedString(); !ok {
		v := user.DefaultMixedString
		_c.mutation.SetMixedString(v)
	}
	if _, ok := _c.mutation.MixedEnum(); !ok {
		v := user.DefaultMixedEnum
		_c.mutation.SetMixedEnum(v)
	}
	if _, ok := _c.mutation.Active(); !ok {
		v := user.DefaultActive
		_c.mutation.SetActive(v)
	}
	if _, ok := _c.mutation.Phone(); !ok {
		v := user.DefaultPhone
		_c.mutation.SetPhone(v)
	}
	if _, ok := _c.mutation.Buffer(); !ok {
		v := user.DefaultBuffer()
		_c.mutation.SetBuffer(v)
	}
	if _, ok := _c.mutation.Title(); !ok {
		v := user.DefaultTitle
		_c.mutation.SetTitle(v)
	}
	if _, ok := _c.mutation.NewToken(); !ok {
		v := user.DefaultNewToken()
		_c.mutation.SetNewToken(v)
	}
	if _, ok := _c.mutation.State(); !ok {
		v := user.DefaultState
		_c.mutation.SetState(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.DropOptional(); !ok {
		v := user.DefaultDropOptional()
		_c.mutation.SetDropOptional(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.MixedString(); !ok {
		return &ValidationError{Name: "mixed_string", err: errors.New(`entv2: missing required field "User.mixed_string"`)}
	}
	if _, ok := _c.mutation.MixedEnum(); !ok {
		return &ValidationError{Name: "mixed_enum", err: errors.New(`entv2: missing required field "User.mixed_enum"`)}
	}
	if v, ok := _c.mutation.MixedEnum(); ok {
		if err := user.MixedEnumValidator(v); err != nil {
			return &ValidationError{Name: "mixed_enum", err: fmt.Errorf(`entv2: validator failed for field "User.mixed_enum": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`entv2: missing required field "User.active"`)}
	}
	if _, ok := _c.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`entv2: missing required field "User.age"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entv2: missing required field "User.name"`)}
	}
	if _, ok := _c.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`entv2: missing required field "User.nickname"`)}
	}
	if v, ok := _c.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`entv2: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`entv2: missing required field "User.phone"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`entv2: missing required field "User.title"`)}
	}
	if _, ok := _c.mutation.NewToken(); !ok {
		return &ValidationError{Name: "new_token", err: errors.New(`entv2: missing required field "User.new_token"`)}
	}
	if v, ok := _c.mutation.Blob(); ok {
		if err := user.BlobValidator(v); err != nil {
			return &ValidationError{Name: "blob", err: fmt.Errorf(`entv2: validator failed for field "User.blob": %w`, err)}
		}
	}
	if v, ok := _c.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`entv2: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entv2: validator failed for field "User.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entv2: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.DropOptional(); !ok {
		return &ValidationError{Name: "drop_optional", err: errors.New(`entv2: missing required field "User.drop_optional"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.MixedString(); ok {
		_spec.SetField(user.FieldMixedString, field.TypeString, value)
		_node.MixedString = value
	}
	if value, ok := _c.mutation.MixedEnum(); ok {
		_spec.SetField(user.FieldMixedEnum, field.TypeEnum, value)
		_node.MixedEnum = value
	}
	if value, ok := _c.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := _c.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := _c.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := _c.mutation.Buffer(); ok {
		_spec.SetField(user.FieldBuffer, field.TypeBytes, value)
		_node.Buffer = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(user.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.NewName(); ok {
		_spec.SetField(user.FieldNewName, field.TypeString, value)
		_node.NewName = value
	}
	if value, ok := _c.mutation.NewToken(); ok {
		_spec.SetField(user.FieldNewToken, field.TypeString, value)
		_node.NewToken = value
	}
	if value, ok := _c.mutation.Blob(); ok {
		_spec.SetField(user.FieldBlob, field.TypeBytes, value)
		_node.Blob = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Workplace(); ok {
		_spec.SetField(user.FieldWorkplace, field.TypeString, value)
		_node.Workplace = value
	}
	if value, ok := _c.mutation.Roles(); ok {
		_spec.SetField(user.FieldRoles, field.TypeJSON, value)
		_node.Roles = value
	}
	if value, ok := _c.mutation.DefaultExpr(); ok {
		_spec.SetField(user.FieldDefaultExpr, field.TypeString, value)
		_node.DefaultExpr = value
	}
	if value, ok := _c.mutation.DefaultExprs(); ok {
		_spec.SetField(user.FieldDefaultExprs, field.TypeString, value)
		_node.DefaultExprs = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.DropOptional(); ok {
		_spec.SetField(user.FieldDropOptional, field.TypeString, value)
		_node.DropOptional = value
	}
	if nodes := _c.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarTable,
			Columns: []string{user.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
