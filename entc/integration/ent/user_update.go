// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/card"
	"entgo.io/ent/entc/integration/ent/file"
	"entgo.io/ent/entc/integration/ent/group"
	"entgo.io/ent/entc/integration/ent/pet"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/user"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetOptionalInt sets the "optional_int" field.
func (_u *UserUpdate) SetOptionalInt(v int) *UserUpdate {
	_u.mutation.ResetOptionalInt()
	_u.mutation.SetOptionalInt(v)
	return _u
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (_u *UserUpdate) SetNillableOptionalInt(v *int) *UserUpdate {
	if v != nil {
		_u.SetOptionalInt(*v)
	}
	return _u
}

// AddOptionalInt adds value to the "optional_int" field.
func (_u *UserUpdate) AddOptionalInt(v int) *UserUpdate {
	_u.mutation.AddOptionalInt(v)
	return _u
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (_u *UserUpdate) ClearOptionalInt() *UserUpdate {
	_u.mutation.ClearOptionalInt()
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdate) SetAge(v int) *UserUpdate {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdate) AddAge(v int) *UserUpdate {
	_u.mutation.AddAge(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetLast sets the "last" field.
func (_u *UserUpdate) SetLast(v string) *UserUpdate {
	_u.mutation.SetLast(v)
	return _u
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLast(v *string) *UserUpdate {
	if v != nil {
		_u.SetLast(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdate) SetNickname(v string) *UserUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdate) ClearNickname() *UserUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// SetAddress sets the "address" field.
func (_u *UserUpdate) SetAddress(v string) *UserUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAddress(v *string) *UserUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *UserUpdate) ClearAddress() *UserUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdate) SetPhone(v string) *UserUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdate) ClearPhone() *UserUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *UserUpdate) ClearPassword() *UserUpdate {
	_u.mutation.ClearPassword()
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdate) SetRole(v user.Role) *UserUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRole(v *user.Role) *UserUpdate {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetEmployment sets the "employment" field.
func (_u *UserUpdate) SetEmployment(v user.Employment) *UserUpdate {
	_u.mutation.SetEmployment(v)
	return _u
}

// SetNillableEmployment sets the "employment" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmployment(v *user.Employment) *UserUpdate {
	if v != nil {
		_u.SetEmployment(*v)
	}
	return _u
}

// SetSSOCert sets the "SSOCert" field.
func (_u *UserUpdate) SetSSOCert(v string) *UserUpdate {
	_u.mutation.SetSSOCert(v)
	return _u
}

// SetNillableSSOCert sets the "SSOCert" field if the given value is not nil.
func (_u *UserUpdate) SetNillableSSOCert(v *string) *UserUpdate {
	if v != nil {
		_u.SetSSOCert(*v)
	}
	return _u
}

// ClearSSOCert clears the value of the "SSOCert" field.
func (_u *UserUpdate) ClearSSOCert() *UserUpdate {
	_u.mutation.ClearSSOCert()
	return _u
}

// SetFilesCount sets the "files_count" field.
func (_u *UserUpdate) SetFilesCount(v int) *UserUpdate {
	_u.mutation.ResetFilesCount()
	_u.mutation.SetFilesCount(v)
	return _u
}

// SetNillableFilesCount sets the "files_count" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFilesCount(v *int) *UserUpdate {
	if v != nil {
		_u.SetFilesCount(*v)
	}
	return _u
}

// AddFilesCount adds value to the "files_count" field.
func (_u *UserUpdate) AddFilesCount(v int) *UserUpdate {
	_u.mutation.AddFilesCount(v)
	return _u
}

// ClearFilesCount clears the value of the "files_count" field.
func (_u *UserUpdate) ClearFilesCount() *UserUpdate {
	_u.mutation.ClearFilesCount()
	return _u
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (_u *UserUpdate) SetCardID(id int) *UserUpdate {
	_u.mutation.SetCardID(id)
	return _u
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableCardID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetCardID(*id)
	}
	return _u
}

// SetCard sets the "card" edge to the Card entity.
func (_u *UserUpdate) SetCard(v *Card) *UserUpdate {
	return _u.SetCardID(v.ID)
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *UserUpdate) AddPetIDs(ids ...int) *UserUpdate {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *UserUpdate) AddPets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *UserUpdate) AddFileIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *UserUpdate) AddFiles(v ...*File) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *UserUpdate) AddGroupIDs(ids ...int) *UserUpdate {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *UserUpdate) AddGroups(v ...*Group) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (_u *UserUpdate) AddFriendIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFriendIDs(ids...)
	return _u
}

// AddFriends adds the "friends" edges to the User entity.
func (_u *UserUpdate) AddFriends(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendIDs(ids...)
}

// AddFollowerIDs adds the "followers" edge to the User entity by IDs.
func (_u *UserUpdate) AddFollowerIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFollowerIDs(ids...)
	return _u
}

// AddFollowers adds the "followers" edges to the User entity.
func (_u *UserUpdate) AddFollowers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the User entity by IDs.
func (_u *UserUpdate) AddFollowingIDs(ids ...int) *UserUpdate {
	_u.mutation.AddFollowingIDs(ids...)
	return _u
}

// AddFollowing adds the "following" edges to the User entity.
func (_u *UserUpdate) AddFollowing(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowingIDs(ids...)
}

// SetTeamID sets the "team" edge to the Pet entity by ID.
func (_u *UserUpdate) SetTeamID(id int) *UserUpdate {
	_u.mutation.SetTeamID(id)
	return _u
}

// SetNillableTeamID sets the "team" edge to the Pet entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableTeamID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetTeamID(*id)
	}
	return _u
}

// SetTeam sets the "team" edge to the Pet entity.
func (_u *UserUpdate) SetTeam(v *Pet) *UserUpdate {
	return _u.SetTeamID(v.ID)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (_u *UserUpdate) SetSpouseID(id int) *UserUpdate {
	_u.mutation.SetSpouseID(id)
	return _u
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableSpouseID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetSpouseID(*id)
	}
	return _u
}

// SetSpouse sets the "spouse" edge to the User entity.
func (_u *UserUpdate) SetSpouse(v *User) *UserUpdate {
	return _u.SetSpouseID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (_u *UserUpdate) AddChildIDs(ids ...int) *UserUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the User entity.
func (_u *UserUpdate) AddChildren(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (_u *UserUpdate) SetParentID(id int) *UserUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (_u *UserUpdate) SetNillableParentID(id *int) *UserUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the User entity.
func (_u *UserUpdate) SetParent(v *User) *UserUpdate {
	return _u.SetParentID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (_u *UserUpdate) ClearCard() *UserUpdate {
	_u.mutation.ClearCard()
	return _u
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *UserUpdate) ClearPets() *UserUpdate {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *UserUpdate) RemovePetIDs(ids ...int) *UserUpdate {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *UserUpdate) RemovePets(v ...*Pet) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *UserUpdate) ClearFiles() *UserUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *UserUpdate) RemoveFileIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *UserUpdate) RemoveFiles(v ...*File) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *UserUpdate) ClearGroups() *UserUpdate {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *UserUpdate) RemoveGroupIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *UserUpdate) RemoveGroups(v ...*Group) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (_u *UserUpdate) ClearFriends() *UserUpdate {
	_u.mutation.ClearFriends()
	return _u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (_u *UserUpdate) RemoveFriendIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFriendIDs(ids...)
	return _u
}

// RemoveFriends removes "friends" edges to User entities.
func (_u *UserUpdate) RemoveFriends(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendIDs(ids...)
}

// ClearFollowers clears all "followers" edges to the User entity.
func (_u *UserUpdate) ClearFollowers() *UserUpdate {
	_u.mutation.ClearFollowers()
	return _u
}

// RemoveFollowerIDs removes the "followers" edge to User entities by IDs.
func (_u *UserUpdate) RemoveFollowerIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFollowerIDs(ids...)
	return _u
}

// RemoveFollowers removes "followers" edges to User entities.
func (_u *UserUpdate) RemoveFollowers(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowerIDs(ids...)
}

// ClearFollowing clears all "following" edges to the User entity.
func (_u *UserUpdate) ClearFollowing() *UserUpdate {
	_u.mutation.ClearFollowing()
	return _u
}

// RemoveFollowingIDs removes the "following" edge to User entities by IDs.
func (_u *UserUpdate) RemoveFollowingIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveFollowingIDs(ids...)
	return _u
}

// RemoveFollowing removes "following" edges to User entities.
func (_u *UserUpdate) RemoveFollowing(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowingIDs(ids...)
}

// ClearTeam clears the "team" edge to the Pet entity.
func (_u *UserUpdate) ClearTeam() *UserUpdate {
	_u.mutation.ClearTeam()
	return _u
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (_u *UserUpdate) ClearSpouse() *UserUpdate {
	_u.mutation.ClearSpouse()
	return _u
}

// ClearChildren clears all "children" edges to the User entity.
func (_u *UserUpdate) ClearChildren() *UserUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (_u *UserUpdate) RemoveChildIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to User entities.
func (_u *UserUpdate) RemoveChildren(v ...*User) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the User entity.
func (_u *UserUpdate) ClearParent() *UserUpdate {
	_u.mutation.ClearParent()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.OptionalInt(); ok {
		if err := user.OptionalIntValidator(v); err != nil {
			return &ValidationError{Name: "optional_int", err: fmt.Errorf(`ent: validator failed for field "User.optional_int": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Employment(); ok {
		if err := user.EmploymentValidator(v); err != nil {
			return &ValidationError{Name: "employment", err: fmt.Errorf(`ent: validator failed for field "User.employment": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OptionalInt(); ok {
		_spec.SetField(user.FieldOptionalInt, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt(); ok {
		_spec.AddField(user.FieldOptionalInt, field.TypeInt, value)
	}
	if _u.mutation.OptionalIntCleared() {
		_spec.ClearField(user.FieldOptionalInt, field.TypeInt)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Last(); ok {
		_spec.SetField(user.FieldLast, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Employment(); ok {
		_spec.SetField(user.FieldEmployment, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SSOCert(); ok {
		_spec.SetField(user.FieldSSOCert, field.TypeString, value)
	}
	if _u.mutation.SSOCertCleared() {
		_spec.ClearField(user.FieldSSOCert, field.TypeString)
	}
	if value, ok := _u.mutation.FilesCount(); ok {
		_spec.SetField(user.FieldFilesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFilesCount(); ok {
		_spec.AddField(user.FieldFilesCount, field.TypeInt, value)
	}
	if _u.mutation.FilesCountCleared() {
		_spec.ClearField(user.FieldFilesCount, field.TypeInt)
	}
	if _u.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !_u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowersIDs(); len(nodes) > 0 && !_u.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowingIDs(); len(nodes) > 0 && !_u.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOptionalInt sets the "optional_int" field.
func (_u *UserUpdateOne) SetOptionalInt(v int) *UserUpdateOne {
	_u.mutation.ResetOptionalInt()
	_u.mutation.SetOptionalInt(v)
	return _u
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableOptionalInt(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetOptionalInt(*v)
	}
	return _u
}

// AddOptionalInt adds value to the "optional_int" field.
func (_u *UserUpdateOne) AddOptionalInt(v int) *UserUpdateOne {
	_u.mutation.AddOptionalInt(v)
	return _u
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (_u *UserUpdateOne) ClearOptionalInt() *UserUpdateOne {
	_u.mutation.ClearOptionalInt()
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	_u.mutation.AddAge(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetLast sets the "last" field.
func (_u *UserUpdateOne) SetLast(v string) *UserUpdateOne {
	_u.mutation.SetLast(v)
	return _u
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLast(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLast(*v)
	}
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdateOne) ClearNickname() *UserUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// SetAddress sets the "address" field.
func (_u *UserUpdateOne) SetAddress(v string) *UserUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAddress(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *UserUpdateOne) ClearAddress() *UserUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdateOne) ClearPhone() *UserUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *UserUpdateOne) ClearPassword() *UserUpdateOne {
	_u.mutation.ClearPassword()
	return _u
}

// SetRole sets the "role" field.
func (_u *UserUpdateOne) SetRole(v user.Role) *UserUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRole(v *user.Role) *UserUpdateOne {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetEmployment sets the "employment" field.
func (_u *UserUpdateOne) SetEmployment(v user.Employment) *UserUpdateOne {
	_u.mutation.SetEmployment(v)
	return _u
}

// SetNillableEmployment sets the "employment" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmployment(v *user.Employment) *UserUpdateOne {
	if v != nil {
		_u.SetEmployment(*v)
	}
	return _u
}

// SetSSOCert sets the "SSOCert" field.
func (_u *UserUpdateOne) SetSSOCert(v string) *UserUpdateOne {
	_u.mutation.SetSSOCert(v)
	return _u
}

// SetNillableSSOCert sets the "SSOCert" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSSOCert(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetSSOCert(*v)
	}
	return _u
}

// ClearSSOCert clears the value of the "SSOCert" field.
func (_u *UserUpdateOne) ClearSSOCert() *UserUpdateOne {
	_u.mutation.ClearSSOCert()
	return _u
}

// SetFilesCount sets the "files_count" field.
func (_u *UserUpdateOne) SetFilesCount(v int) *UserUpdateOne {
	_u.mutation.ResetFilesCount()
	_u.mutation.SetFilesCount(v)
	return _u
}

// SetNillableFilesCount sets the "files_count" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFilesCount(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetFilesCount(*v)
	}
	return _u
}

// AddFilesCount adds value to the "files_count" field.
func (_u *UserUpdateOne) AddFilesCount(v int) *UserUpdateOne {
	_u.mutation.AddFilesCount(v)
	return _u
}

// ClearFilesCount clears the value of the "files_count" field.
func (_u *UserUpdateOne) ClearFilesCount() *UserUpdateOne {
	_u.mutation.ClearFilesCount()
	return _u
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (_u *UserUpdateOne) SetCardID(id int) *UserUpdateOne {
	_u.mutation.SetCardID(id)
	return _u
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCardID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetCardID(*id)
	}
	return _u
}

// SetCard sets the "card" edge to the Card entity.
func (_u *UserUpdateOne) SetCard(v *Card) *UserUpdateOne {
	return _u.SetCardID(v.ID)
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (_u *UserUpdateOne) AddPetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddPetIDs(ids...)
	return _u
}

// AddPets adds the "pets" edges to the Pet entity.
func (_u *UserUpdateOne) AddPets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPetIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *UserUpdateOne) AddFileIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *UserUpdateOne) AddFiles(v ...*File) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *UserUpdateOne) AddGroupIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *UserUpdateOne) AddGroups(v ...*Group) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddFriendIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFriendIDs(ids...)
	return _u
}

// AddFriends adds the "friends" edges to the User entity.
func (_u *UserUpdateOne) AddFriends(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFriendIDs(ids...)
}

// AddFollowerIDs adds the "followers" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddFollowerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFollowerIDs(ids...)
	return _u
}

// AddFollowers adds the "followers" edges to the User entity.
func (_u *UserUpdateOne) AddFollowers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddFollowingIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddFollowingIDs(ids...)
	return _u
}

// AddFollowing adds the "following" edges to the User entity.
func (_u *UserUpdateOne) AddFollowing(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFollowingIDs(ids...)
}

// SetTeamID sets the "team" edge to the Pet entity by ID.
func (_u *UserUpdateOne) SetTeamID(id int) *UserUpdateOne {
	_u.mutation.SetTeamID(id)
	return _u
}

// SetNillableTeamID sets the "team" edge to the Pet entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTeamID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetTeamID(*id)
	}
	return _u
}

// SetTeam sets the "team" edge to the Pet entity.
func (_u *UserUpdateOne) SetTeam(v *Pet) *UserUpdateOne {
	return _u.SetTeamID(v.ID)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (_u *UserUpdateOne) SetSpouseID(id int) *UserUpdateOne {
	_u.mutation.SetSpouseID(id)
	return _u
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSpouseID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetSpouseID(*id)
	}
	return _u
}

// SetSpouse sets the "spouse" edge to the User entity.
func (_u *UserUpdateOne) SetSpouse(v *User) *UserUpdateOne {
	return _u.SetSpouseID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (_u *UserUpdateOne) AddChildIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the User entity.
func (_u *UserUpdateOne) AddChildren(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (_u *UserUpdateOne) SetParentID(id int) *UserUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (_u *UserUpdateOne) SetNillableParentID(id *int) *UserUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the User entity.
func (_u *UserUpdateOne) SetParent(v *User) *UserUpdateOne {
	return _u.SetParentID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (_u *UserUpdateOne) ClearCard() *UserUpdateOne {
	_u.mutation.ClearCard()
	return _u
}

// ClearPets clears all "pets" edges to the Pet entity.
func (_u *UserUpdateOne) ClearPets() *UserUpdateOne {
	_u.mutation.ClearPets()
	return _u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (_u *UserUpdateOne) RemovePetIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemovePetIDs(ids...)
	return _u
}

// RemovePets removes "pets" edges to Pet entities.
func (_u *UserUpdateOne) RemovePets(v ...*Pet) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePetIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *UserUpdateOne) ClearFiles() *UserUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *UserUpdateOne) RemoveFileIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *UserUpdateOne) RemoveFiles(v ...*File) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *UserUpdateOne) ClearGroups() *UserUpdateOne {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *UserUpdateOne) RemoveGroupIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *UserUpdateOne) RemoveGroups(v ...*Group) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (_u *UserUpdateOne) ClearFriends() *UserUpdateOne {
	_u.mutation.ClearFriends()
	return _u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveFriendIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFriendIDs(ids...)
	return _u
}

// RemoveFriends removes "friends" edges to User entities.
func (_u *UserUpdateOne) RemoveFriends(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFriendIDs(ids...)
}

// ClearFollowers clears all "followers" edges to the User entity.
func (_u *UserUpdateOne) ClearFollowers() *UserUpdateOne {
	_u.mutation.ClearFollowers()
	return _u
}

// RemoveFollowerIDs removes the "followers" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveFollowerIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFollowerIDs(ids...)
	return _u
}

// RemoveFollowers removes "followers" edges to User entities.
func (_u *UserUpdateOne) RemoveFollowers(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowerIDs(ids...)
}

// ClearFollowing clears all "following" edges to the User entity.
func (_u *UserUpdateOne) ClearFollowing() *UserUpdateOne {
	_u.mutation.ClearFollowing()
	return _u
}

// RemoveFollowingIDs removes the "following" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveFollowingIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveFollowingIDs(ids...)
	return _u
}

// RemoveFollowing removes "following" edges to User entities.
func (_u *UserUpdateOne) RemoveFollowing(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFollowingIDs(ids...)
}

// ClearTeam clears the "team" edge to the Pet entity.
func (_u *UserUpdateOne) ClearTeam() *UserUpdateOne {
	_u.mutation.ClearTeam()
	return _u
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (_u *UserUpdateOne) ClearSpouse() *UserUpdateOne {
	_u.mutation.ClearSpouse()
	return _u
}

// ClearChildren clears all "children" edges to the User entity.
func (_u *UserUpdateOne) ClearChildren() *UserUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (_u *UserUpdateOne) RemoveChildIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to User entities.
func (_u *UserUpdateOne) RemoveChildren(v ...*User) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the User entity.
func (_u *UserUpdateOne) ClearParent() *UserUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.OptionalInt(); ok {
		if err := user.OptionalIntValidator(v); err != nil {
			return &ValidationError{Name: "optional_int", err: fmt.Errorf(`ent: validator failed for field "User.optional_int": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Employment(); ok {
		if err := user.EmploymentValidator(v); err != nil {
			return &ValidationError{Name: "employment", err: fmt.Errorf(`ent: validator failed for field "User.employment": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.OptionalInt(); ok {
		_spec.SetField(user.FieldOptionalInt, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt(); ok {
		_spec.AddField(user.FieldOptionalInt, field.TypeInt, value)
	}
	if _u.mutation.OptionalIntCleared() {
		_spec.ClearField(user.FieldOptionalInt, field.TypeInt)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Last(); ok {
		_spec.SetField(user.FieldLast, field.TypeString, value)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(user.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if _u.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := _u.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Employment(); ok {
		_spec.SetField(user.FieldEmployment, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.SSOCert(); ok {
		_spec.SetField(user.FieldSSOCert, field.TypeString, value)
	}
	if _u.mutation.SSOCertCleared() {
		_spec.ClearField(user.FieldSSOCert, field.TypeString)
	}
	if value, ok := _u.mutation.FilesCount(); ok {
		_spec.SetField(user.FieldFilesCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedFilesCount(); ok {
		_spec.AddField(user.FieldFilesCount, field.TypeInt, value)
	}
	if _u.mutation.FilesCountCleared() {
		_spec.ClearField(user.FieldFilesCount, field.TypeInt)
	}
	if _u.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.CardTable,
			Columns: []string{user.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPetsIDs(); len(nodes) > 0 && !_u.mutation.PetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PetsTable,
			Columns: []string{user.PetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFriendsIDs(); len(nodes) > 0 && !_u.mutation.FriendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FriendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FriendsTable,
			Columns: user.FriendsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowersIDs(); len(nodes) > 0 && !_u.mutation.FollowersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.FollowersTable,
			Columns: user.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFollowingIDs(); len(nodes) > 0 && !_u.mutation.FollowingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FollowingTable,
			Columns: user.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TeamTable,
			Columns: []string{user.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SpouseTable,
			Columns: []string{user.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChildrenTable,
			Columns: []string{user.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.ParentTable,
			Columns: []string{user.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
