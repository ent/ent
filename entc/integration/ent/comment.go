// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/ent/comment"
	schemadir "entgo.io/ent/entc/integration/ent/schema/dir"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UniqueInt holds the value of the "unique_int" field.
	UniqueInt int `json:"unique_int,omitempty"`
	// UniqueFloat holds the value of the "unique_float" field.
	UniqueFloat float64 `json:"unique_float,omitempty"`
	// NillableInt holds the value of the "nillable_int" field.
	NillableInt *int `json:"nillable_int,omitempty"`
	// Table holds the value of the "table" field.
	Table string `json:"table,omitempty"`
	// Dir holds the value of the "dir" field.
	Dir schemadir.Dir `json:"dir,omitempty"`
	// Client holds the value of the "client" field.
	Client       string `json:"client,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldDir:
			values[i] = new([]byte)
		case comment.FieldUniqueFloat:
			values[i] = new(sql.NullFloat64)
		case comment.FieldID, comment.FieldUniqueInt, comment.FieldNillableInt:
			values[i] = new(sql.NullInt64)
		case comment.FieldTable, comment.FieldClient:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (m *Comment) assignValues(columns []string, values []any) error {
	if v, c := len(values), len(columns); v < c {
		return fmt.Errorf("mismatch number of scan values: %d != %d", v, c)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case comment.FieldUniqueInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unique_int", values[i])
			} else if value.Valid {
				m.UniqueInt = int(value.Int64)
			}
		case comment.FieldUniqueFloat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unique_float", values[i])
			} else if value.Valid {
				m.UniqueFloat = value.Float64
			}
		case comment.FieldNillableInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nillable_int", values[i])
			} else if value.Valid {
				m.NillableInt = new(int)
				*m.NillableInt = int(value.Int64)
			}
		case comment.FieldTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field table", values[i])
			} else if value.Valid {
				m.Table = value.String
			}
		case comment.FieldDir:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dir", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Dir); err != nil {
					return fmt.Errorf("unmarshal field dir: %w", err)
				}
			}
		case comment.FieldClient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client", values[i])
			} else if value.Valid {
				m.Client = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (m *Comment) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Comment) Unwrap() *Comment {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("unique_int=")
	builder.WriteString(fmt.Sprintf("%v", m.UniqueInt))
	builder.WriteString(", ")
	builder.WriteString("unique_float=")
	builder.WriteString(fmt.Sprintf("%v", m.UniqueFloat))
	builder.WriteString(", ")
	if v := m.NillableInt; v != nil {
		builder.WriteString("nillable_int=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("table=")
	builder.WriteString(m.Table)
	builder.WriteString(", ")
	builder.WriteString("dir=")
	builder.WriteString(fmt.Sprintf("%v", m.Dir))
	builder.WriteString(", ")
	builder.WriteString("client=")
	builder.WriteString(m.Client)
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
