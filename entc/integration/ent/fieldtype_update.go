// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net"
	"net/http"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/entc/integration/ent/fieldtype"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/role"
	"entgo.io/ent/entc/integration/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FieldTypeUpdate is the builder for updating FieldType entities.
type FieldTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *FieldTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FieldTypeUpdate builder.
func (u *FieldTypeUpdate) Where(ps ...predicate.FieldType) *FieldTypeUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetInt sets the "int" field.
func (m *FieldTypeUpdate) SetInt(v int) *FieldTypeUpdate {
	m.mutation.ResetInt()
	m.mutation.SetInt(v)
	return m
}

// AddInt adds value to the "int" field.
func (m *FieldTypeUpdate) AddInt(v int) *FieldTypeUpdate {
	m.mutation.AddInt(v)
	return m
}

// SetInt8 sets the "int8" field.
func (m *FieldTypeUpdate) SetInt8(v int8) *FieldTypeUpdate {
	m.mutation.ResetInt8()
	m.mutation.SetInt8(v)
	return m
}

// AddInt8 adds value to the "int8" field.
func (m *FieldTypeUpdate) AddInt8(v int8) *FieldTypeUpdate {
	m.mutation.AddInt8(v)
	return m
}

// SetInt16 sets the "int16" field.
func (m *FieldTypeUpdate) SetInt16(v int16) *FieldTypeUpdate {
	m.mutation.ResetInt16()
	m.mutation.SetInt16(v)
	return m
}

// AddInt16 adds value to the "int16" field.
func (m *FieldTypeUpdate) AddInt16(v int16) *FieldTypeUpdate {
	m.mutation.AddInt16(v)
	return m
}

// SetInt32 sets the "int32" field.
func (m *FieldTypeUpdate) SetInt32(v int32) *FieldTypeUpdate {
	m.mutation.ResetInt32()
	m.mutation.SetInt32(v)
	return m
}

// AddInt32 adds value to the "int32" field.
func (m *FieldTypeUpdate) AddInt32(v int32) *FieldTypeUpdate {
	m.mutation.AddInt32(v)
	return m
}

// SetInt64 sets the "int64" field.
func (m *FieldTypeUpdate) SetInt64(v int64) *FieldTypeUpdate {
	m.mutation.ResetInt64()
	m.mutation.SetInt64(v)
	return m
}

// AddInt64 adds value to the "int64" field.
func (m *FieldTypeUpdate) AddInt64(v int64) *FieldTypeUpdate {
	m.mutation.AddInt64(v)
	return m
}

// SetOptionalInt sets the "optional_int" field.
func (m *FieldTypeUpdate) SetOptionalInt(v int) *FieldTypeUpdate {
	m.mutation.ResetOptionalInt()
	m.mutation.SetOptionalInt(v)
	return m
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalInt(v *int) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalInt(*v)
	}
	return m
}

// AddOptionalInt adds value to the "optional_int" field.
func (m *FieldTypeUpdate) AddOptionalInt(v int) *FieldTypeUpdate {
	m.mutation.AddOptionalInt(v)
	return m
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (m *FieldTypeUpdate) ClearOptionalInt() *FieldTypeUpdate {
	m.mutation.ClearOptionalInt()
	return m
}

// SetOptionalInt8 sets the "optional_int8" field.
func (m *FieldTypeUpdate) SetOptionalInt8(v int8) *FieldTypeUpdate {
	m.mutation.ResetOptionalInt8()
	m.mutation.SetOptionalInt8(v)
	return m
}

// SetNillableOptionalInt8 sets the "optional_int8" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalInt8(v *int8) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalInt8(*v)
	}
	return m
}

// AddOptionalInt8 adds value to the "optional_int8" field.
func (m *FieldTypeUpdate) AddOptionalInt8(v int8) *FieldTypeUpdate {
	m.mutation.AddOptionalInt8(v)
	return m
}

// ClearOptionalInt8 clears the value of the "optional_int8" field.
func (m *FieldTypeUpdate) ClearOptionalInt8() *FieldTypeUpdate {
	m.mutation.ClearOptionalInt8()
	return m
}

// SetOptionalInt16 sets the "optional_int16" field.
func (m *FieldTypeUpdate) SetOptionalInt16(v int16) *FieldTypeUpdate {
	m.mutation.ResetOptionalInt16()
	m.mutation.SetOptionalInt16(v)
	return m
}

// SetNillableOptionalInt16 sets the "optional_int16" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalInt16(v *int16) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalInt16(*v)
	}
	return m
}

// AddOptionalInt16 adds value to the "optional_int16" field.
func (m *FieldTypeUpdate) AddOptionalInt16(v int16) *FieldTypeUpdate {
	m.mutation.AddOptionalInt16(v)
	return m
}

// ClearOptionalInt16 clears the value of the "optional_int16" field.
func (m *FieldTypeUpdate) ClearOptionalInt16() *FieldTypeUpdate {
	m.mutation.ClearOptionalInt16()
	return m
}

// SetOptionalInt32 sets the "optional_int32" field.
func (m *FieldTypeUpdate) SetOptionalInt32(v int32) *FieldTypeUpdate {
	m.mutation.ResetOptionalInt32()
	m.mutation.SetOptionalInt32(v)
	return m
}

// SetNillableOptionalInt32 sets the "optional_int32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalInt32(*v)
	}
	return m
}

// AddOptionalInt32 adds value to the "optional_int32" field.
func (m *FieldTypeUpdate) AddOptionalInt32(v int32) *FieldTypeUpdate {
	m.mutation.AddOptionalInt32(v)
	return m
}

// ClearOptionalInt32 clears the value of the "optional_int32" field.
func (m *FieldTypeUpdate) ClearOptionalInt32() *FieldTypeUpdate {
	m.mutation.ClearOptionalInt32()
	return m
}

// SetOptionalInt64 sets the "optional_int64" field.
func (m *FieldTypeUpdate) SetOptionalInt64(v int64) *FieldTypeUpdate {
	m.mutation.ResetOptionalInt64()
	m.mutation.SetOptionalInt64(v)
	return m
}

// SetNillableOptionalInt64 sets the "optional_int64" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalInt64(v *int64) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalInt64(*v)
	}
	return m
}

// AddOptionalInt64 adds value to the "optional_int64" field.
func (m *FieldTypeUpdate) AddOptionalInt64(v int64) *FieldTypeUpdate {
	m.mutation.AddOptionalInt64(v)
	return m
}

// ClearOptionalInt64 clears the value of the "optional_int64" field.
func (m *FieldTypeUpdate) ClearOptionalInt64() *FieldTypeUpdate {
	m.mutation.ClearOptionalInt64()
	return m
}

// SetNillableInt sets the "nillable_int" field.
func (m *FieldTypeUpdate) SetNillableInt(v int) *FieldTypeUpdate {
	m.mutation.ResetNillableInt()
	m.mutation.SetNillableInt(v)
	return m
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableInt(v *int) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableInt(*v)
	}
	return m
}

// AddNillableInt adds value to the "nillable_int" field.
func (m *FieldTypeUpdate) AddNillableInt(v int) *FieldTypeUpdate {
	m.mutation.AddNillableInt(v)
	return m
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (m *FieldTypeUpdate) ClearNillableInt() *FieldTypeUpdate {
	m.mutation.ClearNillableInt()
	return m
}

// SetNillableInt8 sets the "nillable_int8" field.
func (m *FieldTypeUpdate) SetNillableInt8(v int8) *FieldTypeUpdate {
	m.mutation.ResetNillableInt8()
	m.mutation.SetNillableInt8(v)
	return m
}

// SetNillableNillableInt8 sets the "nillable_int8" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableInt8(v *int8) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableInt8(*v)
	}
	return m
}

// AddNillableInt8 adds value to the "nillable_int8" field.
func (m *FieldTypeUpdate) AddNillableInt8(v int8) *FieldTypeUpdate {
	m.mutation.AddNillableInt8(v)
	return m
}

// ClearNillableInt8 clears the value of the "nillable_int8" field.
func (m *FieldTypeUpdate) ClearNillableInt8() *FieldTypeUpdate {
	m.mutation.ClearNillableInt8()
	return m
}

// SetNillableInt16 sets the "nillable_int16" field.
func (m *FieldTypeUpdate) SetNillableInt16(v int16) *FieldTypeUpdate {
	m.mutation.ResetNillableInt16()
	m.mutation.SetNillableInt16(v)
	return m
}

// SetNillableNillableInt16 sets the "nillable_int16" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableInt16(v *int16) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableInt16(*v)
	}
	return m
}

// AddNillableInt16 adds value to the "nillable_int16" field.
func (m *FieldTypeUpdate) AddNillableInt16(v int16) *FieldTypeUpdate {
	m.mutation.AddNillableInt16(v)
	return m
}

// ClearNillableInt16 clears the value of the "nillable_int16" field.
func (m *FieldTypeUpdate) ClearNillableInt16() *FieldTypeUpdate {
	m.mutation.ClearNillableInt16()
	return m
}

// SetNillableInt32 sets the "nillable_int32" field.
func (m *FieldTypeUpdate) SetNillableInt32(v int32) *FieldTypeUpdate {
	m.mutation.ResetNillableInt32()
	m.mutation.SetNillableInt32(v)
	return m
}

// SetNillableNillableInt32 sets the "nillable_int32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableInt32(*v)
	}
	return m
}

// AddNillableInt32 adds value to the "nillable_int32" field.
func (m *FieldTypeUpdate) AddNillableInt32(v int32) *FieldTypeUpdate {
	m.mutation.AddNillableInt32(v)
	return m
}

// ClearNillableInt32 clears the value of the "nillable_int32" field.
func (m *FieldTypeUpdate) ClearNillableInt32() *FieldTypeUpdate {
	m.mutation.ClearNillableInt32()
	return m
}

// SetNillableInt64 sets the "nillable_int64" field.
func (m *FieldTypeUpdate) SetNillableInt64(v int64) *FieldTypeUpdate {
	m.mutation.ResetNillableInt64()
	m.mutation.SetNillableInt64(v)
	return m
}

// SetNillableNillableInt64 sets the "nillable_int64" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableInt64(v *int64) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableInt64(*v)
	}
	return m
}

// AddNillableInt64 adds value to the "nillable_int64" field.
func (m *FieldTypeUpdate) AddNillableInt64(v int64) *FieldTypeUpdate {
	m.mutation.AddNillableInt64(v)
	return m
}

// ClearNillableInt64 clears the value of the "nillable_int64" field.
func (m *FieldTypeUpdate) ClearNillableInt64() *FieldTypeUpdate {
	m.mutation.ClearNillableInt64()
	return m
}

// SetValidateOptionalInt32 sets the "validate_optional_int32" field.
func (m *FieldTypeUpdate) SetValidateOptionalInt32(v int32) *FieldTypeUpdate {
	m.mutation.ResetValidateOptionalInt32()
	m.mutation.SetValidateOptionalInt32(v)
	return m
}

// SetNillableValidateOptionalInt32 sets the "validate_optional_int32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableValidateOptionalInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		m.SetValidateOptionalInt32(*v)
	}
	return m
}

// AddValidateOptionalInt32 adds value to the "validate_optional_int32" field.
func (m *FieldTypeUpdate) AddValidateOptionalInt32(v int32) *FieldTypeUpdate {
	m.mutation.AddValidateOptionalInt32(v)
	return m
}

// ClearValidateOptionalInt32 clears the value of the "validate_optional_int32" field.
func (m *FieldTypeUpdate) ClearValidateOptionalInt32() *FieldTypeUpdate {
	m.mutation.ClearValidateOptionalInt32()
	return m
}

// SetOptionalUint sets the "optional_uint" field.
func (m *FieldTypeUpdate) SetOptionalUint(v uint) *FieldTypeUpdate {
	m.mutation.ResetOptionalUint()
	m.mutation.SetOptionalUint(v)
	return m
}

// SetNillableOptionalUint sets the "optional_uint" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUint(v *uint) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUint(*v)
	}
	return m
}

// AddOptionalUint adds value to the "optional_uint" field.
func (m *FieldTypeUpdate) AddOptionalUint(v int) *FieldTypeUpdate {
	m.mutation.AddOptionalUint(v)
	return m
}

// ClearOptionalUint clears the value of the "optional_uint" field.
func (m *FieldTypeUpdate) ClearOptionalUint() *FieldTypeUpdate {
	m.mutation.ClearOptionalUint()
	return m
}

// SetOptionalUint8 sets the "optional_uint8" field.
func (m *FieldTypeUpdate) SetOptionalUint8(v uint8) *FieldTypeUpdate {
	m.mutation.ResetOptionalUint8()
	m.mutation.SetOptionalUint8(v)
	return m
}

// SetNillableOptionalUint8 sets the "optional_uint8" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUint8(v *uint8) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUint8(*v)
	}
	return m
}

// AddOptionalUint8 adds value to the "optional_uint8" field.
func (m *FieldTypeUpdate) AddOptionalUint8(v int8) *FieldTypeUpdate {
	m.mutation.AddOptionalUint8(v)
	return m
}

// ClearOptionalUint8 clears the value of the "optional_uint8" field.
func (m *FieldTypeUpdate) ClearOptionalUint8() *FieldTypeUpdate {
	m.mutation.ClearOptionalUint8()
	return m
}

// SetOptionalUint16 sets the "optional_uint16" field.
func (m *FieldTypeUpdate) SetOptionalUint16(v uint16) *FieldTypeUpdate {
	m.mutation.ResetOptionalUint16()
	m.mutation.SetOptionalUint16(v)
	return m
}

// SetNillableOptionalUint16 sets the "optional_uint16" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUint16(v *uint16) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUint16(*v)
	}
	return m
}

// AddOptionalUint16 adds value to the "optional_uint16" field.
func (m *FieldTypeUpdate) AddOptionalUint16(v int16) *FieldTypeUpdate {
	m.mutation.AddOptionalUint16(v)
	return m
}

// ClearOptionalUint16 clears the value of the "optional_uint16" field.
func (m *FieldTypeUpdate) ClearOptionalUint16() *FieldTypeUpdate {
	m.mutation.ClearOptionalUint16()
	return m
}

// SetOptionalUint32 sets the "optional_uint32" field.
func (m *FieldTypeUpdate) SetOptionalUint32(v uint32) *FieldTypeUpdate {
	m.mutation.ResetOptionalUint32()
	m.mutation.SetOptionalUint32(v)
	return m
}

// SetNillableOptionalUint32 sets the "optional_uint32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUint32(v *uint32) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUint32(*v)
	}
	return m
}

// AddOptionalUint32 adds value to the "optional_uint32" field.
func (m *FieldTypeUpdate) AddOptionalUint32(v int32) *FieldTypeUpdate {
	m.mutation.AddOptionalUint32(v)
	return m
}

// ClearOptionalUint32 clears the value of the "optional_uint32" field.
func (m *FieldTypeUpdate) ClearOptionalUint32() *FieldTypeUpdate {
	m.mutation.ClearOptionalUint32()
	return m
}

// SetOptionalUint64 sets the "optional_uint64" field.
func (m *FieldTypeUpdate) SetOptionalUint64(v uint64) *FieldTypeUpdate {
	m.mutation.ResetOptionalUint64()
	m.mutation.SetOptionalUint64(v)
	return m
}

// SetNillableOptionalUint64 sets the "optional_uint64" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUint64(v *uint64) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUint64(*v)
	}
	return m
}

// AddOptionalUint64 adds value to the "optional_uint64" field.
func (m *FieldTypeUpdate) AddOptionalUint64(v int64) *FieldTypeUpdate {
	m.mutation.AddOptionalUint64(v)
	return m
}

// ClearOptionalUint64 clears the value of the "optional_uint64" field.
func (m *FieldTypeUpdate) ClearOptionalUint64() *FieldTypeUpdate {
	m.mutation.ClearOptionalUint64()
	return m
}

// SetState sets the "state" field.
func (m *FieldTypeUpdate) SetState(v fieldtype.State) *FieldTypeUpdate {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableState(v *fieldtype.State) *FieldTypeUpdate {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *FieldTypeUpdate) ClearState() *FieldTypeUpdate {
	m.mutation.ClearState()
	return m
}

// SetOptionalFloat sets the "optional_float" field.
func (m *FieldTypeUpdate) SetOptionalFloat(v float64) *FieldTypeUpdate {
	m.mutation.ResetOptionalFloat()
	m.mutation.SetOptionalFloat(v)
	return m
}

// SetNillableOptionalFloat sets the "optional_float" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalFloat(v *float64) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalFloat(*v)
	}
	return m
}

// AddOptionalFloat adds value to the "optional_float" field.
func (m *FieldTypeUpdate) AddOptionalFloat(v float64) *FieldTypeUpdate {
	m.mutation.AddOptionalFloat(v)
	return m
}

// ClearOptionalFloat clears the value of the "optional_float" field.
func (m *FieldTypeUpdate) ClearOptionalFloat() *FieldTypeUpdate {
	m.mutation.ClearOptionalFloat()
	return m
}

// SetOptionalFloat32 sets the "optional_float32" field.
func (m *FieldTypeUpdate) SetOptionalFloat32(v float32) *FieldTypeUpdate {
	m.mutation.ResetOptionalFloat32()
	m.mutation.SetOptionalFloat32(v)
	return m
}

// SetNillableOptionalFloat32 sets the "optional_float32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalFloat32(v *float32) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalFloat32(*v)
	}
	return m
}

// AddOptionalFloat32 adds value to the "optional_float32" field.
func (m *FieldTypeUpdate) AddOptionalFloat32(v float32) *FieldTypeUpdate {
	m.mutation.AddOptionalFloat32(v)
	return m
}

// ClearOptionalFloat32 clears the value of the "optional_float32" field.
func (m *FieldTypeUpdate) ClearOptionalFloat32() *FieldTypeUpdate {
	m.mutation.ClearOptionalFloat32()
	return m
}

// SetText sets the "text" field.
func (m *FieldTypeUpdate) SetText(v string) *FieldTypeUpdate {
	m.mutation.SetText(v)
	return m
}

// SetNillableText sets the "text" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableText(v *string) *FieldTypeUpdate {
	if v != nil {
		m.SetText(*v)
	}
	return m
}

// ClearText clears the value of the "text" field.
func (m *FieldTypeUpdate) ClearText() *FieldTypeUpdate {
	m.mutation.ClearText()
	return m
}

// SetDatetime sets the "datetime" field.
func (m *FieldTypeUpdate) SetDatetime(v time.Time) *FieldTypeUpdate {
	m.mutation.SetDatetime(v)
	return m
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableDatetime(v *time.Time) *FieldTypeUpdate {
	if v != nil {
		m.SetDatetime(*v)
	}
	return m
}

// ClearDatetime clears the value of the "datetime" field.
func (m *FieldTypeUpdate) ClearDatetime() *FieldTypeUpdate {
	m.mutation.ClearDatetime()
	return m
}

// SetDecimal sets the "decimal" field.
func (m *FieldTypeUpdate) SetDecimal(v float64) *FieldTypeUpdate {
	m.mutation.ResetDecimal()
	m.mutation.SetDecimal(v)
	return m
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableDecimal(v *float64) *FieldTypeUpdate {
	if v != nil {
		m.SetDecimal(*v)
	}
	return m
}

// AddDecimal adds value to the "decimal" field.
func (m *FieldTypeUpdate) AddDecimal(v float64) *FieldTypeUpdate {
	m.mutation.AddDecimal(v)
	return m
}

// ClearDecimal clears the value of the "decimal" field.
func (m *FieldTypeUpdate) ClearDecimal() *FieldTypeUpdate {
	m.mutation.ClearDecimal()
	return m
}

// SetLinkOther sets the "link_other" field.
func (m *FieldTypeUpdate) SetLinkOther(v *schema.Link) *FieldTypeUpdate {
	m.mutation.SetLinkOther(v)
	return m
}

// ClearLinkOther clears the value of the "link_other" field.
func (m *FieldTypeUpdate) ClearLinkOther() *FieldTypeUpdate {
	m.mutation.ClearLinkOther()
	return m
}

// SetLinkOtherFunc sets the "link_other_func" field.
func (m *FieldTypeUpdate) SetLinkOtherFunc(v *schema.Link) *FieldTypeUpdate {
	m.mutation.SetLinkOtherFunc(v)
	return m
}

// ClearLinkOtherFunc clears the value of the "link_other_func" field.
func (m *FieldTypeUpdate) ClearLinkOtherFunc() *FieldTypeUpdate {
	m.mutation.ClearLinkOtherFunc()
	return m
}

// SetMAC sets the "mac" field.
func (m *FieldTypeUpdate) SetMAC(v schema.MAC) *FieldTypeUpdate {
	m.mutation.SetMAC(v)
	return m
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableMAC(v *schema.MAC) *FieldTypeUpdate {
	if v != nil {
		m.SetMAC(*v)
	}
	return m
}

// ClearMAC clears the value of the "mac" field.
func (m *FieldTypeUpdate) ClearMAC() *FieldTypeUpdate {
	m.mutation.ClearMAC()
	return m
}

// SetStringArray sets the "string_array" field.
func (m *FieldTypeUpdate) SetStringArray(v schema.Strings) *FieldTypeUpdate {
	m.mutation.SetStringArray(v)
	return m
}

// ClearStringArray clears the value of the "string_array" field.
func (m *FieldTypeUpdate) ClearStringArray() *FieldTypeUpdate {
	m.mutation.ClearStringArray()
	return m
}

// SetPassword sets the "password" field.
func (m *FieldTypeUpdate) SetPassword(v string) *FieldTypeUpdate {
	m.mutation.SetPassword(v)
	return m
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillablePassword(v *string) *FieldTypeUpdate {
	if v != nil {
		m.SetPassword(*v)
	}
	return m
}

// ClearPassword clears the value of the "password" field.
func (m *FieldTypeUpdate) ClearPassword() *FieldTypeUpdate {
	m.mutation.ClearPassword()
	return m
}

// SetStringScanner sets the "string_scanner" field.
func (m *FieldTypeUpdate) SetStringScanner(v schema.StringScanner) *FieldTypeUpdate {
	m.mutation.SetStringScanner(v)
	return m
}

// SetNillableStringScanner sets the "string_scanner" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableStringScanner(v *schema.StringScanner) *FieldTypeUpdate {
	if v != nil {
		m.SetStringScanner(*v)
	}
	return m
}

// ClearStringScanner clears the value of the "string_scanner" field.
func (m *FieldTypeUpdate) ClearStringScanner() *FieldTypeUpdate {
	m.mutation.ClearStringScanner()
	return m
}

// SetDuration sets the "duration" field.
func (m *FieldTypeUpdate) SetDuration(v time.Duration) *FieldTypeUpdate {
	m.mutation.ResetDuration()
	m.mutation.SetDuration(v)
	return m
}

// AddDuration adds value to the "duration" field.
func (m *FieldTypeUpdate) AddDuration(v time.Duration) *FieldTypeUpdate {
	m.mutation.AddDuration(v)
	return m
}

// ClearDuration clears the value of the "duration" field.
func (m *FieldTypeUpdate) ClearDuration() *FieldTypeUpdate {
	m.mutation.ClearDuration()
	return m
}

// SetDir sets the "dir" field.
func (m *FieldTypeUpdate) SetDir(v http.Dir) *FieldTypeUpdate {
	m.mutation.SetDir(v)
	return m
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableDir(v *http.Dir) *FieldTypeUpdate {
	if v != nil {
		m.SetDir(*v)
	}
	return m
}

// SetNdir sets the "ndir" field.
func (m *FieldTypeUpdate) SetNdir(v http.Dir) *FieldTypeUpdate {
	m.mutation.SetNdir(v)
	return m
}

// SetNillableNdir sets the "ndir" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNdir(v *http.Dir) *FieldTypeUpdate {
	if v != nil {
		m.SetNdir(*v)
	}
	return m
}

// ClearNdir clears the value of the "ndir" field.
func (m *FieldTypeUpdate) ClearNdir() *FieldTypeUpdate {
	m.mutation.ClearNdir()
	return m
}

// SetStr sets the "str" field.
func (m *FieldTypeUpdate) SetStr(v sql.NullString) *FieldTypeUpdate {
	m.mutation.SetStr(v)
	return m
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableStr(v *sql.NullString) *FieldTypeUpdate {
	if v != nil {
		m.SetStr(*v)
	}
	return m
}

// ClearStr clears the value of the "str" field.
func (m *FieldTypeUpdate) ClearStr() *FieldTypeUpdate {
	m.mutation.ClearStr()
	return m
}

// SetNullStr sets the "null_str" field.
func (m *FieldTypeUpdate) SetNullStr(v *sql.NullString) *FieldTypeUpdate {
	m.mutation.SetNullStr(v)
	return m
}

// ClearNullStr clears the value of the "null_str" field.
func (m *FieldTypeUpdate) ClearNullStr() *FieldTypeUpdate {
	m.mutation.ClearNullStr()
	return m
}

// SetLink sets the "link" field.
func (m *FieldTypeUpdate) SetLink(v schema.Link) *FieldTypeUpdate {
	m.mutation.SetLink(v)
	return m
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableLink(v *schema.Link) *FieldTypeUpdate {
	if v != nil {
		m.SetLink(*v)
	}
	return m
}

// ClearLink clears the value of the "link" field.
func (m *FieldTypeUpdate) ClearLink() *FieldTypeUpdate {
	m.mutation.ClearLink()
	return m
}

// SetNullLink sets the "null_link" field.
func (m *FieldTypeUpdate) SetNullLink(v *schema.Link) *FieldTypeUpdate {
	m.mutation.SetNullLink(v)
	return m
}

// ClearNullLink clears the value of the "null_link" field.
func (m *FieldTypeUpdate) ClearNullLink() *FieldTypeUpdate {
	m.mutation.ClearNullLink()
	return m
}

// SetActive sets the "active" field.
func (m *FieldTypeUpdate) SetActive(v schema.Status) *FieldTypeUpdate {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableActive(v *schema.Status) *FieldTypeUpdate {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// ClearActive clears the value of the "active" field.
func (m *FieldTypeUpdate) ClearActive() *FieldTypeUpdate {
	m.mutation.ClearActive()
	return m
}

// SetNullActive sets the "null_active" field.
func (m *FieldTypeUpdate) SetNullActive(v schema.Status) *FieldTypeUpdate {
	m.mutation.SetNullActive(v)
	return m
}

// SetNillableNullActive sets the "null_active" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNullActive(v *schema.Status) *FieldTypeUpdate {
	if v != nil {
		m.SetNullActive(*v)
	}
	return m
}

// ClearNullActive clears the value of the "null_active" field.
func (m *FieldTypeUpdate) ClearNullActive() *FieldTypeUpdate {
	m.mutation.ClearNullActive()
	return m
}

// SetDeleted sets the "deleted" field.
func (m *FieldTypeUpdate) SetDeleted(v *sql.NullBool) *FieldTypeUpdate {
	m.mutation.SetDeleted(v)
	return m
}

// ClearDeleted clears the value of the "deleted" field.
func (m *FieldTypeUpdate) ClearDeleted() *FieldTypeUpdate {
	m.mutation.ClearDeleted()
	return m
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FieldTypeUpdate) SetDeletedAt(v *sql.NullTime) *FieldTypeUpdate {
	m.mutation.SetDeletedAt(v)
	return m
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FieldTypeUpdate) ClearDeletedAt() *FieldTypeUpdate {
	m.mutation.ClearDeletedAt()
	return m
}

// SetRawData sets the "raw_data" field.
func (m *FieldTypeUpdate) SetRawData(v []byte) *FieldTypeUpdate {
	m.mutation.SetRawData(v)
	return m
}

// ClearRawData clears the value of the "raw_data" field.
func (m *FieldTypeUpdate) ClearRawData() *FieldTypeUpdate {
	m.mutation.ClearRawData()
	return m
}

// SetSensitive sets the "sensitive" field.
func (m *FieldTypeUpdate) SetSensitive(v []byte) *FieldTypeUpdate {
	m.mutation.SetSensitive(v)
	return m
}

// ClearSensitive clears the value of the "sensitive" field.
func (m *FieldTypeUpdate) ClearSensitive() *FieldTypeUpdate {
	m.mutation.ClearSensitive()
	return m
}

// SetIP sets the "ip" field.
func (m *FieldTypeUpdate) SetIP(v net.IP) *FieldTypeUpdate {
	m.mutation.SetIP(v)
	return m
}

// ClearIP clears the value of the "ip" field.
func (m *FieldTypeUpdate) ClearIP() *FieldTypeUpdate {
	m.mutation.ClearIP()
	return m
}

// SetNullInt64 sets the "null_int64" field.
func (m *FieldTypeUpdate) SetNullInt64(v *sql.NullInt64) *FieldTypeUpdate {
	m.mutation.SetNullInt64(v)
	return m
}

// ClearNullInt64 clears the value of the "null_int64" field.
func (m *FieldTypeUpdate) ClearNullInt64() *FieldTypeUpdate {
	m.mutation.ClearNullInt64()
	return m
}

// SetSchemaInt sets the "schema_int" field.
func (m *FieldTypeUpdate) SetSchemaInt(v schema.Int) *FieldTypeUpdate {
	m.mutation.ResetSchemaInt()
	m.mutation.SetSchemaInt(v)
	return m
}

// SetNillableSchemaInt sets the "schema_int" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableSchemaInt(v *schema.Int) *FieldTypeUpdate {
	if v != nil {
		m.SetSchemaInt(*v)
	}
	return m
}

// AddSchemaInt adds value to the "schema_int" field.
func (m *FieldTypeUpdate) AddSchemaInt(v schema.Int) *FieldTypeUpdate {
	m.mutation.AddSchemaInt(v)
	return m
}

// ClearSchemaInt clears the value of the "schema_int" field.
func (m *FieldTypeUpdate) ClearSchemaInt() *FieldTypeUpdate {
	m.mutation.ClearSchemaInt()
	return m
}

// SetSchemaInt8 sets the "schema_int8" field.
func (m *FieldTypeUpdate) SetSchemaInt8(v schema.Int8) *FieldTypeUpdate {
	m.mutation.ResetSchemaInt8()
	m.mutation.SetSchemaInt8(v)
	return m
}

// SetNillableSchemaInt8 sets the "schema_int8" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableSchemaInt8(v *schema.Int8) *FieldTypeUpdate {
	if v != nil {
		m.SetSchemaInt8(*v)
	}
	return m
}

// AddSchemaInt8 adds value to the "schema_int8" field.
func (m *FieldTypeUpdate) AddSchemaInt8(v schema.Int8) *FieldTypeUpdate {
	m.mutation.AddSchemaInt8(v)
	return m
}

// ClearSchemaInt8 clears the value of the "schema_int8" field.
func (m *FieldTypeUpdate) ClearSchemaInt8() *FieldTypeUpdate {
	m.mutation.ClearSchemaInt8()
	return m
}

// SetSchemaInt64 sets the "schema_int64" field.
func (m *FieldTypeUpdate) SetSchemaInt64(v schema.Int64) *FieldTypeUpdate {
	m.mutation.ResetSchemaInt64()
	m.mutation.SetSchemaInt64(v)
	return m
}

// SetNillableSchemaInt64 sets the "schema_int64" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableSchemaInt64(v *schema.Int64) *FieldTypeUpdate {
	if v != nil {
		m.SetSchemaInt64(*v)
	}
	return m
}

// AddSchemaInt64 adds value to the "schema_int64" field.
func (m *FieldTypeUpdate) AddSchemaInt64(v schema.Int64) *FieldTypeUpdate {
	m.mutation.AddSchemaInt64(v)
	return m
}

// ClearSchemaInt64 clears the value of the "schema_int64" field.
func (m *FieldTypeUpdate) ClearSchemaInt64() *FieldTypeUpdate {
	m.mutation.ClearSchemaInt64()
	return m
}

// SetSchemaFloat sets the "schema_float" field.
func (m *FieldTypeUpdate) SetSchemaFloat(v schema.Float64) *FieldTypeUpdate {
	m.mutation.ResetSchemaFloat()
	m.mutation.SetSchemaFloat(v)
	return m
}

// SetNillableSchemaFloat sets the "schema_float" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableSchemaFloat(v *schema.Float64) *FieldTypeUpdate {
	if v != nil {
		m.SetSchemaFloat(*v)
	}
	return m
}

// AddSchemaFloat adds value to the "schema_float" field.
func (m *FieldTypeUpdate) AddSchemaFloat(v schema.Float64) *FieldTypeUpdate {
	m.mutation.AddSchemaFloat(v)
	return m
}

// ClearSchemaFloat clears the value of the "schema_float" field.
func (m *FieldTypeUpdate) ClearSchemaFloat() *FieldTypeUpdate {
	m.mutation.ClearSchemaFloat()
	return m
}

// SetSchemaFloat32 sets the "schema_float32" field.
func (m *FieldTypeUpdate) SetSchemaFloat32(v schema.Float32) *FieldTypeUpdate {
	m.mutation.ResetSchemaFloat32()
	m.mutation.SetSchemaFloat32(v)
	return m
}

// SetNillableSchemaFloat32 sets the "schema_float32" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableSchemaFloat32(v *schema.Float32) *FieldTypeUpdate {
	if v != nil {
		m.SetSchemaFloat32(*v)
	}
	return m
}

// AddSchemaFloat32 adds value to the "schema_float32" field.
func (m *FieldTypeUpdate) AddSchemaFloat32(v schema.Float32) *FieldTypeUpdate {
	m.mutation.AddSchemaFloat32(v)
	return m
}

// ClearSchemaFloat32 clears the value of the "schema_float32" field.
func (m *FieldTypeUpdate) ClearSchemaFloat32() *FieldTypeUpdate {
	m.mutation.ClearSchemaFloat32()
	return m
}

// SetNullFloat sets the "null_float" field.
func (m *FieldTypeUpdate) SetNullFloat(v *sql.NullFloat64) *FieldTypeUpdate {
	m.mutation.SetNullFloat(v)
	return m
}

// ClearNullFloat clears the value of the "null_float" field.
func (m *FieldTypeUpdate) ClearNullFloat() *FieldTypeUpdate {
	m.mutation.ClearNullFloat()
	return m
}

// SetRole sets the "role" field.
func (m *FieldTypeUpdate) SetRole(v role.Role) *FieldTypeUpdate {
	m.mutation.SetRole(v)
	return m
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableRole(v *role.Role) *FieldTypeUpdate {
	if v != nil {
		m.SetRole(*v)
	}
	return m
}

// SetPriority sets the "priority" field.
func (m *FieldTypeUpdate) SetPriority(v role.Priority) *FieldTypeUpdate {
	m.mutation.SetPriority(v)
	return m
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillablePriority(v *role.Priority) *FieldTypeUpdate {
	if v != nil {
		m.SetPriority(*v)
	}
	return m
}

// ClearPriority clears the value of the "priority" field.
func (m *FieldTypeUpdate) ClearPriority() *FieldTypeUpdate {
	m.mutation.ClearPriority()
	return m
}

// SetOptionalUUID sets the "optional_uuid" field.
func (m *FieldTypeUpdate) SetOptionalUUID(v uuid.UUID) *FieldTypeUpdate {
	m.mutation.SetOptionalUUID(v)
	return m
}

// SetNillableOptionalUUID sets the "optional_uuid" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableOptionalUUID(v *uuid.UUID) *FieldTypeUpdate {
	if v != nil {
		m.SetOptionalUUID(*v)
	}
	return m
}

// ClearOptionalUUID clears the value of the "optional_uuid" field.
func (m *FieldTypeUpdate) ClearOptionalUUID() *FieldTypeUpdate {
	m.mutation.ClearOptionalUUID()
	return m
}

// SetNillableUUID sets the "nillable_uuid" field.
func (m *FieldTypeUpdate) SetNillableUUID(v uuid.UUID) *FieldTypeUpdate {
	m.mutation.SetNillableUUID(v)
	return m
}

// SetNillableNillableUUID sets the "nillable_uuid" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableNillableUUID(v *uuid.UUID) *FieldTypeUpdate {
	if v != nil {
		m.SetNillableUUID(*v)
	}
	return m
}

// ClearNillableUUID clears the value of the "nillable_uuid" field.
func (m *FieldTypeUpdate) ClearNillableUUID() *FieldTypeUpdate {
	m.mutation.ClearNillableUUID()
	return m
}

// SetStrings sets the "strings" field.
func (m *FieldTypeUpdate) SetStrings(v []string) *FieldTypeUpdate {
	m.mutation.SetStrings(v)
	return m
}

// AppendStrings appends value to the "strings" field.
func (m *FieldTypeUpdate) AppendStrings(v []string) *FieldTypeUpdate {
	m.mutation.AppendStrings(v)
	return m
}

// ClearStrings clears the value of the "strings" field.
func (m *FieldTypeUpdate) ClearStrings() *FieldTypeUpdate {
	m.mutation.ClearStrings()
	return m
}

// SetPair sets the "pair" field.
func (m *FieldTypeUpdate) SetPair(v schema.Pair) *FieldTypeUpdate {
	m.mutation.SetPair(v)
	return m
}

// SetNillablePair sets the "pair" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillablePair(v *schema.Pair) *FieldTypeUpdate {
	if v != nil {
		m.SetPair(*v)
	}
	return m
}

// SetNilPair sets the "nil_pair" field.
func (m *FieldTypeUpdate) SetNilPair(v *schema.Pair) *FieldTypeUpdate {
	m.mutation.SetNilPair(v)
	return m
}

// ClearNilPair clears the value of the "nil_pair" field.
func (m *FieldTypeUpdate) ClearNilPair() *FieldTypeUpdate {
	m.mutation.ClearNilPair()
	return m
}

// SetVstring sets the "vstring" field.
func (m *FieldTypeUpdate) SetVstring(v schema.VString) *FieldTypeUpdate {
	m.mutation.SetVstring(v)
	return m
}

// SetNillableVstring sets the "vstring" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableVstring(v *schema.VString) *FieldTypeUpdate {
	if v != nil {
		m.SetVstring(*v)
	}
	return m
}

// SetTriple sets the "triple" field.
func (m *FieldTypeUpdate) SetTriple(v schema.Triple) *FieldTypeUpdate {
	m.mutation.SetTriple(v)
	return m
}

// SetNillableTriple sets the "triple" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableTriple(v *schema.Triple) *FieldTypeUpdate {
	if v != nil {
		m.SetTriple(*v)
	}
	return m
}

// SetBigInt sets the "big_int" field.
func (m *FieldTypeUpdate) SetBigInt(v schema.BigInt) *FieldTypeUpdate {
	m.mutation.ResetBigInt()
	m.mutation.SetBigInt(v)
	return m
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillableBigInt(v *schema.BigInt) *FieldTypeUpdate {
	if v != nil {
		m.SetBigInt(*v)
	}
	return m
}

// AddBigInt adds value to the "big_int" field.
func (m *FieldTypeUpdate) AddBigInt(v schema.BigInt) *FieldTypeUpdate {
	m.mutation.AddBigInt(v)
	return m
}

// ClearBigInt clears the value of the "big_int" field.
func (m *FieldTypeUpdate) ClearBigInt() *FieldTypeUpdate {
	m.mutation.ClearBigInt()
	return m
}

// SetPasswordOther sets the "password_other" field.
func (m *FieldTypeUpdate) SetPasswordOther(v schema.Password) *FieldTypeUpdate {
	m.mutation.SetPasswordOther(v)
	return m
}

// SetNillablePasswordOther sets the "password_other" field if the given value is not nil.
func (m *FieldTypeUpdate) SetNillablePasswordOther(v *schema.Password) *FieldTypeUpdate {
	if v != nil {
		m.SetPasswordOther(*v)
	}
	return m
}

// ClearPasswordOther clears the value of the "password_other" field.
func (m *FieldTypeUpdate) ClearPasswordOther() *FieldTypeUpdate {
	m.mutation.ClearPasswordOther()
	return m
}

// Mutation returns the FieldTypeMutation object of the builder.
func (m *FieldTypeUpdate) Mutation() *FieldTypeMutation {
	return m.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *FieldTypeUpdate) Save(ctx context.Context) (int, error) {
	u.defaults()
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *FieldTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *FieldTypeUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FieldTypeUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (u *FieldTypeUpdate) defaults() {
	if _, ok := u.mutation.Int64(); !ok {
		v := fieldtype.UpdateDefaultInt64()
		u.mutation.SetInt64(v)
	}
	if _, ok := u.mutation.Duration(); !ok && !u.mutation.DurationCleared() {
		v := fieldtype.UpdateDefaultDuration()
		u.mutation.SetDuration(v)
	}
	if _, ok := u.mutation.DeletedAt(); !ok && !u.mutation.DeletedAtCleared() {
		v := fieldtype.UpdateDefaultDeletedAt()
		u.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *FieldTypeUpdate) check() error {
	if v, ok := u.mutation.ValidateOptionalInt32(); ok {
		if err := fieldtype.ValidateOptionalInt32Validator(v); err != nil {
			return &ValidationError{Name: "validate_optional_int32", err: fmt.Errorf(`ent: validator failed for field "FieldType.validate_optional_int32": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := fieldtype.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FieldType.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.MAC(); ok {
		if err := fieldtype.MACValidator(v.String()); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "FieldType.mac": %w`, err)}
		}
	}
	if v, ok := u.mutation.Ndir(); ok {
		if err := fieldtype.NdirValidator(string(v)); err != nil {
			return &ValidationError{Name: "ndir", err: fmt.Errorf(`ent: validator failed for field "FieldType.ndir": %w`, err)}
		}
	}
	if v, ok := u.mutation.Link(); ok {
		if err := fieldtype.LinkValidator(v.String()); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "FieldType.link": %w`, err)}
		}
	}
	if v, ok := u.mutation.RawData(); ok {
		if err := fieldtype.RawDataValidator(v); err != nil {
			return &ValidationError{Name: "raw_data", err: fmt.Errorf(`ent: validator failed for field "FieldType.raw_data": %w`, err)}
		}
	}
	if v, ok := u.mutation.IP(); ok {
		if err := fieldtype.IPValidator([]byte(v)); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "FieldType.ip": %w`, err)}
		}
	}
	if v, ok := u.mutation.Role(); ok {
		if err := fieldtype.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "FieldType.role": %w`, err)}
		}
	}
	if v, ok := u.mutation.Priority(); ok {
		if err := fieldtype.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "FieldType.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *FieldTypeUpdate) Modify(modifiers ...func(*sql.UpdateBuilder)) *FieldTypeUpdate {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *FieldTypeUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fieldtype.Table, fieldtype.Columns, sqlgraph.NewFieldSpec(fieldtype.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Int(); ok {
		_spec.SetField(fieldtype.FieldInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedInt(); ok {
		_spec.AddField(fieldtype.FieldInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.Int8(); ok {
		_spec.SetField(fieldtype.FieldInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedInt8(); ok {
		_spec.AddField(fieldtype.FieldInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.Int16(); ok {
		_spec.SetField(fieldtype.FieldInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedInt16(); ok {
		_spec.AddField(fieldtype.FieldInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.Int32(); ok {
		_spec.SetField(fieldtype.FieldInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedInt32(); ok {
		_spec.AddField(fieldtype.FieldInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.Int64(); ok {
		_spec.SetField(fieldtype.FieldInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedInt64(); ok {
		_spec.AddField(fieldtype.FieldInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.OptionalInt(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOptionalInt(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt, field.TypeInt, value)
	}
	if u.mutation.OptionalIntCleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt, field.TypeInt)
	}
	if value, ok := u.mutation.OptionalInt8(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedOptionalInt8(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt8, field.TypeInt8, value)
	}
	if u.mutation.OptionalInt8Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.OptionalInt16(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedOptionalInt16(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt16, field.TypeInt16, value)
	}
	if u.mutation.OptionalInt16Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt16, field.TypeInt16)
	}
	if value, ok := u.mutation.OptionalInt32(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedOptionalInt32(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt32, field.TypeInt32, value)
	}
	if u.mutation.OptionalInt32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.OptionalInt64(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedOptionalInt64(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt64, field.TypeInt64, value)
	}
	if u.mutation.OptionalInt64Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.NillableInt(); ok {
		_spec.SetField(fieldtype.FieldNillableInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedNillableInt(); ok {
		_spec.AddField(fieldtype.FieldNillableInt, field.TypeInt, value)
	}
	if u.mutation.NillableIntCleared() {
		_spec.ClearField(fieldtype.FieldNillableInt, field.TypeInt)
	}
	if value, ok := u.mutation.NillableInt8(); ok {
		_spec.SetField(fieldtype.FieldNillableInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedNillableInt8(); ok {
		_spec.AddField(fieldtype.FieldNillableInt8, field.TypeInt8, value)
	}
	if u.mutation.NillableInt8Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.NillableInt16(); ok {
		_spec.SetField(fieldtype.FieldNillableInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedNillableInt16(); ok {
		_spec.AddField(fieldtype.FieldNillableInt16, field.TypeInt16, value)
	}
	if u.mutation.NillableInt16Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt16, field.TypeInt16)
	}
	if value, ok := u.mutation.NillableInt32(); ok {
		_spec.SetField(fieldtype.FieldNillableInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedNillableInt32(); ok {
		_spec.AddField(fieldtype.FieldNillableInt32, field.TypeInt32, value)
	}
	if u.mutation.NillableInt32Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.NillableInt64(); ok {
		_spec.SetField(fieldtype.FieldNillableInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedNillableInt64(); ok {
		_spec.AddField(fieldtype.FieldNillableInt64, field.TypeInt64, value)
	}
	if u.mutation.NillableInt64Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.ValidateOptionalInt32(); ok {
		_spec.SetField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedValidateOptionalInt32(); ok {
		_spec.AddField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32, value)
	}
	if u.mutation.ValidateOptionalInt32Cleared() {
		_spec.ClearField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.OptionalUint(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint, field.TypeUint, value)
	}
	if value, ok := u.mutation.AddedOptionalUint(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint, field.TypeUint, value)
	}
	if u.mutation.OptionalUintCleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint, field.TypeUint)
	}
	if value, ok := u.mutation.OptionalUint8(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint8, field.TypeUint8, value)
	}
	if value, ok := u.mutation.AddedOptionalUint8(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint8, field.TypeUint8, value)
	}
	if u.mutation.OptionalUint8Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint8, field.TypeUint8)
	}
	if value, ok := u.mutation.OptionalUint16(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint16, field.TypeUint16, value)
	}
	if value, ok := u.mutation.AddedOptionalUint16(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint16, field.TypeUint16, value)
	}
	if u.mutation.OptionalUint16Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint16, field.TypeUint16)
	}
	if value, ok := u.mutation.OptionalUint32(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint32, field.TypeUint32, value)
	}
	if value, ok := u.mutation.AddedOptionalUint32(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint32, field.TypeUint32, value)
	}
	if u.mutation.OptionalUint32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint32, field.TypeUint32)
	}
	if value, ok := u.mutation.OptionalUint64(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint64, field.TypeUint64, value)
	}
	if value, ok := u.mutation.AddedOptionalUint64(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint64, field.TypeUint64, value)
	}
	if u.mutation.OptionalUint64Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint64, field.TypeUint64)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(fieldtype.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(fieldtype.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.OptionalFloat(); ok {
		_spec.SetField(fieldtype.FieldOptionalFloat, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedOptionalFloat(); ok {
		_spec.AddField(fieldtype.FieldOptionalFloat, field.TypeFloat64, value)
	}
	if u.mutation.OptionalFloatCleared() {
		_spec.ClearField(fieldtype.FieldOptionalFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.OptionalFloat32(); ok {
		_spec.SetField(fieldtype.FieldOptionalFloat32, field.TypeFloat32, value)
	}
	if value, ok := u.mutation.AddedOptionalFloat32(); ok {
		_spec.AddField(fieldtype.FieldOptionalFloat32, field.TypeFloat32, value)
	}
	if u.mutation.OptionalFloat32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalFloat32, field.TypeFloat32)
	}
	if value, ok := u.mutation.Text(); ok {
		_spec.SetField(fieldtype.FieldText, field.TypeString, value)
	}
	if u.mutation.TextCleared() {
		_spec.ClearField(fieldtype.FieldText, field.TypeString)
	}
	if value, ok := u.mutation.Datetime(); ok {
		_spec.SetField(fieldtype.FieldDatetime, field.TypeTime, value)
	}
	if u.mutation.DatetimeCleared() {
		_spec.ClearField(fieldtype.FieldDatetime, field.TypeTime)
	}
	if value, ok := u.mutation.Decimal(); ok {
		_spec.SetField(fieldtype.FieldDecimal, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedDecimal(); ok {
		_spec.AddField(fieldtype.FieldDecimal, field.TypeFloat64, value)
	}
	if u.mutation.DecimalCleared() {
		_spec.ClearField(fieldtype.FieldDecimal, field.TypeFloat64)
	}
	if value, ok := u.mutation.LinkOther(); ok {
		_spec.SetField(fieldtype.FieldLinkOther, field.TypeOther, value)
	}
	if u.mutation.LinkOtherCleared() {
		_spec.ClearField(fieldtype.FieldLinkOther, field.TypeOther)
	}
	if value, ok := u.mutation.LinkOtherFunc(); ok {
		_spec.SetField(fieldtype.FieldLinkOtherFunc, field.TypeOther, value)
	}
	if u.mutation.LinkOtherFuncCleared() {
		_spec.ClearField(fieldtype.FieldLinkOtherFunc, field.TypeOther)
	}
	if value, ok := u.mutation.MAC(); ok {
		_spec.SetField(fieldtype.FieldMAC, field.TypeString, value)
	}
	if u.mutation.MACCleared() {
		_spec.ClearField(fieldtype.FieldMAC, field.TypeString)
	}
	if value, ok := u.mutation.StringArray(); ok {
		_spec.SetField(fieldtype.FieldStringArray, field.TypeOther, value)
	}
	if u.mutation.StringArrayCleared() {
		_spec.ClearField(fieldtype.FieldStringArray, field.TypeOther)
	}
	if value, ok := u.mutation.Password(); ok {
		_spec.SetField(fieldtype.FieldPassword, field.TypeString, value)
	}
	if u.mutation.PasswordCleared() {
		_spec.ClearField(fieldtype.FieldPassword, field.TypeString)
	}
	if value, ok := u.mutation.StringScanner(); ok {
		_spec.SetField(fieldtype.FieldStringScanner, field.TypeString, value)
	}
	if u.mutation.StringScannerCleared() {
		_spec.ClearField(fieldtype.FieldStringScanner, field.TypeString)
	}
	if value, ok := u.mutation.Duration(); ok {
		_spec.SetField(fieldtype.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedDuration(); ok {
		_spec.AddField(fieldtype.FieldDuration, field.TypeInt64, value)
	}
	if u.mutation.DurationCleared() {
		_spec.ClearField(fieldtype.FieldDuration, field.TypeInt64)
	}
	if value, ok := u.mutation.Dir(); ok {
		_spec.SetField(fieldtype.FieldDir, field.TypeString, value)
	}
	if value, ok := u.mutation.Ndir(); ok {
		_spec.SetField(fieldtype.FieldNdir, field.TypeString, value)
	}
	if u.mutation.NdirCleared() {
		_spec.ClearField(fieldtype.FieldNdir, field.TypeString)
	}
	if value, ok := u.mutation.Str(); ok {
		_spec.SetField(fieldtype.FieldStr, field.TypeString, value)
	}
	if u.mutation.StrCleared() {
		_spec.ClearField(fieldtype.FieldStr, field.TypeString)
	}
	if value, ok := u.mutation.NullStr(); ok {
		_spec.SetField(fieldtype.FieldNullStr, field.TypeString, value)
	}
	if u.mutation.NullStrCleared() {
		_spec.ClearField(fieldtype.FieldNullStr, field.TypeString)
	}
	if value, ok := u.mutation.Link(); ok {
		_spec.SetField(fieldtype.FieldLink, field.TypeString, value)
	}
	if u.mutation.LinkCleared() {
		_spec.ClearField(fieldtype.FieldLink, field.TypeString)
	}
	if value, ok := u.mutation.NullLink(); ok {
		_spec.SetField(fieldtype.FieldNullLink, field.TypeString, value)
	}
	if u.mutation.NullLinkCleared() {
		_spec.ClearField(fieldtype.FieldNullLink, field.TypeString)
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(fieldtype.FieldActive, field.TypeBool, value)
	}
	if u.mutation.ActiveCleared() {
		_spec.ClearField(fieldtype.FieldActive, field.TypeBool)
	}
	if value, ok := u.mutation.NullActive(); ok {
		_spec.SetField(fieldtype.FieldNullActive, field.TypeBool, value)
	}
	if u.mutation.NullActiveCleared() {
		_spec.ClearField(fieldtype.FieldNullActive, field.TypeBool)
	}
	if value, ok := u.mutation.Deleted(); ok {
		_spec.SetField(fieldtype.FieldDeleted, field.TypeBool, value)
	}
	if u.mutation.DeletedCleared() {
		_spec.ClearField(fieldtype.FieldDeleted, field.TypeBool)
	}
	if value, ok := u.mutation.DeletedAt(); ok {
		_spec.SetField(fieldtype.FieldDeletedAt, field.TypeTime, value)
	}
	if u.mutation.DeletedAtCleared() {
		_spec.ClearField(fieldtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := u.mutation.RawData(); ok {
		_spec.SetField(fieldtype.FieldRawData, field.TypeBytes, value)
	}
	if u.mutation.RawDataCleared() {
		_spec.ClearField(fieldtype.FieldRawData, field.TypeBytes)
	}
	if value, ok := u.mutation.Sensitive(); ok {
		_spec.SetField(fieldtype.FieldSensitive, field.TypeBytes, value)
	}
	if u.mutation.SensitiveCleared() {
		_spec.ClearField(fieldtype.FieldSensitive, field.TypeBytes)
	}
	if value, ok := u.mutation.IP(); ok {
		_spec.SetField(fieldtype.FieldIP, field.TypeBytes, value)
	}
	if u.mutation.IPCleared() {
		_spec.ClearField(fieldtype.FieldIP, field.TypeBytes)
	}
	if value, ok := u.mutation.NullInt64(); ok {
		_spec.SetField(fieldtype.FieldNullInt64, field.TypeInt, value)
	}
	if u.mutation.NullInt64Cleared() {
		_spec.ClearField(fieldtype.FieldNullInt64, field.TypeInt)
	}
	if value, ok := u.mutation.SchemaInt(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedSchemaInt(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt, field.TypeInt, value)
	}
	if u.mutation.SchemaIntCleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt, field.TypeInt)
	}
	if value, ok := u.mutation.SchemaInt8(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedSchemaInt8(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt8, field.TypeInt8, value)
	}
	if u.mutation.SchemaInt8Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.SchemaInt64(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedSchemaInt64(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt64, field.TypeInt64, value)
	}
	if u.mutation.SchemaInt64Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.SchemaFloat(); ok {
		_spec.SetField(fieldtype.FieldSchemaFloat, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedSchemaFloat(); ok {
		_spec.AddField(fieldtype.FieldSchemaFloat, field.TypeFloat64, value)
	}
	if u.mutation.SchemaFloatCleared() {
		_spec.ClearField(fieldtype.FieldSchemaFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.SchemaFloat32(); ok {
		_spec.SetField(fieldtype.FieldSchemaFloat32, field.TypeFloat32, value)
	}
	if value, ok := u.mutation.AddedSchemaFloat32(); ok {
		_spec.AddField(fieldtype.FieldSchemaFloat32, field.TypeFloat32, value)
	}
	if u.mutation.SchemaFloat32Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaFloat32, field.TypeFloat32)
	}
	if value, ok := u.mutation.NullFloat(); ok {
		_spec.SetField(fieldtype.FieldNullFloat, field.TypeFloat64, value)
	}
	if u.mutation.NullFloatCleared() {
		_spec.ClearField(fieldtype.FieldNullFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.Role(); ok {
		_spec.SetField(fieldtype.FieldRole, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Priority(); ok {
		_spec.SetField(fieldtype.FieldPriority, field.TypeEnum, value)
	}
	if u.mutation.PriorityCleared() {
		_spec.ClearField(fieldtype.FieldPriority, field.TypeEnum)
	}
	if value, ok := u.mutation.OptionalUUID(); ok {
		_spec.SetField(fieldtype.FieldOptionalUUID, field.TypeUUID, value)
	}
	if u.mutation.OptionalUUIDCleared() {
		_spec.ClearField(fieldtype.FieldOptionalUUID, field.TypeUUID)
	}
	if value, ok := u.mutation.NillableUUID(); ok {
		_spec.SetField(fieldtype.FieldNillableUUID, field.TypeUUID, value)
	}
	if u.mutation.NillableUUIDCleared() {
		_spec.ClearField(fieldtype.FieldNillableUUID, field.TypeUUID)
	}
	if value, ok := u.mutation.Strings(); ok {
		_spec.SetField(fieldtype.FieldStrings, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedStrings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fieldtype.FieldStrings, value)
		})
	}
	if u.mutation.StringsCleared() {
		_spec.ClearField(fieldtype.FieldStrings, field.TypeJSON)
	}
	if value, ok := u.mutation.Pair(); ok {
		_spec.SetField(fieldtype.FieldPair, field.TypeBytes, value)
	}
	if value, ok := u.mutation.NilPair(); ok {
		_spec.SetField(fieldtype.FieldNilPair, field.TypeBytes, value)
	}
	if u.mutation.NilPairCleared() {
		_spec.ClearField(fieldtype.FieldNilPair, field.TypeBytes)
	}
	if value, ok := u.mutation.Vstring(); ok {
		_spec.SetField(fieldtype.FieldVstring, field.TypeString, value)
	}
	if value, ok := u.mutation.Triple(); ok {
		_spec.SetField(fieldtype.FieldTriple, field.TypeString, value)
	}
	if value, ok := u.mutation.BigInt(); ok {
		_spec.SetField(fieldtype.FieldBigInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedBigInt(); ok {
		_spec.AddField(fieldtype.FieldBigInt, field.TypeInt, value)
	}
	if u.mutation.BigIntCleared() {
		_spec.ClearField(fieldtype.FieldBigInt, field.TypeInt)
	}
	if value, ok := u.mutation.PasswordOther(); ok {
		_spec.SetField(fieldtype.FieldPasswordOther, field.TypeOther, value)
	}
	if u.mutation.PasswordOtherCleared() {
		_spec.ClearField(fieldtype.FieldPasswordOther, field.TypeOther)
	}
	_spec.AddModifiers(u.modifiers...)
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// FieldTypeUpdateOne is the builder for updating a single FieldType entity.
type FieldTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FieldTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetInt sets the "int" field.
func (m *FieldTypeUpdateOne) SetInt(v int) *FieldTypeUpdateOne {
	m.mutation.ResetInt()
	m.mutation.SetInt(v)
	return m
}

// AddInt adds value to the "int" field.
func (m *FieldTypeUpdateOne) AddInt(v int) *FieldTypeUpdateOne {
	m.mutation.AddInt(v)
	return m
}

// SetInt8 sets the "int8" field.
func (m *FieldTypeUpdateOne) SetInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.ResetInt8()
	m.mutation.SetInt8(v)
	return m
}

// AddInt8 adds value to the "int8" field.
func (m *FieldTypeUpdateOne) AddInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.AddInt8(v)
	return m
}

// SetInt16 sets the "int16" field.
func (m *FieldTypeUpdateOne) SetInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.ResetInt16()
	m.mutation.SetInt16(v)
	return m
}

// AddInt16 adds value to the "int16" field.
func (m *FieldTypeUpdateOne) AddInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.AddInt16(v)
	return m
}

// SetInt32 sets the "int32" field.
func (m *FieldTypeUpdateOne) SetInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.ResetInt32()
	m.mutation.SetInt32(v)
	return m
}

// AddInt32 adds value to the "int32" field.
func (m *FieldTypeUpdateOne) AddInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.AddInt32(v)
	return m
}

// SetInt64 sets the "int64" field.
func (m *FieldTypeUpdateOne) SetInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.ResetInt64()
	m.mutation.SetInt64(v)
	return m
}

// AddInt64 adds value to the "int64" field.
func (m *FieldTypeUpdateOne) AddInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.AddInt64(v)
	return m
}

// SetOptionalInt sets the "optional_int" field.
func (m *FieldTypeUpdateOne) SetOptionalInt(v int) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalInt()
	m.mutation.SetOptionalInt(v)
	return m
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalInt(v *int) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalInt(*v)
	}
	return m
}

// AddOptionalInt adds value to the "optional_int" field.
func (m *FieldTypeUpdateOne) AddOptionalInt(v int) *FieldTypeUpdateOne {
	m.mutation.AddOptionalInt(v)
	return m
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (m *FieldTypeUpdateOne) ClearOptionalInt() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalInt()
	return m
}

// SetOptionalInt8 sets the "optional_int8" field.
func (m *FieldTypeUpdateOne) SetOptionalInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalInt8()
	m.mutation.SetOptionalInt8(v)
	return m
}

// SetNillableOptionalInt8 sets the "optional_int8" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalInt8(v *int8) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalInt8(*v)
	}
	return m
}

// AddOptionalInt8 adds value to the "optional_int8" field.
func (m *FieldTypeUpdateOne) AddOptionalInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.AddOptionalInt8(v)
	return m
}

// ClearOptionalInt8 clears the value of the "optional_int8" field.
func (m *FieldTypeUpdateOne) ClearOptionalInt8() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalInt8()
	return m
}

// SetOptionalInt16 sets the "optional_int16" field.
func (m *FieldTypeUpdateOne) SetOptionalInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalInt16()
	m.mutation.SetOptionalInt16(v)
	return m
}

// SetNillableOptionalInt16 sets the "optional_int16" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalInt16(v *int16) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalInt16(*v)
	}
	return m
}

// AddOptionalInt16 adds value to the "optional_int16" field.
func (m *FieldTypeUpdateOne) AddOptionalInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.AddOptionalInt16(v)
	return m
}

// ClearOptionalInt16 clears the value of the "optional_int16" field.
func (m *FieldTypeUpdateOne) ClearOptionalInt16() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalInt16()
	return m
}

// SetOptionalInt32 sets the "optional_int32" field.
func (m *FieldTypeUpdateOne) SetOptionalInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalInt32()
	m.mutation.SetOptionalInt32(v)
	return m
}

// SetNillableOptionalInt32 sets the "optional_int32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalInt32(*v)
	}
	return m
}

// AddOptionalInt32 adds value to the "optional_int32" field.
func (m *FieldTypeUpdateOne) AddOptionalInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.AddOptionalInt32(v)
	return m
}

// ClearOptionalInt32 clears the value of the "optional_int32" field.
func (m *FieldTypeUpdateOne) ClearOptionalInt32() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalInt32()
	return m
}

// SetOptionalInt64 sets the "optional_int64" field.
func (m *FieldTypeUpdateOne) SetOptionalInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalInt64()
	m.mutation.SetOptionalInt64(v)
	return m
}

// SetNillableOptionalInt64 sets the "optional_int64" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalInt64(v *int64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalInt64(*v)
	}
	return m
}

// AddOptionalInt64 adds value to the "optional_int64" field.
func (m *FieldTypeUpdateOne) AddOptionalInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.AddOptionalInt64(v)
	return m
}

// ClearOptionalInt64 clears the value of the "optional_int64" field.
func (m *FieldTypeUpdateOne) ClearOptionalInt64() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalInt64()
	return m
}

// SetNillableInt sets the "nillable_int" field.
func (m *FieldTypeUpdateOne) SetNillableInt(v int) *FieldTypeUpdateOne {
	m.mutation.ResetNillableInt()
	m.mutation.SetNillableInt(v)
	return m
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableInt(v *int) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableInt(*v)
	}
	return m
}

// AddNillableInt adds value to the "nillable_int" field.
func (m *FieldTypeUpdateOne) AddNillableInt(v int) *FieldTypeUpdateOne {
	m.mutation.AddNillableInt(v)
	return m
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (m *FieldTypeUpdateOne) ClearNillableInt() *FieldTypeUpdateOne {
	m.mutation.ClearNillableInt()
	return m
}

// SetNillableInt8 sets the "nillable_int8" field.
func (m *FieldTypeUpdateOne) SetNillableInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.ResetNillableInt8()
	m.mutation.SetNillableInt8(v)
	return m
}

// SetNillableNillableInt8 sets the "nillable_int8" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableInt8(v *int8) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableInt8(*v)
	}
	return m
}

// AddNillableInt8 adds value to the "nillable_int8" field.
func (m *FieldTypeUpdateOne) AddNillableInt8(v int8) *FieldTypeUpdateOne {
	m.mutation.AddNillableInt8(v)
	return m
}

// ClearNillableInt8 clears the value of the "nillable_int8" field.
func (m *FieldTypeUpdateOne) ClearNillableInt8() *FieldTypeUpdateOne {
	m.mutation.ClearNillableInt8()
	return m
}

// SetNillableInt16 sets the "nillable_int16" field.
func (m *FieldTypeUpdateOne) SetNillableInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.ResetNillableInt16()
	m.mutation.SetNillableInt16(v)
	return m
}

// SetNillableNillableInt16 sets the "nillable_int16" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableInt16(v *int16) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableInt16(*v)
	}
	return m
}

// AddNillableInt16 adds value to the "nillable_int16" field.
func (m *FieldTypeUpdateOne) AddNillableInt16(v int16) *FieldTypeUpdateOne {
	m.mutation.AddNillableInt16(v)
	return m
}

// ClearNillableInt16 clears the value of the "nillable_int16" field.
func (m *FieldTypeUpdateOne) ClearNillableInt16() *FieldTypeUpdateOne {
	m.mutation.ClearNillableInt16()
	return m
}

// SetNillableInt32 sets the "nillable_int32" field.
func (m *FieldTypeUpdateOne) SetNillableInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.ResetNillableInt32()
	m.mutation.SetNillableInt32(v)
	return m
}

// SetNillableNillableInt32 sets the "nillable_int32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableInt32(*v)
	}
	return m
}

// AddNillableInt32 adds value to the "nillable_int32" field.
func (m *FieldTypeUpdateOne) AddNillableInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.AddNillableInt32(v)
	return m
}

// ClearNillableInt32 clears the value of the "nillable_int32" field.
func (m *FieldTypeUpdateOne) ClearNillableInt32() *FieldTypeUpdateOne {
	m.mutation.ClearNillableInt32()
	return m
}

// SetNillableInt64 sets the "nillable_int64" field.
func (m *FieldTypeUpdateOne) SetNillableInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.ResetNillableInt64()
	m.mutation.SetNillableInt64(v)
	return m
}

// SetNillableNillableInt64 sets the "nillable_int64" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableInt64(v *int64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableInt64(*v)
	}
	return m
}

// AddNillableInt64 adds value to the "nillable_int64" field.
func (m *FieldTypeUpdateOne) AddNillableInt64(v int64) *FieldTypeUpdateOne {
	m.mutation.AddNillableInt64(v)
	return m
}

// ClearNillableInt64 clears the value of the "nillable_int64" field.
func (m *FieldTypeUpdateOne) ClearNillableInt64() *FieldTypeUpdateOne {
	m.mutation.ClearNillableInt64()
	return m
}

// SetValidateOptionalInt32 sets the "validate_optional_int32" field.
func (m *FieldTypeUpdateOne) SetValidateOptionalInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.ResetValidateOptionalInt32()
	m.mutation.SetValidateOptionalInt32(v)
	return m
}

// SetNillableValidateOptionalInt32 sets the "validate_optional_int32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableValidateOptionalInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetValidateOptionalInt32(*v)
	}
	return m
}

// AddValidateOptionalInt32 adds value to the "validate_optional_int32" field.
func (m *FieldTypeUpdateOne) AddValidateOptionalInt32(v int32) *FieldTypeUpdateOne {
	m.mutation.AddValidateOptionalInt32(v)
	return m
}

// ClearValidateOptionalInt32 clears the value of the "validate_optional_int32" field.
func (m *FieldTypeUpdateOne) ClearValidateOptionalInt32() *FieldTypeUpdateOne {
	m.mutation.ClearValidateOptionalInt32()
	return m
}

// SetOptionalUint sets the "optional_uint" field.
func (m *FieldTypeUpdateOne) SetOptionalUint(v uint) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalUint()
	m.mutation.SetOptionalUint(v)
	return m
}

// SetNillableOptionalUint sets the "optional_uint" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUint(v *uint) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUint(*v)
	}
	return m
}

// AddOptionalUint adds value to the "optional_uint" field.
func (m *FieldTypeUpdateOne) AddOptionalUint(v int) *FieldTypeUpdateOne {
	m.mutation.AddOptionalUint(v)
	return m
}

// ClearOptionalUint clears the value of the "optional_uint" field.
func (m *FieldTypeUpdateOne) ClearOptionalUint() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUint()
	return m
}

// SetOptionalUint8 sets the "optional_uint8" field.
func (m *FieldTypeUpdateOne) SetOptionalUint8(v uint8) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalUint8()
	m.mutation.SetOptionalUint8(v)
	return m
}

// SetNillableOptionalUint8 sets the "optional_uint8" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUint8(v *uint8) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUint8(*v)
	}
	return m
}

// AddOptionalUint8 adds value to the "optional_uint8" field.
func (m *FieldTypeUpdateOne) AddOptionalUint8(v int8) *FieldTypeUpdateOne {
	m.mutation.AddOptionalUint8(v)
	return m
}

// ClearOptionalUint8 clears the value of the "optional_uint8" field.
func (m *FieldTypeUpdateOne) ClearOptionalUint8() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUint8()
	return m
}

// SetOptionalUint16 sets the "optional_uint16" field.
func (m *FieldTypeUpdateOne) SetOptionalUint16(v uint16) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalUint16()
	m.mutation.SetOptionalUint16(v)
	return m
}

// SetNillableOptionalUint16 sets the "optional_uint16" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUint16(v *uint16) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUint16(*v)
	}
	return m
}

// AddOptionalUint16 adds value to the "optional_uint16" field.
func (m *FieldTypeUpdateOne) AddOptionalUint16(v int16) *FieldTypeUpdateOne {
	m.mutation.AddOptionalUint16(v)
	return m
}

// ClearOptionalUint16 clears the value of the "optional_uint16" field.
func (m *FieldTypeUpdateOne) ClearOptionalUint16() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUint16()
	return m
}

// SetOptionalUint32 sets the "optional_uint32" field.
func (m *FieldTypeUpdateOne) SetOptionalUint32(v uint32) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalUint32()
	m.mutation.SetOptionalUint32(v)
	return m
}

// SetNillableOptionalUint32 sets the "optional_uint32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUint32(v *uint32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUint32(*v)
	}
	return m
}

// AddOptionalUint32 adds value to the "optional_uint32" field.
func (m *FieldTypeUpdateOne) AddOptionalUint32(v int32) *FieldTypeUpdateOne {
	m.mutation.AddOptionalUint32(v)
	return m
}

// ClearOptionalUint32 clears the value of the "optional_uint32" field.
func (m *FieldTypeUpdateOne) ClearOptionalUint32() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUint32()
	return m
}

// SetOptionalUint64 sets the "optional_uint64" field.
func (m *FieldTypeUpdateOne) SetOptionalUint64(v uint64) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalUint64()
	m.mutation.SetOptionalUint64(v)
	return m
}

// SetNillableOptionalUint64 sets the "optional_uint64" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUint64(v *uint64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUint64(*v)
	}
	return m
}

// AddOptionalUint64 adds value to the "optional_uint64" field.
func (m *FieldTypeUpdateOne) AddOptionalUint64(v int64) *FieldTypeUpdateOne {
	m.mutation.AddOptionalUint64(v)
	return m
}

// ClearOptionalUint64 clears the value of the "optional_uint64" field.
func (m *FieldTypeUpdateOne) ClearOptionalUint64() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUint64()
	return m
}

// SetState sets the "state" field.
func (m *FieldTypeUpdateOne) SetState(v fieldtype.State) *FieldTypeUpdateOne {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableState(v *fieldtype.State) *FieldTypeUpdateOne {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// ClearState clears the value of the "state" field.
func (m *FieldTypeUpdateOne) ClearState() *FieldTypeUpdateOne {
	m.mutation.ClearState()
	return m
}

// SetOptionalFloat sets the "optional_float" field.
func (m *FieldTypeUpdateOne) SetOptionalFloat(v float64) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalFloat()
	m.mutation.SetOptionalFloat(v)
	return m
}

// SetNillableOptionalFloat sets the "optional_float" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalFloat(v *float64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalFloat(*v)
	}
	return m
}

// AddOptionalFloat adds value to the "optional_float" field.
func (m *FieldTypeUpdateOne) AddOptionalFloat(v float64) *FieldTypeUpdateOne {
	m.mutation.AddOptionalFloat(v)
	return m
}

// ClearOptionalFloat clears the value of the "optional_float" field.
func (m *FieldTypeUpdateOne) ClearOptionalFloat() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalFloat()
	return m
}

// SetOptionalFloat32 sets the "optional_float32" field.
func (m *FieldTypeUpdateOne) SetOptionalFloat32(v float32) *FieldTypeUpdateOne {
	m.mutation.ResetOptionalFloat32()
	m.mutation.SetOptionalFloat32(v)
	return m
}

// SetNillableOptionalFloat32 sets the "optional_float32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalFloat32(v *float32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalFloat32(*v)
	}
	return m
}

// AddOptionalFloat32 adds value to the "optional_float32" field.
func (m *FieldTypeUpdateOne) AddOptionalFloat32(v float32) *FieldTypeUpdateOne {
	m.mutation.AddOptionalFloat32(v)
	return m
}

// ClearOptionalFloat32 clears the value of the "optional_float32" field.
func (m *FieldTypeUpdateOne) ClearOptionalFloat32() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalFloat32()
	return m
}

// SetText sets the "text" field.
func (m *FieldTypeUpdateOne) SetText(v string) *FieldTypeUpdateOne {
	m.mutation.SetText(v)
	return m
}

// SetNillableText sets the "text" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableText(v *string) *FieldTypeUpdateOne {
	if v != nil {
		m.SetText(*v)
	}
	return m
}

// ClearText clears the value of the "text" field.
func (m *FieldTypeUpdateOne) ClearText() *FieldTypeUpdateOne {
	m.mutation.ClearText()
	return m
}

// SetDatetime sets the "datetime" field.
func (m *FieldTypeUpdateOne) SetDatetime(v time.Time) *FieldTypeUpdateOne {
	m.mutation.SetDatetime(v)
	return m
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableDatetime(v *time.Time) *FieldTypeUpdateOne {
	if v != nil {
		m.SetDatetime(*v)
	}
	return m
}

// ClearDatetime clears the value of the "datetime" field.
func (m *FieldTypeUpdateOne) ClearDatetime() *FieldTypeUpdateOne {
	m.mutation.ClearDatetime()
	return m
}

// SetDecimal sets the "decimal" field.
func (m *FieldTypeUpdateOne) SetDecimal(v float64) *FieldTypeUpdateOne {
	m.mutation.ResetDecimal()
	m.mutation.SetDecimal(v)
	return m
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableDecimal(v *float64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetDecimal(*v)
	}
	return m
}

// AddDecimal adds value to the "decimal" field.
func (m *FieldTypeUpdateOne) AddDecimal(v float64) *FieldTypeUpdateOne {
	m.mutation.AddDecimal(v)
	return m
}

// ClearDecimal clears the value of the "decimal" field.
func (m *FieldTypeUpdateOne) ClearDecimal() *FieldTypeUpdateOne {
	m.mutation.ClearDecimal()
	return m
}

// SetLinkOther sets the "link_other" field.
func (m *FieldTypeUpdateOne) SetLinkOther(v *schema.Link) *FieldTypeUpdateOne {
	m.mutation.SetLinkOther(v)
	return m
}

// ClearLinkOther clears the value of the "link_other" field.
func (m *FieldTypeUpdateOne) ClearLinkOther() *FieldTypeUpdateOne {
	m.mutation.ClearLinkOther()
	return m
}

// SetLinkOtherFunc sets the "link_other_func" field.
func (m *FieldTypeUpdateOne) SetLinkOtherFunc(v *schema.Link) *FieldTypeUpdateOne {
	m.mutation.SetLinkOtherFunc(v)
	return m
}

// ClearLinkOtherFunc clears the value of the "link_other_func" field.
func (m *FieldTypeUpdateOne) ClearLinkOtherFunc() *FieldTypeUpdateOne {
	m.mutation.ClearLinkOtherFunc()
	return m
}

// SetMAC sets the "mac" field.
func (m *FieldTypeUpdateOne) SetMAC(v schema.MAC) *FieldTypeUpdateOne {
	m.mutation.SetMAC(v)
	return m
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableMAC(v *schema.MAC) *FieldTypeUpdateOne {
	if v != nil {
		m.SetMAC(*v)
	}
	return m
}

// ClearMAC clears the value of the "mac" field.
func (m *FieldTypeUpdateOne) ClearMAC() *FieldTypeUpdateOne {
	m.mutation.ClearMAC()
	return m
}

// SetStringArray sets the "string_array" field.
func (m *FieldTypeUpdateOne) SetStringArray(v schema.Strings) *FieldTypeUpdateOne {
	m.mutation.SetStringArray(v)
	return m
}

// ClearStringArray clears the value of the "string_array" field.
func (m *FieldTypeUpdateOne) ClearStringArray() *FieldTypeUpdateOne {
	m.mutation.ClearStringArray()
	return m
}

// SetPassword sets the "password" field.
func (m *FieldTypeUpdateOne) SetPassword(v string) *FieldTypeUpdateOne {
	m.mutation.SetPassword(v)
	return m
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillablePassword(v *string) *FieldTypeUpdateOne {
	if v != nil {
		m.SetPassword(*v)
	}
	return m
}

// ClearPassword clears the value of the "password" field.
func (m *FieldTypeUpdateOne) ClearPassword() *FieldTypeUpdateOne {
	m.mutation.ClearPassword()
	return m
}

// SetStringScanner sets the "string_scanner" field.
func (m *FieldTypeUpdateOne) SetStringScanner(v schema.StringScanner) *FieldTypeUpdateOne {
	m.mutation.SetStringScanner(v)
	return m
}

// SetNillableStringScanner sets the "string_scanner" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableStringScanner(v *schema.StringScanner) *FieldTypeUpdateOne {
	if v != nil {
		m.SetStringScanner(*v)
	}
	return m
}

// ClearStringScanner clears the value of the "string_scanner" field.
func (m *FieldTypeUpdateOne) ClearStringScanner() *FieldTypeUpdateOne {
	m.mutation.ClearStringScanner()
	return m
}

// SetDuration sets the "duration" field.
func (m *FieldTypeUpdateOne) SetDuration(v time.Duration) *FieldTypeUpdateOne {
	m.mutation.ResetDuration()
	m.mutation.SetDuration(v)
	return m
}

// AddDuration adds value to the "duration" field.
func (m *FieldTypeUpdateOne) AddDuration(v time.Duration) *FieldTypeUpdateOne {
	m.mutation.AddDuration(v)
	return m
}

// ClearDuration clears the value of the "duration" field.
func (m *FieldTypeUpdateOne) ClearDuration() *FieldTypeUpdateOne {
	m.mutation.ClearDuration()
	return m
}

// SetDir sets the "dir" field.
func (m *FieldTypeUpdateOne) SetDir(v http.Dir) *FieldTypeUpdateOne {
	m.mutation.SetDir(v)
	return m
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableDir(v *http.Dir) *FieldTypeUpdateOne {
	if v != nil {
		m.SetDir(*v)
	}
	return m
}

// SetNdir sets the "ndir" field.
func (m *FieldTypeUpdateOne) SetNdir(v http.Dir) *FieldTypeUpdateOne {
	m.mutation.SetNdir(v)
	return m
}

// SetNillableNdir sets the "ndir" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNdir(v *http.Dir) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNdir(*v)
	}
	return m
}

// ClearNdir clears the value of the "ndir" field.
func (m *FieldTypeUpdateOne) ClearNdir() *FieldTypeUpdateOne {
	m.mutation.ClearNdir()
	return m
}

// SetStr sets the "str" field.
func (m *FieldTypeUpdateOne) SetStr(v sql.NullString) *FieldTypeUpdateOne {
	m.mutation.SetStr(v)
	return m
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableStr(v *sql.NullString) *FieldTypeUpdateOne {
	if v != nil {
		m.SetStr(*v)
	}
	return m
}

// ClearStr clears the value of the "str" field.
func (m *FieldTypeUpdateOne) ClearStr() *FieldTypeUpdateOne {
	m.mutation.ClearStr()
	return m
}

// SetNullStr sets the "null_str" field.
func (m *FieldTypeUpdateOne) SetNullStr(v *sql.NullString) *FieldTypeUpdateOne {
	m.mutation.SetNullStr(v)
	return m
}

// ClearNullStr clears the value of the "null_str" field.
func (m *FieldTypeUpdateOne) ClearNullStr() *FieldTypeUpdateOne {
	m.mutation.ClearNullStr()
	return m
}

// SetLink sets the "link" field.
func (m *FieldTypeUpdateOne) SetLink(v schema.Link) *FieldTypeUpdateOne {
	m.mutation.SetLink(v)
	return m
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableLink(v *schema.Link) *FieldTypeUpdateOne {
	if v != nil {
		m.SetLink(*v)
	}
	return m
}

// ClearLink clears the value of the "link" field.
func (m *FieldTypeUpdateOne) ClearLink() *FieldTypeUpdateOne {
	m.mutation.ClearLink()
	return m
}

// SetNullLink sets the "null_link" field.
func (m *FieldTypeUpdateOne) SetNullLink(v *schema.Link) *FieldTypeUpdateOne {
	m.mutation.SetNullLink(v)
	return m
}

// ClearNullLink clears the value of the "null_link" field.
func (m *FieldTypeUpdateOne) ClearNullLink() *FieldTypeUpdateOne {
	m.mutation.ClearNullLink()
	return m
}

// SetActive sets the "active" field.
func (m *FieldTypeUpdateOne) SetActive(v schema.Status) *FieldTypeUpdateOne {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableActive(v *schema.Status) *FieldTypeUpdateOne {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// ClearActive clears the value of the "active" field.
func (m *FieldTypeUpdateOne) ClearActive() *FieldTypeUpdateOne {
	m.mutation.ClearActive()
	return m
}

// SetNullActive sets the "null_active" field.
func (m *FieldTypeUpdateOne) SetNullActive(v schema.Status) *FieldTypeUpdateOne {
	m.mutation.SetNullActive(v)
	return m
}

// SetNillableNullActive sets the "null_active" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNullActive(v *schema.Status) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNullActive(*v)
	}
	return m
}

// ClearNullActive clears the value of the "null_active" field.
func (m *FieldTypeUpdateOne) ClearNullActive() *FieldTypeUpdateOne {
	m.mutation.ClearNullActive()
	return m
}

// SetDeleted sets the "deleted" field.
func (m *FieldTypeUpdateOne) SetDeleted(v *sql.NullBool) *FieldTypeUpdateOne {
	m.mutation.SetDeleted(v)
	return m
}

// ClearDeleted clears the value of the "deleted" field.
func (m *FieldTypeUpdateOne) ClearDeleted() *FieldTypeUpdateOne {
	m.mutation.ClearDeleted()
	return m
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FieldTypeUpdateOne) SetDeletedAt(v *sql.NullTime) *FieldTypeUpdateOne {
	m.mutation.SetDeletedAt(v)
	return m
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FieldTypeUpdateOne) ClearDeletedAt() *FieldTypeUpdateOne {
	m.mutation.ClearDeletedAt()
	return m
}

// SetRawData sets the "raw_data" field.
func (m *FieldTypeUpdateOne) SetRawData(v []byte) *FieldTypeUpdateOne {
	m.mutation.SetRawData(v)
	return m
}

// ClearRawData clears the value of the "raw_data" field.
func (m *FieldTypeUpdateOne) ClearRawData() *FieldTypeUpdateOne {
	m.mutation.ClearRawData()
	return m
}

// SetSensitive sets the "sensitive" field.
func (m *FieldTypeUpdateOne) SetSensitive(v []byte) *FieldTypeUpdateOne {
	m.mutation.SetSensitive(v)
	return m
}

// ClearSensitive clears the value of the "sensitive" field.
func (m *FieldTypeUpdateOne) ClearSensitive() *FieldTypeUpdateOne {
	m.mutation.ClearSensitive()
	return m
}

// SetIP sets the "ip" field.
func (m *FieldTypeUpdateOne) SetIP(v net.IP) *FieldTypeUpdateOne {
	m.mutation.SetIP(v)
	return m
}

// ClearIP clears the value of the "ip" field.
func (m *FieldTypeUpdateOne) ClearIP() *FieldTypeUpdateOne {
	m.mutation.ClearIP()
	return m
}

// SetNullInt64 sets the "null_int64" field.
func (m *FieldTypeUpdateOne) SetNullInt64(v *sql.NullInt64) *FieldTypeUpdateOne {
	m.mutation.SetNullInt64(v)
	return m
}

// ClearNullInt64 clears the value of the "null_int64" field.
func (m *FieldTypeUpdateOne) ClearNullInt64() *FieldTypeUpdateOne {
	m.mutation.ClearNullInt64()
	return m
}

// SetSchemaInt sets the "schema_int" field.
func (m *FieldTypeUpdateOne) SetSchemaInt(v schema.Int) *FieldTypeUpdateOne {
	m.mutation.ResetSchemaInt()
	m.mutation.SetSchemaInt(v)
	return m
}

// SetNillableSchemaInt sets the "schema_int" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableSchemaInt(v *schema.Int) *FieldTypeUpdateOne {
	if v != nil {
		m.SetSchemaInt(*v)
	}
	return m
}

// AddSchemaInt adds value to the "schema_int" field.
func (m *FieldTypeUpdateOne) AddSchemaInt(v schema.Int) *FieldTypeUpdateOne {
	m.mutation.AddSchemaInt(v)
	return m
}

// ClearSchemaInt clears the value of the "schema_int" field.
func (m *FieldTypeUpdateOne) ClearSchemaInt() *FieldTypeUpdateOne {
	m.mutation.ClearSchemaInt()
	return m
}

// SetSchemaInt8 sets the "schema_int8" field.
func (m *FieldTypeUpdateOne) SetSchemaInt8(v schema.Int8) *FieldTypeUpdateOne {
	m.mutation.ResetSchemaInt8()
	m.mutation.SetSchemaInt8(v)
	return m
}

// SetNillableSchemaInt8 sets the "schema_int8" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableSchemaInt8(v *schema.Int8) *FieldTypeUpdateOne {
	if v != nil {
		m.SetSchemaInt8(*v)
	}
	return m
}

// AddSchemaInt8 adds value to the "schema_int8" field.
func (m *FieldTypeUpdateOne) AddSchemaInt8(v schema.Int8) *FieldTypeUpdateOne {
	m.mutation.AddSchemaInt8(v)
	return m
}

// ClearSchemaInt8 clears the value of the "schema_int8" field.
func (m *FieldTypeUpdateOne) ClearSchemaInt8() *FieldTypeUpdateOne {
	m.mutation.ClearSchemaInt8()
	return m
}

// SetSchemaInt64 sets the "schema_int64" field.
func (m *FieldTypeUpdateOne) SetSchemaInt64(v schema.Int64) *FieldTypeUpdateOne {
	m.mutation.ResetSchemaInt64()
	m.mutation.SetSchemaInt64(v)
	return m
}

// SetNillableSchemaInt64 sets the "schema_int64" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableSchemaInt64(v *schema.Int64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetSchemaInt64(*v)
	}
	return m
}

// AddSchemaInt64 adds value to the "schema_int64" field.
func (m *FieldTypeUpdateOne) AddSchemaInt64(v schema.Int64) *FieldTypeUpdateOne {
	m.mutation.AddSchemaInt64(v)
	return m
}

// ClearSchemaInt64 clears the value of the "schema_int64" field.
func (m *FieldTypeUpdateOne) ClearSchemaInt64() *FieldTypeUpdateOne {
	m.mutation.ClearSchemaInt64()
	return m
}

// SetSchemaFloat sets the "schema_float" field.
func (m *FieldTypeUpdateOne) SetSchemaFloat(v schema.Float64) *FieldTypeUpdateOne {
	m.mutation.ResetSchemaFloat()
	m.mutation.SetSchemaFloat(v)
	return m
}

// SetNillableSchemaFloat sets the "schema_float" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableSchemaFloat(v *schema.Float64) *FieldTypeUpdateOne {
	if v != nil {
		m.SetSchemaFloat(*v)
	}
	return m
}

// AddSchemaFloat adds value to the "schema_float" field.
func (m *FieldTypeUpdateOne) AddSchemaFloat(v schema.Float64) *FieldTypeUpdateOne {
	m.mutation.AddSchemaFloat(v)
	return m
}

// ClearSchemaFloat clears the value of the "schema_float" field.
func (m *FieldTypeUpdateOne) ClearSchemaFloat() *FieldTypeUpdateOne {
	m.mutation.ClearSchemaFloat()
	return m
}

// SetSchemaFloat32 sets the "schema_float32" field.
func (m *FieldTypeUpdateOne) SetSchemaFloat32(v schema.Float32) *FieldTypeUpdateOne {
	m.mutation.ResetSchemaFloat32()
	m.mutation.SetSchemaFloat32(v)
	return m
}

// SetNillableSchemaFloat32 sets the "schema_float32" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableSchemaFloat32(v *schema.Float32) *FieldTypeUpdateOne {
	if v != nil {
		m.SetSchemaFloat32(*v)
	}
	return m
}

// AddSchemaFloat32 adds value to the "schema_float32" field.
func (m *FieldTypeUpdateOne) AddSchemaFloat32(v schema.Float32) *FieldTypeUpdateOne {
	m.mutation.AddSchemaFloat32(v)
	return m
}

// ClearSchemaFloat32 clears the value of the "schema_float32" field.
func (m *FieldTypeUpdateOne) ClearSchemaFloat32() *FieldTypeUpdateOne {
	m.mutation.ClearSchemaFloat32()
	return m
}

// SetNullFloat sets the "null_float" field.
func (m *FieldTypeUpdateOne) SetNullFloat(v *sql.NullFloat64) *FieldTypeUpdateOne {
	m.mutation.SetNullFloat(v)
	return m
}

// ClearNullFloat clears the value of the "null_float" field.
func (m *FieldTypeUpdateOne) ClearNullFloat() *FieldTypeUpdateOne {
	m.mutation.ClearNullFloat()
	return m
}

// SetRole sets the "role" field.
func (m *FieldTypeUpdateOne) SetRole(v role.Role) *FieldTypeUpdateOne {
	m.mutation.SetRole(v)
	return m
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableRole(v *role.Role) *FieldTypeUpdateOne {
	if v != nil {
		m.SetRole(*v)
	}
	return m
}

// SetPriority sets the "priority" field.
func (m *FieldTypeUpdateOne) SetPriority(v role.Priority) *FieldTypeUpdateOne {
	m.mutation.SetPriority(v)
	return m
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillablePriority(v *role.Priority) *FieldTypeUpdateOne {
	if v != nil {
		m.SetPriority(*v)
	}
	return m
}

// ClearPriority clears the value of the "priority" field.
func (m *FieldTypeUpdateOne) ClearPriority() *FieldTypeUpdateOne {
	m.mutation.ClearPriority()
	return m
}

// SetOptionalUUID sets the "optional_uuid" field.
func (m *FieldTypeUpdateOne) SetOptionalUUID(v uuid.UUID) *FieldTypeUpdateOne {
	m.mutation.SetOptionalUUID(v)
	return m
}

// SetNillableOptionalUUID sets the "optional_uuid" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableOptionalUUID(v *uuid.UUID) *FieldTypeUpdateOne {
	if v != nil {
		m.SetOptionalUUID(*v)
	}
	return m
}

// ClearOptionalUUID clears the value of the "optional_uuid" field.
func (m *FieldTypeUpdateOne) ClearOptionalUUID() *FieldTypeUpdateOne {
	m.mutation.ClearOptionalUUID()
	return m
}

// SetNillableUUID sets the "nillable_uuid" field.
func (m *FieldTypeUpdateOne) SetNillableUUID(v uuid.UUID) *FieldTypeUpdateOne {
	m.mutation.SetNillableUUID(v)
	return m
}

// SetNillableNillableUUID sets the "nillable_uuid" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableNillableUUID(v *uuid.UUID) *FieldTypeUpdateOne {
	if v != nil {
		m.SetNillableUUID(*v)
	}
	return m
}

// ClearNillableUUID clears the value of the "nillable_uuid" field.
func (m *FieldTypeUpdateOne) ClearNillableUUID() *FieldTypeUpdateOne {
	m.mutation.ClearNillableUUID()
	return m
}

// SetStrings sets the "strings" field.
func (m *FieldTypeUpdateOne) SetStrings(v []string) *FieldTypeUpdateOne {
	m.mutation.SetStrings(v)
	return m
}

// AppendStrings appends value to the "strings" field.
func (m *FieldTypeUpdateOne) AppendStrings(v []string) *FieldTypeUpdateOne {
	m.mutation.AppendStrings(v)
	return m
}

// ClearStrings clears the value of the "strings" field.
func (m *FieldTypeUpdateOne) ClearStrings() *FieldTypeUpdateOne {
	m.mutation.ClearStrings()
	return m
}

// SetPair sets the "pair" field.
func (m *FieldTypeUpdateOne) SetPair(v schema.Pair) *FieldTypeUpdateOne {
	m.mutation.SetPair(v)
	return m
}

// SetNillablePair sets the "pair" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillablePair(v *schema.Pair) *FieldTypeUpdateOne {
	if v != nil {
		m.SetPair(*v)
	}
	return m
}

// SetNilPair sets the "nil_pair" field.
func (m *FieldTypeUpdateOne) SetNilPair(v *schema.Pair) *FieldTypeUpdateOne {
	m.mutation.SetNilPair(v)
	return m
}

// ClearNilPair clears the value of the "nil_pair" field.
func (m *FieldTypeUpdateOne) ClearNilPair() *FieldTypeUpdateOne {
	m.mutation.ClearNilPair()
	return m
}

// SetVstring sets the "vstring" field.
func (m *FieldTypeUpdateOne) SetVstring(v schema.VString) *FieldTypeUpdateOne {
	m.mutation.SetVstring(v)
	return m
}

// SetNillableVstring sets the "vstring" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableVstring(v *schema.VString) *FieldTypeUpdateOne {
	if v != nil {
		m.SetVstring(*v)
	}
	return m
}

// SetTriple sets the "triple" field.
func (m *FieldTypeUpdateOne) SetTriple(v schema.Triple) *FieldTypeUpdateOne {
	m.mutation.SetTriple(v)
	return m
}

// SetNillableTriple sets the "triple" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableTriple(v *schema.Triple) *FieldTypeUpdateOne {
	if v != nil {
		m.SetTriple(*v)
	}
	return m
}

// SetBigInt sets the "big_int" field.
func (m *FieldTypeUpdateOne) SetBigInt(v schema.BigInt) *FieldTypeUpdateOne {
	m.mutation.ResetBigInt()
	m.mutation.SetBigInt(v)
	return m
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillableBigInt(v *schema.BigInt) *FieldTypeUpdateOne {
	if v != nil {
		m.SetBigInt(*v)
	}
	return m
}

// AddBigInt adds value to the "big_int" field.
func (m *FieldTypeUpdateOne) AddBigInt(v schema.BigInt) *FieldTypeUpdateOne {
	m.mutation.AddBigInt(v)
	return m
}

// ClearBigInt clears the value of the "big_int" field.
func (m *FieldTypeUpdateOne) ClearBigInt() *FieldTypeUpdateOne {
	m.mutation.ClearBigInt()
	return m
}

// SetPasswordOther sets the "password_other" field.
func (m *FieldTypeUpdateOne) SetPasswordOther(v schema.Password) *FieldTypeUpdateOne {
	m.mutation.SetPasswordOther(v)
	return m
}

// SetNillablePasswordOther sets the "password_other" field if the given value is not nil.
func (m *FieldTypeUpdateOne) SetNillablePasswordOther(v *schema.Password) *FieldTypeUpdateOne {
	if v != nil {
		m.SetPasswordOther(*v)
	}
	return m
}

// ClearPasswordOther clears the value of the "password_other" field.
func (m *FieldTypeUpdateOne) ClearPasswordOther() *FieldTypeUpdateOne {
	m.mutation.ClearPasswordOther()
	return m
}

// Mutation returns the FieldTypeMutation object of the builder.
func (m *FieldTypeUpdateOne) Mutation() *FieldTypeMutation {
	return m.mutation
}

// Where appends a list predicates to the FieldTypeUpdate builder.
func (u *FieldTypeUpdateOne) Where(ps ...predicate.FieldType) *FieldTypeUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *FieldTypeUpdateOne) Select(field string, fields ...string) *FieldTypeUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated FieldType entity.
func (u *FieldTypeUpdateOne) Save(ctx context.Context) (*FieldType, error) {
	u.defaults()
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *FieldTypeUpdateOne) SaveX(ctx context.Context) *FieldType {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *FieldTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FieldTypeUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (u *FieldTypeUpdateOne) defaults() {
	if _, ok := u.mutation.Int64(); !ok {
		v := fieldtype.UpdateDefaultInt64()
		u.mutation.SetInt64(v)
	}
	if _, ok := u.mutation.Duration(); !ok && !u.mutation.DurationCleared() {
		v := fieldtype.UpdateDefaultDuration()
		u.mutation.SetDuration(v)
	}
	if _, ok := u.mutation.DeletedAt(); !ok && !u.mutation.DeletedAtCleared() {
		v := fieldtype.UpdateDefaultDeletedAt()
		u.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *FieldTypeUpdateOne) check() error {
	if v, ok := u.mutation.ValidateOptionalInt32(); ok {
		if err := fieldtype.ValidateOptionalInt32Validator(v); err != nil {
			return &ValidationError{Name: "validate_optional_int32", err: fmt.Errorf(`ent: validator failed for field "FieldType.validate_optional_int32": %w`, err)}
		}
	}
	if v, ok := u.mutation.State(); ok {
		if err := fieldtype.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FieldType.state": %w`, err)}
		}
	}
	if v, ok := u.mutation.MAC(); ok {
		if err := fieldtype.MACValidator(v.String()); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "FieldType.mac": %w`, err)}
		}
	}
	if v, ok := u.mutation.Ndir(); ok {
		if err := fieldtype.NdirValidator(string(v)); err != nil {
			return &ValidationError{Name: "ndir", err: fmt.Errorf(`ent: validator failed for field "FieldType.ndir": %w`, err)}
		}
	}
	if v, ok := u.mutation.Link(); ok {
		if err := fieldtype.LinkValidator(v.String()); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "FieldType.link": %w`, err)}
		}
	}
	if v, ok := u.mutation.RawData(); ok {
		if err := fieldtype.RawDataValidator(v); err != nil {
			return &ValidationError{Name: "raw_data", err: fmt.Errorf(`ent: validator failed for field "FieldType.raw_data": %w`, err)}
		}
	}
	if v, ok := u.mutation.IP(); ok {
		if err := fieldtype.IPValidator([]byte(v)); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "FieldType.ip": %w`, err)}
		}
	}
	if v, ok := u.mutation.Role(); ok {
		if err := fieldtype.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "FieldType.role": %w`, err)}
		}
	}
	if v, ok := u.mutation.Priority(); ok {
		if err := fieldtype.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "FieldType.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *FieldTypeUpdateOne) Modify(modifiers ...func(*sql.UpdateBuilder)) *FieldTypeUpdateOne {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *FieldTypeUpdateOne) sqlSave(ctx context.Context) (_n *FieldType, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fieldtype.Table, fieldtype.Columns, sqlgraph.NewFieldSpec(fieldtype.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FieldType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fieldtype.FieldID)
		for _, f := range fields {
			if !fieldtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fieldtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Int(); ok {
		_spec.SetField(fieldtype.FieldInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedInt(); ok {
		_spec.AddField(fieldtype.FieldInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.Int8(); ok {
		_spec.SetField(fieldtype.FieldInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedInt8(); ok {
		_spec.AddField(fieldtype.FieldInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.Int16(); ok {
		_spec.SetField(fieldtype.FieldInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedInt16(); ok {
		_spec.AddField(fieldtype.FieldInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.Int32(); ok {
		_spec.SetField(fieldtype.FieldInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedInt32(); ok {
		_spec.AddField(fieldtype.FieldInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.Int64(); ok {
		_spec.SetField(fieldtype.FieldInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedInt64(); ok {
		_spec.AddField(fieldtype.FieldInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.OptionalInt(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOptionalInt(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt, field.TypeInt, value)
	}
	if u.mutation.OptionalIntCleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt, field.TypeInt)
	}
	if value, ok := u.mutation.OptionalInt8(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedOptionalInt8(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt8, field.TypeInt8, value)
	}
	if u.mutation.OptionalInt8Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.OptionalInt16(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedOptionalInt16(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt16, field.TypeInt16, value)
	}
	if u.mutation.OptionalInt16Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt16, field.TypeInt16)
	}
	if value, ok := u.mutation.OptionalInt32(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedOptionalInt32(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt32, field.TypeInt32, value)
	}
	if u.mutation.OptionalInt32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.OptionalInt64(); ok {
		_spec.SetField(fieldtype.FieldOptionalInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedOptionalInt64(); ok {
		_spec.AddField(fieldtype.FieldOptionalInt64, field.TypeInt64, value)
	}
	if u.mutation.OptionalInt64Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.NillableInt(); ok {
		_spec.SetField(fieldtype.FieldNillableInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedNillableInt(); ok {
		_spec.AddField(fieldtype.FieldNillableInt, field.TypeInt, value)
	}
	if u.mutation.NillableIntCleared() {
		_spec.ClearField(fieldtype.FieldNillableInt, field.TypeInt)
	}
	if value, ok := u.mutation.NillableInt8(); ok {
		_spec.SetField(fieldtype.FieldNillableInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedNillableInt8(); ok {
		_spec.AddField(fieldtype.FieldNillableInt8, field.TypeInt8, value)
	}
	if u.mutation.NillableInt8Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.NillableInt16(); ok {
		_spec.SetField(fieldtype.FieldNillableInt16, field.TypeInt16, value)
	}
	if value, ok := u.mutation.AddedNillableInt16(); ok {
		_spec.AddField(fieldtype.FieldNillableInt16, field.TypeInt16, value)
	}
	if u.mutation.NillableInt16Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt16, field.TypeInt16)
	}
	if value, ok := u.mutation.NillableInt32(); ok {
		_spec.SetField(fieldtype.FieldNillableInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedNillableInt32(); ok {
		_spec.AddField(fieldtype.FieldNillableInt32, field.TypeInt32, value)
	}
	if u.mutation.NillableInt32Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.NillableInt64(); ok {
		_spec.SetField(fieldtype.FieldNillableInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedNillableInt64(); ok {
		_spec.AddField(fieldtype.FieldNillableInt64, field.TypeInt64, value)
	}
	if u.mutation.NillableInt64Cleared() {
		_spec.ClearField(fieldtype.FieldNillableInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.ValidateOptionalInt32(); ok {
		_spec.SetField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32, value)
	}
	if value, ok := u.mutation.AddedValidateOptionalInt32(); ok {
		_spec.AddField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32, value)
	}
	if u.mutation.ValidateOptionalInt32Cleared() {
		_spec.ClearField(fieldtype.FieldValidateOptionalInt32, field.TypeInt32)
	}
	if value, ok := u.mutation.OptionalUint(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint, field.TypeUint, value)
	}
	if value, ok := u.mutation.AddedOptionalUint(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint, field.TypeUint, value)
	}
	if u.mutation.OptionalUintCleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint, field.TypeUint)
	}
	if value, ok := u.mutation.OptionalUint8(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint8, field.TypeUint8, value)
	}
	if value, ok := u.mutation.AddedOptionalUint8(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint8, field.TypeUint8, value)
	}
	if u.mutation.OptionalUint8Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint8, field.TypeUint8)
	}
	if value, ok := u.mutation.OptionalUint16(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint16, field.TypeUint16, value)
	}
	if value, ok := u.mutation.AddedOptionalUint16(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint16, field.TypeUint16, value)
	}
	if u.mutation.OptionalUint16Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint16, field.TypeUint16)
	}
	if value, ok := u.mutation.OptionalUint32(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint32, field.TypeUint32, value)
	}
	if value, ok := u.mutation.AddedOptionalUint32(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint32, field.TypeUint32, value)
	}
	if u.mutation.OptionalUint32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint32, field.TypeUint32)
	}
	if value, ok := u.mutation.OptionalUint64(); ok {
		_spec.SetField(fieldtype.FieldOptionalUint64, field.TypeUint64, value)
	}
	if value, ok := u.mutation.AddedOptionalUint64(); ok {
		_spec.AddField(fieldtype.FieldOptionalUint64, field.TypeUint64, value)
	}
	if u.mutation.OptionalUint64Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalUint64, field.TypeUint64)
	}
	if value, ok := u.mutation.State(); ok {
		_spec.SetField(fieldtype.FieldState, field.TypeEnum, value)
	}
	if u.mutation.StateCleared() {
		_spec.ClearField(fieldtype.FieldState, field.TypeEnum)
	}
	if value, ok := u.mutation.OptionalFloat(); ok {
		_spec.SetField(fieldtype.FieldOptionalFloat, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedOptionalFloat(); ok {
		_spec.AddField(fieldtype.FieldOptionalFloat, field.TypeFloat64, value)
	}
	if u.mutation.OptionalFloatCleared() {
		_spec.ClearField(fieldtype.FieldOptionalFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.OptionalFloat32(); ok {
		_spec.SetField(fieldtype.FieldOptionalFloat32, field.TypeFloat32, value)
	}
	if value, ok := u.mutation.AddedOptionalFloat32(); ok {
		_spec.AddField(fieldtype.FieldOptionalFloat32, field.TypeFloat32, value)
	}
	if u.mutation.OptionalFloat32Cleared() {
		_spec.ClearField(fieldtype.FieldOptionalFloat32, field.TypeFloat32)
	}
	if value, ok := u.mutation.Text(); ok {
		_spec.SetField(fieldtype.FieldText, field.TypeString, value)
	}
	if u.mutation.TextCleared() {
		_spec.ClearField(fieldtype.FieldText, field.TypeString)
	}
	if value, ok := u.mutation.Datetime(); ok {
		_spec.SetField(fieldtype.FieldDatetime, field.TypeTime, value)
	}
	if u.mutation.DatetimeCleared() {
		_spec.ClearField(fieldtype.FieldDatetime, field.TypeTime)
	}
	if value, ok := u.mutation.Decimal(); ok {
		_spec.SetField(fieldtype.FieldDecimal, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedDecimal(); ok {
		_spec.AddField(fieldtype.FieldDecimal, field.TypeFloat64, value)
	}
	if u.mutation.DecimalCleared() {
		_spec.ClearField(fieldtype.FieldDecimal, field.TypeFloat64)
	}
	if value, ok := u.mutation.LinkOther(); ok {
		_spec.SetField(fieldtype.FieldLinkOther, field.TypeOther, value)
	}
	if u.mutation.LinkOtherCleared() {
		_spec.ClearField(fieldtype.FieldLinkOther, field.TypeOther)
	}
	if value, ok := u.mutation.LinkOtherFunc(); ok {
		_spec.SetField(fieldtype.FieldLinkOtherFunc, field.TypeOther, value)
	}
	if u.mutation.LinkOtherFuncCleared() {
		_spec.ClearField(fieldtype.FieldLinkOtherFunc, field.TypeOther)
	}
	if value, ok := u.mutation.MAC(); ok {
		_spec.SetField(fieldtype.FieldMAC, field.TypeString, value)
	}
	if u.mutation.MACCleared() {
		_spec.ClearField(fieldtype.FieldMAC, field.TypeString)
	}
	if value, ok := u.mutation.StringArray(); ok {
		_spec.SetField(fieldtype.FieldStringArray, field.TypeOther, value)
	}
	if u.mutation.StringArrayCleared() {
		_spec.ClearField(fieldtype.FieldStringArray, field.TypeOther)
	}
	if value, ok := u.mutation.Password(); ok {
		_spec.SetField(fieldtype.FieldPassword, field.TypeString, value)
	}
	if u.mutation.PasswordCleared() {
		_spec.ClearField(fieldtype.FieldPassword, field.TypeString)
	}
	if value, ok := u.mutation.StringScanner(); ok {
		_spec.SetField(fieldtype.FieldStringScanner, field.TypeString, value)
	}
	if u.mutation.StringScannerCleared() {
		_spec.ClearField(fieldtype.FieldStringScanner, field.TypeString)
	}
	if value, ok := u.mutation.Duration(); ok {
		_spec.SetField(fieldtype.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedDuration(); ok {
		_spec.AddField(fieldtype.FieldDuration, field.TypeInt64, value)
	}
	if u.mutation.DurationCleared() {
		_spec.ClearField(fieldtype.FieldDuration, field.TypeInt64)
	}
	if value, ok := u.mutation.Dir(); ok {
		_spec.SetField(fieldtype.FieldDir, field.TypeString, value)
	}
	if value, ok := u.mutation.Ndir(); ok {
		_spec.SetField(fieldtype.FieldNdir, field.TypeString, value)
	}
	if u.mutation.NdirCleared() {
		_spec.ClearField(fieldtype.FieldNdir, field.TypeString)
	}
	if value, ok := u.mutation.Str(); ok {
		_spec.SetField(fieldtype.FieldStr, field.TypeString, value)
	}
	if u.mutation.StrCleared() {
		_spec.ClearField(fieldtype.FieldStr, field.TypeString)
	}
	if value, ok := u.mutation.NullStr(); ok {
		_spec.SetField(fieldtype.FieldNullStr, field.TypeString, value)
	}
	if u.mutation.NullStrCleared() {
		_spec.ClearField(fieldtype.FieldNullStr, field.TypeString)
	}
	if value, ok := u.mutation.Link(); ok {
		_spec.SetField(fieldtype.FieldLink, field.TypeString, value)
	}
	if u.mutation.LinkCleared() {
		_spec.ClearField(fieldtype.FieldLink, field.TypeString)
	}
	if value, ok := u.mutation.NullLink(); ok {
		_spec.SetField(fieldtype.FieldNullLink, field.TypeString, value)
	}
	if u.mutation.NullLinkCleared() {
		_spec.ClearField(fieldtype.FieldNullLink, field.TypeString)
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(fieldtype.FieldActive, field.TypeBool, value)
	}
	if u.mutation.ActiveCleared() {
		_spec.ClearField(fieldtype.FieldActive, field.TypeBool)
	}
	if value, ok := u.mutation.NullActive(); ok {
		_spec.SetField(fieldtype.FieldNullActive, field.TypeBool, value)
	}
	if u.mutation.NullActiveCleared() {
		_spec.ClearField(fieldtype.FieldNullActive, field.TypeBool)
	}
	if value, ok := u.mutation.Deleted(); ok {
		_spec.SetField(fieldtype.FieldDeleted, field.TypeBool, value)
	}
	if u.mutation.DeletedCleared() {
		_spec.ClearField(fieldtype.FieldDeleted, field.TypeBool)
	}
	if value, ok := u.mutation.DeletedAt(); ok {
		_spec.SetField(fieldtype.FieldDeletedAt, field.TypeTime, value)
	}
	if u.mutation.DeletedAtCleared() {
		_spec.ClearField(fieldtype.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := u.mutation.RawData(); ok {
		_spec.SetField(fieldtype.FieldRawData, field.TypeBytes, value)
	}
	if u.mutation.RawDataCleared() {
		_spec.ClearField(fieldtype.FieldRawData, field.TypeBytes)
	}
	if value, ok := u.mutation.Sensitive(); ok {
		_spec.SetField(fieldtype.FieldSensitive, field.TypeBytes, value)
	}
	if u.mutation.SensitiveCleared() {
		_spec.ClearField(fieldtype.FieldSensitive, field.TypeBytes)
	}
	if value, ok := u.mutation.IP(); ok {
		_spec.SetField(fieldtype.FieldIP, field.TypeBytes, value)
	}
	if u.mutation.IPCleared() {
		_spec.ClearField(fieldtype.FieldIP, field.TypeBytes)
	}
	if value, ok := u.mutation.NullInt64(); ok {
		_spec.SetField(fieldtype.FieldNullInt64, field.TypeInt, value)
	}
	if u.mutation.NullInt64Cleared() {
		_spec.ClearField(fieldtype.FieldNullInt64, field.TypeInt)
	}
	if value, ok := u.mutation.SchemaInt(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedSchemaInt(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt, field.TypeInt, value)
	}
	if u.mutation.SchemaIntCleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt, field.TypeInt)
	}
	if value, ok := u.mutation.SchemaInt8(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt8, field.TypeInt8, value)
	}
	if value, ok := u.mutation.AddedSchemaInt8(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt8, field.TypeInt8, value)
	}
	if u.mutation.SchemaInt8Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt8, field.TypeInt8)
	}
	if value, ok := u.mutation.SchemaInt64(); ok {
		_spec.SetField(fieldtype.FieldSchemaInt64, field.TypeInt64, value)
	}
	if value, ok := u.mutation.AddedSchemaInt64(); ok {
		_spec.AddField(fieldtype.FieldSchemaInt64, field.TypeInt64, value)
	}
	if u.mutation.SchemaInt64Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaInt64, field.TypeInt64)
	}
	if value, ok := u.mutation.SchemaFloat(); ok {
		_spec.SetField(fieldtype.FieldSchemaFloat, field.TypeFloat64, value)
	}
	if value, ok := u.mutation.AddedSchemaFloat(); ok {
		_spec.AddField(fieldtype.FieldSchemaFloat, field.TypeFloat64, value)
	}
	if u.mutation.SchemaFloatCleared() {
		_spec.ClearField(fieldtype.FieldSchemaFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.SchemaFloat32(); ok {
		_spec.SetField(fieldtype.FieldSchemaFloat32, field.TypeFloat32, value)
	}
	if value, ok := u.mutation.AddedSchemaFloat32(); ok {
		_spec.AddField(fieldtype.FieldSchemaFloat32, field.TypeFloat32, value)
	}
	if u.mutation.SchemaFloat32Cleared() {
		_spec.ClearField(fieldtype.FieldSchemaFloat32, field.TypeFloat32)
	}
	if value, ok := u.mutation.NullFloat(); ok {
		_spec.SetField(fieldtype.FieldNullFloat, field.TypeFloat64, value)
	}
	if u.mutation.NullFloatCleared() {
		_spec.ClearField(fieldtype.FieldNullFloat, field.TypeFloat64)
	}
	if value, ok := u.mutation.Role(); ok {
		_spec.SetField(fieldtype.FieldRole, field.TypeEnum, value)
	}
	if value, ok := u.mutation.Priority(); ok {
		_spec.SetField(fieldtype.FieldPriority, field.TypeEnum, value)
	}
	if u.mutation.PriorityCleared() {
		_spec.ClearField(fieldtype.FieldPriority, field.TypeEnum)
	}
	if value, ok := u.mutation.OptionalUUID(); ok {
		_spec.SetField(fieldtype.FieldOptionalUUID, field.TypeUUID, value)
	}
	if u.mutation.OptionalUUIDCleared() {
		_spec.ClearField(fieldtype.FieldOptionalUUID, field.TypeUUID)
	}
	if value, ok := u.mutation.NillableUUID(); ok {
		_spec.SetField(fieldtype.FieldNillableUUID, field.TypeUUID, value)
	}
	if u.mutation.NillableUUIDCleared() {
		_spec.ClearField(fieldtype.FieldNillableUUID, field.TypeUUID)
	}
	if value, ok := u.mutation.Strings(); ok {
		_spec.SetField(fieldtype.FieldStrings, field.TypeJSON, value)
	}
	if value, ok := u.mutation.AppendedStrings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fieldtype.FieldStrings, value)
		})
	}
	if u.mutation.StringsCleared() {
		_spec.ClearField(fieldtype.FieldStrings, field.TypeJSON)
	}
	if value, ok := u.mutation.Pair(); ok {
		_spec.SetField(fieldtype.FieldPair, field.TypeBytes, value)
	}
	if value, ok := u.mutation.NilPair(); ok {
		_spec.SetField(fieldtype.FieldNilPair, field.TypeBytes, value)
	}
	if u.mutation.NilPairCleared() {
		_spec.ClearField(fieldtype.FieldNilPair, field.TypeBytes)
	}
	if value, ok := u.mutation.Vstring(); ok {
		_spec.SetField(fieldtype.FieldVstring, field.TypeString, value)
	}
	if value, ok := u.mutation.Triple(); ok {
		_spec.SetField(fieldtype.FieldTriple, field.TypeString, value)
	}
	if value, ok := u.mutation.BigInt(); ok {
		_spec.SetField(fieldtype.FieldBigInt, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedBigInt(); ok {
		_spec.AddField(fieldtype.FieldBigInt, field.TypeInt, value)
	}
	if u.mutation.BigIntCleared() {
		_spec.ClearField(fieldtype.FieldBigInt, field.TypeInt)
	}
	if value, ok := u.mutation.PasswordOther(); ok {
		_spec.SetField(fieldtype.FieldPasswordOther, field.TypeOther, value)
	}
	if u.mutation.PasswordOtherCleared() {
		_spec.ClearField(fieldtype.FieldPasswordOther, field.TypeOther)
	}
	_spec.AddModifiers(u.modifiers...)
	_n = &FieldType{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fieldtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
