// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math/big"
	"net/url"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/exvaluescan"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/schema/field"
)

// ExValueScanUpdate is the builder for updating ExValueScan entities.
type ExValueScanUpdate struct {
	config
	hooks     []Hook
	mutation  *ExValueScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExValueScanUpdate builder.
func (_u *ExValueScanUpdate) Where(ps ...predicate.ExValueScan) *ExValueScanUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetBinary sets the "binary" field.
func (_u *ExValueScanUpdate) SetBinary(v *url.URL) *ExValueScanUpdate {
	_u.mutation.SetBinary(v)
	return _u
}

// SetBinaryBytes sets the "binary_bytes" field.
func (_u *ExValueScanUpdate) SetBinaryBytes(v *url.URL) *ExValueScanUpdate {
	_u.mutation.SetBinaryBytes(v)
	return _u
}

// SetBinaryOptional sets the "binary_optional" field.
func (_u *ExValueScanUpdate) SetBinaryOptional(v *url.URL) *ExValueScanUpdate {
	_u.mutation.SetBinaryOptional(v)
	return _u
}

// ClearBinaryOptional clears the value of the "binary_optional" field.
func (_u *ExValueScanUpdate) ClearBinaryOptional() *ExValueScanUpdate {
	_u.mutation.ClearBinaryOptional()
	return _u
}

// SetText sets the "text" field.
func (_u *ExValueScanUpdate) SetText(v *big.Int) *ExValueScanUpdate {
	_u.mutation.SetText(v)
	return _u
}

// SetTextOptional sets the "text_optional" field.
func (_u *ExValueScanUpdate) SetTextOptional(v *big.Int) *ExValueScanUpdate {
	_u.mutation.SetTextOptional(v)
	return _u
}

// ClearTextOptional clears the value of the "text_optional" field.
func (_u *ExValueScanUpdate) ClearTextOptional() *ExValueScanUpdate {
	_u.mutation.ClearTextOptional()
	return _u
}

// SetBase64 sets the "base64" field.
func (_u *ExValueScanUpdate) SetBase64(v string) *ExValueScanUpdate {
	_u.mutation.SetBase64(v)
	return _u
}

// SetNillableBase64 sets the "base64" field if the given value is not nil.
func (_u *ExValueScanUpdate) SetNillableBase64(v *string) *ExValueScanUpdate {
	if v != nil {
		_u.SetBase64(*v)
	}
	return _u
}

// SetCustom sets the "custom" field.
func (_u *ExValueScanUpdate) SetCustom(v string) *ExValueScanUpdate {
	_u.mutation.SetCustom(v)
	return _u
}

// SetNillableCustom sets the "custom" field if the given value is not nil.
func (_u *ExValueScanUpdate) SetNillableCustom(v *string) *ExValueScanUpdate {
	if v != nil {
		_u.SetCustom(*v)
	}
	return _u
}

// SetCustomOptional sets the "custom_optional" field.
func (_u *ExValueScanUpdate) SetCustomOptional(v string) *ExValueScanUpdate {
	_u.mutation.SetCustomOptional(v)
	return _u
}

// SetNillableCustomOptional sets the "custom_optional" field if the given value is not nil.
func (_u *ExValueScanUpdate) SetNillableCustomOptional(v *string) *ExValueScanUpdate {
	if v != nil {
		_u.SetCustomOptional(*v)
	}
	return _u
}

// ClearCustomOptional clears the value of the "custom_optional" field.
func (_u *ExValueScanUpdate) ClearCustomOptional() *ExValueScanUpdate {
	_u.mutation.ClearCustomOptional()
	return _u
}

// Mutation returns the ExValueScanMutation object of the builder.
func (_u *ExValueScanUpdate) Mutation() *ExValueScanMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ExValueScanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExValueScanUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ExValueScanUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExValueScanUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ExValueScanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExValueScanUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ExValueScanUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exvaluescan.Table, exvaluescan.Columns, sqlgraph.NewFieldSpec(exvaluescan.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Binary(); ok {
		vv, err := exvaluescan.ValueScanner.Binary.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldBinary, field.TypeString, vv)
	}
	if value, ok := _u.mutation.BinaryBytes(); ok {
		vv, err := exvaluescan.ValueScanner.BinaryBytes.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldBinaryBytes, field.TypeBytes, vv)
	}
	if value, ok := _u.mutation.BinaryOptional(); ok {
		vv, err := exvaluescan.ValueScanner.BinaryOptional.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldBinaryOptional, field.TypeString, vv)
	}
	if _u.mutation.BinaryOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldBinaryOptional, field.TypeString)
	}
	if value, ok := _u.mutation.Text(); ok {
		vv, err := exvaluescan.ValueScanner.Text.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldText, field.TypeString, vv)
	}
	if value, ok := _u.mutation.TextOptional(); ok {
		vv, err := exvaluescan.ValueScanner.TextOptional.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldTextOptional, field.TypeString, vv)
	}
	if _u.mutation.TextOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldTextOptional, field.TypeString)
	}
	if value, ok := _u.mutation.Base64(); ok {
		vv, err := exvaluescan.ValueScanner.Base64.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldBase64, field.TypeString, vv)
	}
	if value, ok := _u.mutation.Custom(); ok {
		vv, err := exvaluescan.ValueScanner.Custom.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldCustom, field.TypeString, vv)
	}
	if value, ok := _u.mutation.CustomOptional(); ok {
		vv, err := exvaluescan.ValueScanner.CustomOptional.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(exvaluescan.FieldCustomOptional, field.TypeString, vv)
	}
	if _u.mutation.CustomOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldCustomOptional, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exvaluescan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ExValueScanUpdateOne is the builder for updating a single ExValueScan entity.
type ExValueScanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExValueScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetBinary sets the "binary" field.
func (_u *ExValueScanUpdateOne) SetBinary(v *url.URL) *ExValueScanUpdateOne {
	_u.mutation.SetBinary(v)
	return _u
}

// SetBinaryBytes sets the "binary_bytes" field.
func (_u *ExValueScanUpdateOne) SetBinaryBytes(v *url.URL) *ExValueScanUpdateOne {
	_u.mutation.SetBinaryBytes(v)
	return _u
}

// SetBinaryOptional sets the "binary_optional" field.
func (_u *ExValueScanUpdateOne) SetBinaryOptional(v *url.URL) *ExValueScanUpdateOne {
	_u.mutation.SetBinaryOptional(v)
	return _u
}

// ClearBinaryOptional clears the value of the "binary_optional" field.
func (_u *ExValueScanUpdateOne) ClearBinaryOptional() *ExValueScanUpdateOne {
	_u.mutation.ClearBinaryOptional()
	return _u
}

// SetText sets the "text" field.
func (_u *ExValueScanUpdateOne) SetText(v *big.Int) *ExValueScanUpdateOne {
	_u.mutation.SetText(v)
	return _u
}

// SetTextOptional sets the "text_optional" field.
func (_u *ExValueScanUpdateOne) SetTextOptional(v *big.Int) *ExValueScanUpdateOne {
	_u.mutation.SetTextOptional(v)
	return _u
}

// ClearTextOptional clears the value of the "text_optional" field.
func (_u *ExValueScanUpdateOne) ClearTextOptional() *ExValueScanUpdateOne {
	_u.mutation.ClearTextOptional()
	return _u
}

// SetBase64 sets the "base64" field.
func (_u *ExValueScanUpdateOne) SetBase64(v string) *ExValueScanUpdateOne {
	_u.mutation.SetBase64(v)
	return _u
}

// SetNillableBase64 sets the "base64" field if the given value is not nil.
func (_u *ExValueScanUpdateOne) SetNillableBase64(v *string) *ExValueScanUpdateOne {
	if v != nil {
		_u.SetBase64(*v)
	}
	return _u
}

// SetCustom sets the "custom" field.
func (_u *ExValueScanUpdateOne) SetCustom(v string) *ExValueScanUpdateOne {
	_u.mutation.SetCustom(v)
	return _u
}

// SetNillableCustom sets the "custom" field if the given value is not nil.
func (_u *ExValueScanUpdateOne) SetNillableCustom(v *string) *ExValueScanUpdateOne {
	if v != nil {
		_u.SetCustom(*v)
	}
	return _u
}

// SetCustomOptional sets the "custom_optional" field.
func (_u *ExValueScanUpdateOne) SetCustomOptional(v string) *ExValueScanUpdateOne {
	_u.mutation.SetCustomOptional(v)
	return _u
}

// SetNillableCustomOptional sets the "custom_optional" field if the given value is not nil.
func (_u *ExValueScanUpdateOne) SetNillableCustomOptional(v *string) *ExValueScanUpdateOne {
	if v != nil {
		_u.SetCustomOptional(*v)
	}
	return _u
}

// ClearCustomOptional clears the value of the "custom_optional" field.
func (_u *ExValueScanUpdateOne) ClearCustomOptional() *ExValueScanUpdateOne {
	_u.mutation.ClearCustomOptional()
	return _u
}

// Mutation returns the ExValueScanMutation object of the builder.
func (_u *ExValueScanUpdateOne) Mutation() *ExValueScanMutation {
	return _u.mutation
}

// Where appends a list predicates to the ExValueScanUpdate builder.
func (_u *ExValueScanUpdateOne) Where(ps ...predicate.ExValueScan) *ExValueScanUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ExValueScanUpdateOne) Select(field string, fields ...string) *ExValueScanUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ExValueScan entity.
func (_u *ExValueScanUpdateOne) Save(ctx context.Context) (*ExValueScan, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ExValueScanUpdateOne) SaveX(ctx context.Context) *ExValueScan {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ExValueScanUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ExValueScanUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ExValueScanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExValueScanUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ExValueScanUpdateOne) sqlSave(ctx context.Context) (_node *ExValueScan, err error) {
	_spec := sqlgraph.NewUpdateSpec(exvaluescan.Table, exvaluescan.Columns, sqlgraph.NewFieldSpec(exvaluescan.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExValueScan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exvaluescan.FieldID)
		for _, f := range fields {
			if !exvaluescan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exvaluescan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Binary(); ok {
		vv, err := exvaluescan.ValueScanner.Binary.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldBinary, field.TypeString, vv)
	}
	if value, ok := _u.mutation.BinaryBytes(); ok {
		vv, err := exvaluescan.ValueScanner.BinaryBytes.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldBinaryBytes, field.TypeBytes, vv)
	}
	if value, ok := _u.mutation.BinaryOptional(); ok {
		vv, err := exvaluescan.ValueScanner.BinaryOptional.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldBinaryOptional, field.TypeString, vv)
	}
	if _u.mutation.BinaryOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldBinaryOptional, field.TypeString)
	}
	if value, ok := _u.mutation.Text(); ok {
		vv, err := exvaluescan.ValueScanner.Text.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldText, field.TypeString, vv)
	}
	if value, ok := _u.mutation.TextOptional(); ok {
		vv, err := exvaluescan.ValueScanner.TextOptional.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldTextOptional, field.TypeString, vv)
	}
	if _u.mutation.TextOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldTextOptional, field.TypeString)
	}
	if value, ok := _u.mutation.Base64(); ok {
		vv, err := exvaluescan.ValueScanner.Base64.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldBase64, field.TypeString, vv)
	}
	if value, ok := _u.mutation.Custom(); ok {
		vv, err := exvaluescan.ValueScanner.Custom.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldCustom, field.TypeString, vv)
	}
	if value, ok := _u.mutation.CustomOptional(); ok {
		vv, err := exvaluescan.ValueScanner.CustomOptional.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(exvaluescan.FieldCustomOptional, field.TypeString, vv)
	}
	if _u.mutation.CustomOptionalCleared() {
		_spec.ClearField(exvaluescan.FieldCustomOptional, field.TypeString)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &ExValueScan{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exvaluescan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
