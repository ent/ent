// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/socialprofile"
	"entgo.io/ent/entc/integration/ent/user"
	"entgo.io/ent/schema/field"
)

// SocialProfileUpdate is the builder for updating SocialProfile entities.
type SocialProfileUpdate struct {
	config
	hooks     []Hook
	mutation  *SocialProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SocialProfileUpdate builder.
func (spu *SocialProfileUpdate) Where(ps ...predicate.SocialProfile) *SocialProfileUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetDesc sets the "desc" field.
func (spu *SocialProfileUpdate) SetDesc(s string) *SocialProfileUpdate {
	spu.mutation.SetDesc(s)
	return spu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spu *SocialProfileUpdate) SetUserID(id int) *SocialProfileUpdate {
	spu.mutation.SetUserID(id)
	return spu
}

// SetUser sets the "user" edge to the User entity.
func (spu *SocialProfileUpdate) SetUser(u *User) *SocialProfileUpdate {
	return spu.SetUserID(u.ID)
}

// Mutation returns the SocialProfileMutation object of the builder.
func (spu *SocialProfileUpdate) Mutation() *SocialProfileMutation {
	return spu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spu *SocialProfileUpdate) ClearUser() *SocialProfileUpdate {
	spu.mutation.ClearUser()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SocialProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SocialProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SocialProfileUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SocialProfileUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SocialProfileUpdate) check() error {
	if _, ok := spu.mutation.UserID(); spu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SocialProfile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *SocialProfileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SocialProfileUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *SocialProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(socialprofile.Table, socialprofile.Columns, sqlgraph.NewFieldSpec(socialprofile.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Desc(); ok {
		_spec.SetField(socialprofile.FieldDesc, field.TypeString, value)
	}
	if spu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialprofile.UserTable,
			Columns: []string{socialprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
			RefRequired: false,
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialprofile.UserTable,
			Columns: []string{socialprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
			RefRequired: false,
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(spu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SocialProfileUpdateOne is the builder for updating a single SocialProfile entity.
type SocialProfileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SocialProfileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDesc sets the "desc" field.
func (spuo *SocialProfileUpdateOne) SetDesc(s string) *SocialProfileUpdateOne {
	spuo.mutation.SetDesc(s)
	return spuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spuo *SocialProfileUpdateOne) SetUserID(id int) *SocialProfileUpdateOne {
	spuo.mutation.SetUserID(id)
	return spuo
}

// SetUser sets the "user" edge to the User entity.
func (spuo *SocialProfileUpdateOne) SetUser(u *User) *SocialProfileUpdateOne {
	return spuo.SetUserID(u.ID)
}

// Mutation returns the SocialProfileMutation object of the builder.
func (spuo *SocialProfileUpdateOne) Mutation() *SocialProfileMutation {
	return spuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *SocialProfileUpdateOne) ClearUser() *SocialProfileUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// Where appends a list predicates to the SocialProfileUpdate builder.
func (spuo *SocialProfileUpdateOne) Where(ps ...predicate.SocialProfile) *SocialProfileUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SocialProfileUpdateOne) Select(field string, fields ...string) *SocialProfileUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SocialProfile entity.
func (spuo *SocialProfileUpdateOne) Save(ctx context.Context) (*SocialProfile, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SocialProfileUpdateOne) SaveX(ctx context.Context) *SocialProfile {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SocialProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SocialProfileUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SocialProfileUpdateOne) check() error {
	if _, ok := spuo.mutation.UserID(); spuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SocialProfile.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *SocialProfileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SocialProfileUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *SocialProfileUpdateOne) sqlSave(ctx context.Context) (_node *SocialProfile, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(socialprofile.Table, socialprofile.Columns, sqlgraph.NewFieldSpec(socialprofile.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SocialProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, socialprofile.FieldID)
		for _, f := range fields {
			if !socialprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != socialprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Desc(); ok {
		_spec.SetField(socialprofile.FieldDesc, field.TypeString, value)
	}
	if spuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialprofile.UserTable,
			Columns: []string{socialprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
			RefRequired: false,
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   socialprofile.UserTable,
			Columns: []string{socialprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
			RefRequired: false,
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(spuo.modifiers...)
	_node = &SocialProfile{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{socialprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
