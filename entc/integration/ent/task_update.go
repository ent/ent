// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/schema/task"
	enttask "entgo.io/ent/entc/integration/ent/task"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetPriority sets the "priority" field.
func (m *TaskUpdate) SetPriority(v task.Priority) *TaskUpdate {
	m.mutation.ResetPriority()
	m.mutation.SetPriority(v)
	return m
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (m *TaskUpdate) SetNillablePriority(v *task.Priority) *TaskUpdate {
	if v != nil {
		m.SetPriority(*v)
	}
	return m
}

// AddPriority adds value to the "priority" field.
func (m *TaskUpdate) AddPriority(v task.Priority) *TaskUpdate {
	m.mutation.AddPriority(v)
	return m
}

// SetPriorities sets the "priorities" field.
func (m *TaskUpdate) SetPriorities(v map[string]task.Priority) *TaskUpdate {
	m.mutation.SetPriorities(v)
	return m
}

// ClearPriorities clears the value of the "priorities" field.
func (m *TaskUpdate) ClearPriorities() *TaskUpdate {
	m.mutation.ClearPriorities()
	return m
}

// SetName sets the "name" field.
func (m *TaskUpdate) SetName(v string) *TaskUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *TaskUpdate) SetNillableName(v *string) *TaskUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// ClearName clears the value of the "name" field.
func (m *TaskUpdate) ClearName() *TaskUpdate {
	m.mutation.ClearName()
	return m
}

// SetOwner sets the "owner" field.
func (m *TaskUpdate) SetOwner(v string) *TaskUpdate {
	m.mutation.SetOwner(v)
	return m
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (m *TaskUpdate) SetNillableOwner(v *string) *TaskUpdate {
	if v != nil {
		m.SetOwner(*v)
	}
	return m
}

// ClearOwner clears the value of the "owner" field.
func (m *TaskUpdate) ClearOwner() *TaskUpdate {
	m.mutation.ClearOwner()
	return m
}

// SetOrder sets the "order" field.
func (m *TaskUpdate) SetOrder(v int) *TaskUpdate {
	m.mutation.ResetOrder()
	m.mutation.SetOrder(v)
	return m
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (m *TaskUpdate) SetNillableOrder(v *int) *TaskUpdate {
	if v != nil {
		m.SetOrder(*v)
	}
	return m
}

// AddOrder adds value to the "order" field.
func (m *TaskUpdate) AddOrder(v int) *TaskUpdate {
	m.mutation.AddOrder(v)
	return m
}

// ClearOrder clears the value of the "order" field.
func (m *TaskUpdate) ClearOrder() *TaskUpdate {
	m.mutation.ClearOrder()
	return m
}

// SetOrderOption sets the "order_option" field.
func (m *TaskUpdate) SetOrderOption(v int) *TaskUpdate {
	m.mutation.ResetOrderOption()
	m.mutation.SetOrderOption(v)
	return m
}

// SetNillableOrderOption sets the "order_option" field if the given value is not nil.
func (m *TaskUpdate) SetNillableOrderOption(v *int) *TaskUpdate {
	if v != nil {
		m.SetOrderOption(*v)
	}
	return m
}

// AddOrderOption adds value to the "order_option" field.
func (m *TaskUpdate) AddOrderOption(v int) *TaskUpdate {
	m.mutation.AddOrderOption(v)
	return m
}

// ClearOrderOption clears the value of the "order_option" field.
func (m *TaskUpdate) ClearOrderOption() *TaskUpdate {
	m.mutation.ClearOrderOption()
	return m
}

// SetOp sets the "op" field.
func (m *TaskUpdate) SetOp(v string) *TaskUpdate {
	m.mutation.SetOpField(v)
	return m
}

// SetNillableOp sets the "op" field if the given value is not nil.
func (m *TaskUpdate) SetNillableOp(v *string) *TaskUpdate {
	if v != nil {
		m.SetOp(*v)
	}
	return m
}

// Mutation returns the TaskMutation object of the builder.
func (m *TaskUpdate) Mutation() *TaskMutation {
	return m.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *TaskUpdate) check() error {
	if v, ok := u.mutation.Priority(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := u.mutation.GetOp(); ok {
		if err := enttask.OpValidator(v); err != nil {
			return &ValidationError{Name: "op", err: fmt.Errorf(`ent: validator failed for field "Task.op": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *TaskUpdate) Modify(modifiers ...func(*sql.UpdateBuilder)) *TaskUpdate {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *TaskUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enttask.Table, enttask.Columns, sqlgraph.NewFieldSpec(enttask.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Priority(); ok {
		_spec.SetField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedPriority(); ok {
		_spec.AddField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := u.mutation.Priorities(); ok {
		_spec.SetField(enttask.FieldPriorities, field.TypeJSON, value)
	}
	if u.mutation.PrioritiesCleared() {
		_spec.ClearField(enttask.FieldPriorities, field.TypeJSON)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(enttask.FieldName, field.TypeString, value)
	}
	if u.mutation.NameCleared() {
		_spec.ClearField(enttask.FieldName, field.TypeString)
	}
	if value, ok := u.mutation.Owner(); ok {
		_spec.SetField(enttask.FieldOwner, field.TypeString, value)
	}
	if u.mutation.OwnerCleared() {
		_spec.ClearField(enttask.FieldOwner, field.TypeString)
	}
	if value, ok := u.mutation.Order(); ok {
		_spec.SetField(enttask.FieldOrder, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOrder(); ok {
		_spec.AddField(enttask.FieldOrder, field.TypeInt, value)
	}
	if u.mutation.OrderCleared() {
		_spec.ClearField(enttask.FieldOrder, field.TypeInt)
	}
	if value, ok := u.mutation.OrderOption(); ok {
		_spec.SetField(enttask.FieldOrderOption, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOrderOption(); ok {
		_spec.AddField(enttask.FieldOrderOption, field.TypeInt, value)
	}
	if u.mutation.OrderOptionCleared() {
		_spec.ClearField(enttask.FieldOrderOption, field.TypeInt)
	}
	if value, ok := u.mutation.GetOp(); ok {
		_spec.SetField(enttask.FieldOp, field.TypeString, value)
	}
	_spec.AddModifiers(u.modifiers...)
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPriority sets the "priority" field.
func (m *TaskUpdateOne) SetPriority(v task.Priority) *TaskUpdateOne {
	m.mutation.ResetPriority()
	m.mutation.SetPriority(v)
	return m
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillablePriority(v *task.Priority) *TaskUpdateOne {
	if v != nil {
		m.SetPriority(*v)
	}
	return m
}

// AddPriority adds value to the "priority" field.
func (m *TaskUpdateOne) AddPriority(v task.Priority) *TaskUpdateOne {
	m.mutation.AddPriority(v)
	return m
}

// SetPriorities sets the "priorities" field.
func (m *TaskUpdateOne) SetPriorities(v map[string]task.Priority) *TaskUpdateOne {
	m.mutation.SetPriorities(v)
	return m
}

// ClearPriorities clears the value of the "priorities" field.
func (m *TaskUpdateOne) ClearPriorities() *TaskUpdateOne {
	m.mutation.ClearPriorities()
	return m
}

// SetName sets the "name" field.
func (m *TaskUpdateOne) SetName(v string) *TaskUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableName(v *string) *TaskUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// ClearName clears the value of the "name" field.
func (m *TaskUpdateOne) ClearName() *TaskUpdateOne {
	m.mutation.ClearName()
	return m
}

// SetOwner sets the "owner" field.
func (m *TaskUpdateOne) SetOwner(v string) *TaskUpdateOne {
	m.mutation.SetOwner(v)
	return m
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableOwner(v *string) *TaskUpdateOne {
	if v != nil {
		m.SetOwner(*v)
	}
	return m
}

// ClearOwner clears the value of the "owner" field.
func (m *TaskUpdateOne) ClearOwner() *TaskUpdateOne {
	m.mutation.ClearOwner()
	return m
}

// SetOrder sets the "order" field.
func (m *TaskUpdateOne) SetOrder(v int) *TaskUpdateOne {
	m.mutation.ResetOrder()
	m.mutation.SetOrder(v)
	return m
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableOrder(v *int) *TaskUpdateOne {
	if v != nil {
		m.SetOrder(*v)
	}
	return m
}

// AddOrder adds value to the "order" field.
func (m *TaskUpdateOne) AddOrder(v int) *TaskUpdateOne {
	m.mutation.AddOrder(v)
	return m
}

// ClearOrder clears the value of the "order" field.
func (m *TaskUpdateOne) ClearOrder() *TaskUpdateOne {
	m.mutation.ClearOrder()
	return m
}

// SetOrderOption sets the "order_option" field.
func (m *TaskUpdateOne) SetOrderOption(v int) *TaskUpdateOne {
	m.mutation.ResetOrderOption()
	m.mutation.SetOrderOption(v)
	return m
}

// SetNillableOrderOption sets the "order_option" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableOrderOption(v *int) *TaskUpdateOne {
	if v != nil {
		m.SetOrderOption(*v)
	}
	return m
}

// AddOrderOption adds value to the "order_option" field.
func (m *TaskUpdateOne) AddOrderOption(v int) *TaskUpdateOne {
	m.mutation.AddOrderOption(v)
	return m
}

// ClearOrderOption clears the value of the "order_option" field.
func (m *TaskUpdateOne) ClearOrderOption() *TaskUpdateOne {
	m.mutation.ClearOrderOption()
	return m
}

// SetOp sets the "op" field.
func (m *TaskUpdateOne) SetOp(v string) *TaskUpdateOne {
	m.mutation.SetOpField(v)
	return m
}

// SetNillableOp sets the "op" field if the given value is not nil.
func (m *TaskUpdateOne) SetNillableOp(v *string) *TaskUpdateOne {
	if v != nil {
		m.SetOp(*v)
	}
	return m
}

// Mutation returns the TaskMutation object of the builder.
func (m *TaskUpdateOne) Mutation() *TaskMutation {
	return m.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Task entity.
func (u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *TaskUpdateOne) check() error {
	if v, ok := u.mutation.Priority(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := u.mutation.GetOp(); ok {
		if err := enttask.OpValidator(v); err != nil {
			return &ValidationError{Name: "op", err: fmt.Errorf(`ent: validator failed for field "Task.op": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *TaskUpdateOne) Modify(modifiers ...func(*sql.UpdateBuilder)) *TaskUpdateOne {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *TaskUpdateOne) sqlSave(ctx context.Context) (_n *Task, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enttask.Table, enttask.Columns, sqlgraph.NewFieldSpec(enttask.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttask.FieldID)
		for _, f := range fields {
			if !enttask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enttask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Priority(); ok {
		_spec.SetField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedPriority(); ok {
		_spec.AddField(enttask.FieldPriority, field.TypeInt, value)
	}
	if value, ok := u.mutation.Priorities(); ok {
		_spec.SetField(enttask.FieldPriorities, field.TypeJSON, value)
	}
	if u.mutation.PrioritiesCleared() {
		_spec.ClearField(enttask.FieldPriorities, field.TypeJSON)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(enttask.FieldName, field.TypeString, value)
	}
	if u.mutation.NameCleared() {
		_spec.ClearField(enttask.FieldName, field.TypeString)
	}
	if value, ok := u.mutation.Owner(); ok {
		_spec.SetField(enttask.FieldOwner, field.TypeString, value)
	}
	if u.mutation.OwnerCleared() {
		_spec.ClearField(enttask.FieldOwner, field.TypeString)
	}
	if value, ok := u.mutation.Order(); ok {
		_spec.SetField(enttask.FieldOrder, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOrder(); ok {
		_spec.AddField(enttask.FieldOrder, field.TypeInt, value)
	}
	if u.mutation.OrderCleared() {
		_spec.ClearField(enttask.FieldOrder, field.TypeInt)
	}
	if value, ok := u.mutation.OrderOption(); ok {
		_spec.SetField(enttask.FieldOrderOption, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedOrderOption(); ok {
		_spec.AddField(enttask.FieldOrderOption, field.TypeInt, value)
	}
	if u.mutation.OrderOptionCleared() {
		_spec.ClearField(enttask.FieldOrderOption, field.TypeInt)
	}
	if value, ok := u.mutation.GetOp(); ok {
		_spec.SetField(enttask.FieldOp, field.TypeString, value)
	}
	_spec.AddModifiers(u.modifiers...)
	_n = &Task{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
