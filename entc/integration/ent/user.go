// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/ent/card"
	"entgo.io/ent/entc/integration/ent/pet"
	"entgo.io/ent/entc/integration/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `graphql:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OptionalInt holds the value of the "optional_int" field.
	OptionalInt int `json:"optional_int,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"first_name" graphql:"first_name"`
	// Last holds the value of the "last" field.
	Last string `json:"last,omitempty" graphql:"last_name"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Password holds the value of the "password" field.
	Password string `graphql:"-" json:"-"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// Employment holds the value of the "employment" field.
	Employment user.Employment `json:"employment,omitempty"`
	// SSOCert holds the value of the "SSOCert" field.
	SSOCert string `json:"SSOCert,omitempty"`
	// FilesCount holds the value of the "files_count" field.
	FilesCount int `json:"files_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges         UserEdges `json:"edges"`
	group_blocked *int
	user_spouse   *int
	user_parent   *int
	selectValues  sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cards associated with this user. O2O edge
	Card *Card `json:"card,omitempty"`
	// Pets holds the value of the pets edge.
	Pets []*Pet `json:"pets,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Friends holds the value of the friends edge.
	Friends []*User `json:"friends,omitempty"`
	// Followers holds the value of the followers edge.
	Followers []*User `json:"followers,omitempty"`
	// Following holds the value of the following edge.
	Following []*User `json:"following,omitempty"`
	// Team holds the value of the team edge.
	Team *Pet `json:"team,omitempty"`
	// Spouse holds the value of the spouse edge.
	Spouse *User `json:"spouse,omitempty"`
	// Children holds the value of the children edge.
	Children []*User `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *User `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes    [11]bool
	namedPets      map[string][]*Pet
	namedFiles     map[string][]*File
	namedGroups    map[string][]*Group
	namedFriends   map[string][]*User
	namedFollowers map[string][]*User
	namedFollowing map[string][]*User
	namedChildren  map[string][]*User
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CardOrErr() (*Card, error) {
	if e.Card != nil {
		return e.Card, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "card"}
}

// PetsOrErr returns the Pets value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PetsOrErr() ([]*Pet, error) {
	if e.loadedTypes[1] {
		return e.Pets, nil
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[2] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// FriendsOrErr returns the Friends value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendsOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Friends, nil
	}
	return nil, &NotLoadedError{edge: "friends"}
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowersOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// FollowingOrErr returns the Following value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowingOrErr() ([]*User, error) {
	if e.loadedTypes[6] {
		return e.Following, nil
	}
	return nil, &NotLoadedError{edge: "following"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) TeamOrErr() (*Pet, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: pet.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// SpouseOrErr returns the Spouse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SpouseOrErr() (*User, error) {
	if e.Spouse != nil {
		return e.Spouse, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "spouse"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ChildrenOrErr() ([]*User, error) {
	if e.loadedTypes[9] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ParentOrErr() (*User, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldOptionalInt, user.FieldAge, user.FieldFilesCount:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldLast, user.FieldNickname, user.FieldAddress, user.FieldPhone, user.FieldPassword, user.FieldRole, user.FieldEmployment, user.FieldSSOCert:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // group_blocked
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // user_spouse
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[2]: // user_parent
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (m *User) assignValues(columns []string, values []any) error {
	if v, c := len(values), len(columns); v < c {
		return fmt.Errorf("mismatch number of scan values: %d != %d", v, c)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case user.FieldOptionalInt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field optional_int", values[i])
			} else if value.Valid {
				m.OptionalInt = int(value.Int64)
			}
		case user.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				m.Age = int(value.Int64)
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case user.FieldLast:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last", values[i])
			} else if value.Valid {
				m.Last = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				m.Nickname = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				m.Address = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				m.Phone = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				m.Password = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				m.Role = user.Role(value.String)
			}
		case user.FieldEmployment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field employment", values[i])
			} else if value.Valid {
				m.Employment = user.Employment(value.String)
			}
		case user.FieldSSOCert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field SSOCert", values[i])
			} else if value.Valid {
				m.SSOCert = value.String
			}
		case user.FieldFilesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field files_count", values[i])
			} else if value.Valid {
				m.FilesCount = int(value.Int64)
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_blocked", value)
			} else if value.Valid {
				m.group_blocked = new(int)
				*m.group_blocked = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_spouse", value)
			} else if value.Valid {
				m.user_spouse = new(int)
				*m.user_spouse = int(value.Int64)
			}
		case user.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_parent", value)
			} else if value.Valid {
				m.user_parent = new(int)
				*m.user_parent = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (m *User) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryCard queries the "card" edge of the User entity.
func (m *User) QueryCard() *CardQuery {
	return NewUserClient(m.config).QueryCard(m)
}

// QueryPets queries the "pets" edge of the User entity.
func (m *User) QueryPets() *PetQuery {
	return NewUserClient(m.config).QueryPets(m)
}

// QueryFiles queries the "files" edge of the User entity.
func (m *User) QueryFiles() *FileQuery {
	return NewUserClient(m.config).QueryFiles(m)
}

// QueryGroups queries the "groups" edge of the User entity.
func (m *User) QueryGroups() *GroupQuery {
	return NewUserClient(m.config).QueryGroups(m)
}

// QueryFriends queries the "friends" edge of the User entity.
func (m *User) QueryFriends() *UserQuery {
	return NewUserClient(m.config).QueryFriends(m)
}

// QueryFollowers queries the "followers" edge of the User entity.
func (m *User) QueryFollowers() *UserQuery {
	return NewUserClient(m.config).QueryFollowers(m)
}

// QueryFollowing queries the "following" edge of the User entity.
func (m *User) QueryFollowing() *UserQuery {
	return NewUserClient(m.config).QueryFollowing(m)
}

// QueryTeam queries the "team" edge of the User entity.
func (m *User) QueryTeam() *PetQuery {
	return NewUserClient(m.config).QueryTeam(m)
}

// QuerySpouse queries the "spouse" edge of the User entity.
func (m *User) QuerySpouse() *UserQuery {
	return NewUserClient(m.config).QuerySpouse(m)
}

// QueryChildren queries the "children" edge of the User entity.
func (m *User) QueryChildren() *UserQuery {
	return NewUserClient(m.config).QueryChildren(m)
}

// QueryParent queries the "parent" edge of the User entity.
func (m *User) QueryParent() *UserQuery {
	return NewUserClient(m.config).QueryParent(m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *User) Update() *UserUpdateOne {
	return NewUserClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *User) Unwrap() *User {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("optional_int=")
	builder.WriteString(fmt.Sprintf("%v", m.OptionalInt))
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", m.Age))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("last=")
	builder.WriteString(m.Last)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(m.Nickname)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(m.Address)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(m.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", m.Role))
	builder.WriteString(", ")
	builder.WriteString("employment=")
	builder.WriteString(fmt.Sprintf("%v", m.Employment))
	builder.WriteString(", ")
	builder.WriteString("SSOCert=")
	builder.WriteString(m.SSOCert)
	builder.WriteString(", ")
	builder.WriteString("files_count=")
	builder.WriteString(fmt.Sprintf("%v", m.FilesCount))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPets returns the Pets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedPets(name string) ([]*Pet, error) {
	if m.Edges.namedPets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedPets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedPets(name string, edges ...*Pet) {
	if m.Edges.namedPets == nil {
		m.Edges.namedPets = make(map[string][]*Pet)
	}
	if len(edges) == 0 {
		m.Edges.namedPets[name] = []*Pet{}
	} else {
		m.Edges.namedPets[name] = append(m.Edges.namedPets[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedFiles(name string) ([]*File, error) {
	if m.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedFiles(name string, edges ...*File) {
	if m.Edges.namedFiles == nil {
		m.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		m.Edges.namedFiles[name] = []*File{}
	} else {
		m.Edges.namedFiles[name] = append(m.Edges.namedFiles[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedGroups(name string) ([]*Group, error) {
	if m.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedGroups(name string, edges ...*Group) {
	if m.Edges.namedGroups == nil {
		m.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		m.Edges.namedGroups[name] = []*Group{}
	} else {
		m.Edges.namedGroups[name] = append(m.Edges.namedGroups[name], edges...)
	}
}

// NamedFriends returns the Friends named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedFriends(name string) ([]*User, error) {
	if m.Edges.namedFriends == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedFriends[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedFriends(name string, edges ...*User) {
	if m.Edges.namedFriends == nil {
		m.Edges.namedFriends = make(map[string][]*User)
	}
	if len(edges) == 0 {
		m.Edges.namedFriends[name] = []*User{}
	} else {
		m.Edges.namedFriends[name] = append(m.Edges.namedFriends[name], edges...)
	}
}

// NamedFollowers returns the Followers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedFollowers(name string) ([]*User, error) {
	if m.Edges.namedFollowers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedFollowers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedFollowers(name string, edges ...*User) {
	if m.Edges.namedFollowers == nil {
		m.Edges.namedFollowers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		m.Edges.namedFollowers[name] = []*User{}
	} else {
		m.Edges.namedFollowers[name] = append(m.Edges.namedFollowers[name], edges...)
	}
}

// NamedFollowing returns the Following named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedFollowing(name string) ([]*User, error) {
	if m.Edges.namedFollowing == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedFollowing[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedFollowing(name string, edges ...*User) {
	if m.Edges.namedFollowing == nil {
		m.Edges.namedFollowing = make(map[string][]*User)
	}
	if len(edges) == 0 {
		m.Edges.namedFollowing[name] = []*User{}
	} else {
		m.Edges.namedFollowing[name] = append(m.Edges.namedFollowing[name], edges...)
	}
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *User) NamedChildren(name string) ([]*User, error) {
	if m.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *User) appendNamedChildren(name string, edges ...*User) {
	if m.Edges.namedChildren == nil {
		m.Edges.namedChildren = make(map[string][]*User)
	}
	if len(edges) == 0 {
		m.Edges.namedChildren[name] = []*User{}
	} else {
		m.Edges.namedChildren[name] = append(m.Edges.namedChildren[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
