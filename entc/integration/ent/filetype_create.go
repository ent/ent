// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/file"
	"entgo.io/ent/entc/integration/ent/filetype"
	"entgo.io/ent/schema/field"
)

// FileTypeCreate is the builder for creating a FileType entity.
type FileTypeCreate struct {
	config
	mutation *FileTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (m *FileTypeCreate) SetName(v string) *FileTypeCreate {
	m.mutation.SetName(v)
	return m
}

// SetType sets the "type" field.
func (m *FileTypeCreate) SetType(v filetype.Type) *FileTypeCreate {
	m.mutation.SetType(v)
	return m
}

// SetNillableType sets the "type" field if the given value is not nil.
func (m *FileTypeCreate) SetNillableType(v *filetype.Type) *FileTypeCreate {
	if v != nil {
		m.SetType(*v)
	}
	return m
}

// SetState sets the "state" field.
func (m *FileTypeCreate) SetState(v filetype.State) *FileTypeCreate {
	m.mutation.SetState(v)
	return m
}

// SetNillableState sets the "state" field if the given value is not nil.
func (m *FileTypeCreate) SetNillableState(v *filetype.State) *FileTypeCreate {
	if v != nil {
		m.SetState(*v)
	}
	return m
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (m *FileTypeCreate) AddFileIDs(ids ...int) *FileTypeCreate {
	m.mutation.AddFileIDs(ids...)
	return m
}

// AddFiles adds the "files" edges to the File entity.
func (m *FileTypeCreate) AddFiles(v ...*File) *FileTypeCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFileIDs(ids...)
}

// Mutation returns the FileTypeMutation object of the builder.
func (m *FileTypeCreate) Mutation() *FileTypeMutation {
	return m.mutation
}

// Save creates the FileType in the database.
func (c *FileTypeCreate) Save(ctx context.Context) (*FileType, error) {
	c.defaults()
	return withHooks(ctx, c.sqlSave, c.mutation, c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (c *FileTypeCreate) SaveX(ctx context.Context) *FileType {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *FileTypeCreate) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *FileTypeCreate) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (c *FileTypeCreate) defaults() {
	if _, ok := c.mutation.GetType(); !ok {
		v := filetype.DefaultType
		c.mutation.SetType(v)
	}
	if _, ok := c.mutation.State(); !ok {
		v := filetype.DefaultState
		c.mutation.SetState(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (c *FileTypeCreate) check() error {
	if _, ok := c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FileType.name"`)}
	}
	if _, ok := c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FileType.type"`)}
	}
	if v, ok := c.mutation.GetType(); ok {
		if err := filetype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FileType.type": %w`, err)}
		}
	}
	if _, ok := c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "FileType.state"`)}
	}
	if v, ok := c.mutation.State(); ok {
		if err := filetype.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FileType.state": %w`, err)}
		}
	}
	return nil
}

func (c *FileTypeCreate) sqlSave(ctx context.Context) (*FileType, error) {
	if err := c.check(); err != nil {
		return nil, err
	}
	_node, _spec := c.createSpec()
	if err := sqlgraph.CreateNode(ctx, c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	c.mutation.id = &_node.ID
	c.mutation.done = true
	return _node, nil
}

func (c *FileTypeCreate) createSpec() (*FileType, *sqlgraph.CreateSpec) {
	var (
		_node = &FileType{config: c.config}
		_spec = sqlgraph.NewCreateSpec(filetype.Table, sqlgraph.NewFieldSpec(filetype.FieldID, field.TypeInt))
	)
	_spec.OnConflict = c.conflict
	if value, ok := c.mutation.Name(); ok {
		_spec.SetField(filetype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := c.mutation.GetType(); ok {
		_spec.SetField(filetype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := c.mutation.State(); ok {
		_spec.SetField(filetype.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if nodes := c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   filetype.FilesTable,
			Columns: []string{filetype.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileType.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileTypeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (c *FileTypeCreate) OnConflict(opts ...sql.ConflictOption) *FileTypeUpsertOne {
	c.conflict = opts
	return &FileTypeUpsertOne{create: c}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (c *FileTypeCreate) OnConflictColumns(columns ...string) *FileTypeUpsertOne {
	c.conflict = append(c.conflict, sql.ConflictColumns(columns...))
	return &FileTypeUpsertOne{create: c}
}

type (
	// FileTypeUpsertOne is the builder for "upsert"-ing
	//  one FileType node.
	FileTypeUpsertOne struct {
		create *FileTypeCreate
	}

	// FileTypeUpsert is the "OnConflict" setter.
	FileTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *FileTypeUpsert) SetName(v string) *FileTypeUpsert {
	u.Set(filetype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileTypeUpsert) UpdateName() *FileTypeUpsert {
	u.SetExcluded(filetype.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *FileTypeUpsert) SetType(v filetype.Type) *FileTypeUpsert {
	u.Set(filetype.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileTypeUpsert) UpdateType() *FileTypeUpsert {
	u.SetExcluded(filetype.FieldType)
	return u
}

// SetState sets the "state" field.
func (u *FileTypeUpsert) SetState(v filetype.State) *FileTypeUpsert {
	u.Set(filetype.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileTypeUpsert) UpdateState() *FileTypeUpsert {
	u.SetExcluded(filetype.FieldState)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FileType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FileTypeUpsertOne) UpdateNewValues() *FileTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileTypeUpsertOne) Ignore() *FileTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileTypeUpsertOne) DoNothing() *FileTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileTypeCreate.OnConflict
// documentation for more info.
func (u *FileTypeUpsertOne) Update(set func(*FileTypeUpsert)) *FileTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FileTypeUpsertOne) SetName(v string) *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileTypeUpsertOne) UpdateName() *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *FileTypeUpsertOne) SetType(v filetype.Type) *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileTypeUpsertOne) UpdateType() *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateType()
	})
}

// SetState sets the "state" field.
func (u *FileTypeUpsertOne) SetState(v filetype.State) *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileTypeUpsertOne) UpdateState() *FileTypeUpsertOne {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *FileTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileTypeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileTypeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileTypeCreateBulk is the builder for creating many FileType entities in bulk.
type FileTypeCreateBulk struct {
	config
	err      error
	builders []*FileTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the FileType entities in the database.
func (c *FileTypeCreateBulk) Save(ctx context.Context) ([]*FileType, error) {
	if c.err != nil {
		return nil, c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(c.builders))
	nodes := make([]*FileType, len(c.builders))
	mutators := make([]Mutator, len(c.builders))
	for i := range c.builders {
		func(i int, root context.Context) {
			builder := c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (c *FileTypeCreateBulk) SaveX(ctx context.Context) []*FileType {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *FileTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *FileTypeCreateBulk) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileTypeUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (c *FileTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileTypeUpsertBulk {
	c.conflict = opts
	return &FileTypeUpsertBulk{create: c}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (c *FileTypeCreateBulk) OnConflictColumns(columns ...string) *FileTypeUpsertBulk {
	c.conflict = append(c.conflict, sql.ConflictColumns(columns...))
	return &FileTypeUpsertBulk{create: c}
}

// FileTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of FileType nodes.
type FileTypeUpsertBulk struct {
	create *FileTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FileTypeUpsertBulk) UpdateNewValues() *FileTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileTypeUpsertBulk) Ignore() *FileTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileTypeUpsertBulk) DoNothing() *FileTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileTypeCreateBulk.OnConflict
// documentation for more info.
func (u *FileTypeUpsertBulk) Update(set func(*FileTypeUpsert)) *FileTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FileTypeUpsertBulk) SetName(v string) *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FileTypeUpsertBulk) UpdateName() *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *FileTypeUpsertBulk) SetType(v filetype.Type) *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FileTypeUpsertBulk) UpdateType() *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateType()
	})
}

// SetState sets the "state" field.
func (u *FileTypeUpsertBulk) SetState(v filetype.State) *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileTypeUpsertBulk) UpdateState() *FileTypeUpsertBulk {
	return u.Update(func(s *FileTypeUpsert) {
		s.UpdateState()
	})
}

// Exec executes the query.
func (u *FileTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
