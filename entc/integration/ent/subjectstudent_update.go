// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/student"
	"entgo.io/ent/entc/integration/ent/subject"
	"entgo.io/ent/entc/integration/ent/subjectstudent"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubjectStudentUpdate is the builder for updating SubjectStudent entities.
type SubjectStudentUpdate struct {
	config
	hooks     []Hook
	mutation  *SubjectStudentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubjectStudentUpdate builder.
func (ssu *SubjectStudentUpdate) Where(ps ...predicate.SubjectStudent) *SubjectStudentUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetNote sets the "note" field.
func (ssu *SubjectStudentUpdate) SetNote(s string) *SubjectStudentUpdate {
	ssu.mutation.SetNote(s)
	return ssu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ssu *SubjectStudentUpdate) SetNillableNote(s *string) *SubjectStudentUpdate {
	if s != nil {
		ssu.SetNote(*s)
	}
	return ssu
}

// ClearNote clears the value of the "note" field.
func (ssu *SubjectStudentUpdate) ClearNote() *SubjectStudentUpdate {
	ssu.mutation.ClearNote()
	return ssu
}

// SetSubjectID sets the "subject_id" field.
func (ssu *SubjectStudentUpdate) SetSubjectID(u uuid.UUID) *SubjectStudentUpdate {
	ssu.mutation.SetSubjectID(u)
	return ssu
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (ssu *SubjectStudentUpdate) SetNillableSubjectID(u *uuid.UUID) *SubjectStudentUpdate {
	if u != nil {
		ssu.SetSubjectID(*u)
	}
	return ssu
}

// SetStudentID sets the "student_id" field.
func (ssu *SubjectStudentUpdate) SetStudentID(u uuid.UUID) *SubjectStudentUpdate {
	ssu.mutation.SetStudentID(u)
	return ssu
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (ssu *SubjectStudentUpdate) SetNillableStudentID(u *uuid.UUID) *SubjectStudentUpdate {
	if u != nil {
		ssu.SetStudentID(*u)
	}
	return ssu
}

// SetSubject sets the "subject" edge to the Subject entity.
func (ssu *SubjectStudentUpdate) SetSubject(s *Subject) *SubjectStudentUpdate {
	return ssu.SetSubjectID(s.ID)
}

// SetStudent sets the "student" edge to the Student entity.
func (ssu *SubjectStudentUpdate) SetStudent(s *Student) *SubjectStudentUpdate {
	return ssu.SetStudentID(s.ID)
}

// Mutation returns the SubjectStudentMutation object of the builder.
func (ssu *SubjectStudentUpdate) Mutation() *SubjectStudentMutation {
	return ssu.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (ssu *SubjectStudentUpdate) ClearSubject() *SubjectStudentUpdate {
	ssu.mutation.ClearSubject()
	return ssu
}

// ClearStudent clears the "student" edge to the Student entity.
func (ssu *SubjectStudentUpdate) ClearStudent() *SubjectStudentUpdate {
	ssu.mutation.ClearStudent()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SubjectStudentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SubjectStudentUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SubjectStudentUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SubjectStudentUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SubjectStudentUpdate) check() error {
	if ssu.mutation.SubjectCleared() && len(ssu.mutation.SubjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubjectStudent.subject"`)
	}
	if ssu.mutation.StudentCleared() && len(ssu.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubjectStudent.student"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssu *SubjectStudentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubjectStudentUpdate {
	ssu.modifiers = append(ssu.modifiers, modifiers...)
	return ssu
}

func (ssu *SubjectStudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectstudent.Table, subjectstudent.Columns, sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Note(); ok {
		_spec.SetField(subjectstudent.FieldNote, field.TypeString, value)
	}
	if ssu.mutation.NoteCleared() {
		_spec.ClearField(subjectstudent.FieldNote, field.TypeString)
	}
	if ssu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.SubjectTable,
			Columns: []string{subjectstudent.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.SubjectTable,
			Columns: []string{subjectstudent.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.StudentTable,
			Columns: []string{subjectstudent.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.StudentTable,
			Columns: []string{subjectstudent.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ssu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectstudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SubjectStudentUpdateOne is the builder for updating a single SubjectStudent entity.
type SubjectStudentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubjectStudentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetNote sets the "note" field.
func (ssuo *SubjectStudentUpdateOne) SetNote(s string) *SubjectStudentUpdateOne {
	ssuo.mutation.SetNote(s)
	return ssuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ssuo *SubjectStudentUpdateOne) SetNillableNote(s *string) *SubjectStudentUpdateOne {
	if s != nil {
		ssuo.SetNote(*s)
	}
	return ssuo
}

// ClearNote clears the value of the "note" field.
func (ssuo *SubjectStudentUpdateOne) ClearNote() *SubjectStudentUpdateOne {
	ssuo.mutation.ClearNote()
	return ssuo
}

// SetSubjectID sets the "subject_id" field.
func (ssuo *SubjectStudentUpdateOne) SetSubjectID(u uuid.UUID) *SubjectStudentUpdateOne {
	ssuo.mutation.SetSubjectID(u)
	return ssuo
}

// SetNillableSubjectID sets the "subject_id" field if the given value is not nil.
func (ssuo *SubjectStudentUpdateOne) SetNillableSubjectID(u *uuid.UUID) *SubjectStudentUpdateOne {
	if u != nil {
		ssuo.SetSubjectID(*u)
	}
	return ssuo
}

// SetStudentID sets the "student_id" field.
func (ssuo *SubjectStudentUpdateOne) SetStudentID(u uuid.UUID) *SubjectStudentUpdateOne {
	ssuo.mutation.SetStudentID(u)
	return ssuo
}

// SetNillableStudentID sets the "student_id" field if the given value is not nil.
func (ssuo *SubjectStudentUpdateOne) SetNillableStudentID(u *uuid.UUID) *SubjectStudentUpdateOne {
	if u != nil {
		ssuo.SetStudentID(*u)
	}
	return ssuo
}

// SetSubject sets the "subject" edge to the Subject entity.
func (ssuo *SubjectStudentUpdateOne) SetSubject(s *Subject) *SubjectStudentUpdateOne {
	return ssuo.SetSubjectID(s.ID)
}

// SetStudent sets the "student" edge to the Student entity.
func (ssuo *SubjectStudentUpdateOne) SetStudent(s *Student) *SubjectStudentUpdateOne {
	return ssuo.SetStudentID(s.ID)
}

// Mutation returns the SubjectStudentMutation object of the builder.
func (ssuo *SubjectStudentUpdateOne) Mutation() *SubjectStudentMutation {
	return ssuo.mutation
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (ssuo *SubjectStudentUpdateOne) ClearSubject() *SubjectStudentUpdateOne {
	ssuo.mutation.ClearSubject()
	return ssuo
}

// ClearStudent clears the "student" edge to the Student entity.
func (ssuo *SubjectStudentUpdateOne) ClearStudent() *SubjectStudentUpdateOne {
	ssuo.mutation.ClearStudent()
	return ssuo
}

// Where appends a list predicates to the SubjectStudentUpdate builder.
func (ssuo *SubjectStudentUpdateOne) Where(ps ...predicate.SubjectStudent) *SubjectStudentUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SubjectStudentUpdateOne) Select(field string, fields ...string) *SubjectStudentUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SubjectStudent entity.
func (ssuo *SubjectStudentUpdateOne) Save(ctx context.Context) (*SubjectStudent, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SubjectStudentUpdateOne) SaveX(ctx context.Context) *SubjectStudent {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SubjectStudentUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SubjectStudentUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SubjectStudentUpdateOne) check() error {
	if ssuo.mutation.SubjectCleared() && len(ssuo.mutation.SubjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubjectStudent.subject"`)
	}
	if ssuo.mutation.StudentCleared() && len(ssuo.mutation.StudentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SubjectStudent.student"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssuo *SubjectStudentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubjectStudentUpdateOne {
	ssuo.modifiers = append(ssuo.modifiers, modifiers...)
	return ssuo
}

func (ssuo *SubjectStudentUpdateOne) sqlSave(ctx context.Context) (_node *SubjectStudent, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subjectstudent.Table, subjectstudent.Columns, sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubjectStudent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectstudent.FieldID)
		for _, f := range fields {
			if !subjectstudent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subjectstudent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Note(); ok {
		_spec.SetField(subjectstudent.FieldNote, field.TypeString, value)
	}
	if ssuo.mutation.NoteCleared() {
		_spec.ClearField(subjectstudent.FieldNote, field.TypeString)
	}
	if ssuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.SubjectTable,
			Columns: []string{subjectstudent.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.SubjectTable,
			Columns: []string{subjectstudent.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.StudentTable,
			Columns: []string{subjectstudent.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subjectstudent.StudentTable,
			Columns: []string{subjectstudent.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ssuo.modifiers...)
	_node = &SubjectStudent{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectstudent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
