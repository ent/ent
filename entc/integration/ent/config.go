// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/facebook/ent"
	"github.com/facebook/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...interface{})
	// hooks to execute on mutations.
	hooks *hooks
	// optional schema name for the Card table.
	CardSchema string
	// optional schema name for the Comment table.
	CommentSchema string
	// optional schema name for the FieldType table.
	FieldTypeSchema string
	// optional schema name for the File table.
	FileSchema string
	// optional schema name for the FileType table.
	FileTypeSchema string
	// optional schema name for the Goods table.
	GoodsSchema string
	// optional schema name for the Group table.
	GroupSchema string
	// optional schema name for the GroupInfo table.
	GroupInfoSchema string
	// optional schema name for the Item table.
	ItemSchema string
	// optional schema name for the Node table.
	NodeSchema string
	// optional schema name for the Pet table.
	PetSchema string
	// optional schema name for the Spec table.
	SpecSchema string
	// optional schema name for the Task table.
	TaskSchema string
	// optional schema name for the User table.
	UserSchema string
}

// hooks per client, for fast access.
type hooks struct {
	Card      []ent.Hook
	Comment   []ent.Hook
	FieldType []ent.Hook
	File      []ent.Hook
	FileType  []ent.Hook
	Goods     []ent.Hook
	Group     []ent.Hook
	GroupInfo []ent.Hook
	Item      []ent.Hook
	Node      []ent.Hook
	Pet       []ent.Hook
	Spec      []ent.Hook
	Task      []ent.Hook
	User      []ent.Hook
}

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...interface{})) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// WithCardSchema allows an alternate
// database name to be passed into ent operations.
func WithCardSchema(schema string) Option {
	return func(c *config) {
		c.CardSchema = schema
	}
} // WithCommentSchema allows an alternate
// database name to be passed into ent operations.
func WithCommentSchema(schema string) Option {
	return func(c *config) {
		c.CommentSchema = schema
	}
} // WithFieldTypeSchema allows an alternate
// database name to be passed into ent operations.
func WithFieldTypeSchema(schema string) Option {
	return func(c *config) {
		c.FieldTypeSchema = schema
	}
} // WithFileSchema allows an alternate
// database name to be passed into ent operations.
func WithFileSchema(schema string) Option {
	return func(c *config) {
		c.FileSchema = schema
	}
} // WithFileTypeSchema allows an alternate
// database name to be passed into ent operations.
func WithFileTypeSchema(schema string) Option {
	return func(c *config) {
		c.FileTypeSchema = schema
	}
} // WithGoodsSchema allows an alternate
// database name to be passed into ent operations.
func WithGoodsSchema(schema string) Option {
	return func(c *config) {
		c.GoodsSchema = schema
	}
} // WithGroupSchema allows an alternate
// database name to be passed into ent operations.
func WithGroupSchema(schema string) Option {
	return func(c *config) {
		c.GroupSchema = schema
	}
} // WithGroupInfoSchema allows an alternate
// database name to be passed into ent operations.
func WithGroupInfoSchema(schema string) Option {
	return func(c *config) {
		c.GroupInfoSchema = schema
	}
} // WithItemSchema allows an alternate
// database name to be passed into ent operations.
func WithItemSchema(schema string) Option {
	return func(c *config) {
		c.ItemSchema = schema
	}
} // WithNodeSchema allows an alternate
// database name to be passed into ent operations.
func WithNodeSchema(schema string) Option {
	return func(c *config) {
		c.NodeSchema = schema
	}
} // WithPetSchema allows an alternate
// database name to be passed into ent operations.
func WithPetSchema(schema string) Option {
	return func(c *config) {
		c.PetSchema = schema
	}
} // WithSpecSchema allows an alternate
// database name to be passed into ent operations.
func WithSpecSchema(schema string) Option {
	return func(c *config) {
		c.SpecSchema = schema
	}
} // WithTaskSchema allows an alternate
// database name to be passed into ent operations.
func WithTaskSchema(schema string) Option {
	return func(c *config) {
		c.TaskSchema = schema
	}
} // WithUserSchema allows an alternate
// database name to be passed into ent operations.
func WithUserSchema(schema string) Option {
	return func(c *config) {
		c.UserSchema = schema
	}
}
