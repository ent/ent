// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/entc/integration/ent/student"
	"entgo.io/ent/entc/integration/ent/subject"
	"entgo.io/ent/entc/integration/ent/subjectstudent"
	"github.com/google/uuid"
)

// SubjectStudent is the model entity for the SubjectStudent schema.
type SubjectStudent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	Note *string `json:"note,omitempty"`
	// SubjectID holds the value of the "subject_id" field.
	SubjectID uuid.UUID `json:"subject_id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID uuid.UUID `json:"student_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectStudentQuery when eager-loading is set.
	Edges        SubjectStudentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubjectStudentEdges holds the relations/edges for other nodes in the graph.
type SubjectStudentEdges struct {
	// Subject holds the value of the subject edge.
	Subject *Subject `json:"subject,omitempty"`
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectStudentEdges) SubjectOrErr() (*Subject, error) {
	if e.Subject != nil {
		return e.Subject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subject.Label}
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectStudentEdges) StudentOrErr() (*Student, error) {
	if e.Student != nil {
		return e.Student, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: student.Label}
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubjectStudent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subjectstudent.FieldNote:
			values[i] = new(sql.NullString)
		case subjectstudent.FieldID, subjectstudent.FieldSubjectID, subjectstudent.FieldStudentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubjectStudent fields.
func (ss *SubjectStudent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subjectstudent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ss.ID = *value
			}
		case subjectstudent.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				ss.Note = new(string)
				*ss.Note = value.String
			}
		case subjectstudent.FieldSubjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field subject_id", values[i])
			} else if value != nil {
				ss.SubjectID = *value
			}
		case subjectstudent.FieldStudentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value != nil {
				ss.StudentID = *value
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubjectStudent.
// This includes values selected through modifiers, order, etc.
func (ss *SubjectStudent) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QuerySubject queries the "subject" edge of the SubjectStudent entity.
func (ss *SubjectStudent) QuerySubject() *SubjectQuery {
	return NewSubjectStudentClient(ss.config).QuerySubject(ss)
}

// QueryStudent queries the "student" edge of the SubjectStudent entity.
func (ss *SubjectStudent) QueryStudent() *StudentQuery {
	return NewSubjectStudentClient(ss.config).QueryStudent(ss)
}

// Update returns a builder for updating this SubjectStudent.
// Note that you need to call SubjectStudent.Unwrap() before calling this method if this SubjectStudent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SubjectStudent) Update() *SubjectStudentUpdateOne {
	return NewSubjectStudentClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SubjectStudent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SubjectStudent) Unwrap() *SubjectStudent {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubjectStudent is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SubjectStudent) String() string {
	var builder strings.Builder
	builder.WriteString("SubjectStudent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	if v := ss.Note; v != nil {
		builder.WriteString("note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("subject_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.SubjectID))
	builder.WriteString(", ")
	builder.WriteString("student_id=")
	builder.WriteString(fmt.Sprintf("%v", ss.StudentID))
	builder.WriteByte(')')
	return builder.String()
}

// SubjectStudents is a parsable slice of SubjectStudent.
type SubjectStudents []*SubjectStudent
