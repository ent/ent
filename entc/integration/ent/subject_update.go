// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/student"
	"entgo.io/ent/entc/integration/ent/subject"
	"entgo.io/ent/entc/integration/ent/subjectstudent"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks     []Hook
	mutation  *SubjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableName(s *string) *SubjectUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (su *SubjectUpdate) AddStudentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddStudentIDs(ids...)
	return su
}

// AddStudents adds the "students" edges to the Student entity.
func (su *SubjectUpdate) AddStudents(s ...*Student) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStudentIDs(ids...)
}

// AddSubjectStudentIDs adds the "subject_students" edge to the SubjectStudent entity by IDs.
func (su *SubjectUpdate) AddSubjectStudentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddSubjectStudentIDs(ids...)
	return su
}

// AddSubjectStudents adds the "subject_students" edges to the SubjectStudent entity.
func (su *SubjectUpdate) AddSubjectStudents(s ...*SubjectStudent) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSubjectStudentIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (su *SubjectUpdate) ClearStudents() *SubjectUpdate {
	su.mutation.ClearStudents()
	return su
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (su *SubjectUpdate) RemoveStudentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveStudentIDs(ids...)
	return su
}

// RemoveStudents removes "students" edges to Student entities.
func (su *SubjectUpdate) RemoveStudents(s ...*Student) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStudentIDs(ids...)
}

// ClearSubjectStudents clears all "subject_students" edges to the SubjectStudent entity.
func (su *SubjectUpdate) ClearSubjectStudents() *SubjectUpdate {
	su.mutation.ClearSubjectStudents()
	return su
}

// RemoveSubjectStudentIDs removes the "subject_students" edge to SubjectStudent entities by IDs.
func (su *SubjectUpdate) RemoveSubjectStudentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveSubjectStudentIDs(ids...)
	return su
}

// RemoveSubjectStudents removes "subject_students" edges to SubjectStudent entities.
func (su *SubjectUpdate) RemoveSubjectStudents(s ...*SubjectStudent) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSubjectStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubjectUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubjectUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if su.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.StudentsTable,
			Columns: subject.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		createE := &SubjectStudentCreate{config: su.config, mutation: newSubjectStudentMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !su.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.StudentsTable,
			Columns: subject.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubjectStudentCreate{config: su.config, mutation: newSubjectStudentMutation(su.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudentsIDs(); len(nodes) > 0 {
		for _, node := range nodes {
			edge := &sqlgraph.EdgeSpec{
				Rel:     sqlgraph.M2M,
				Inverse: true,
				Table:   subject.StudentsTable,
				Columns: subject.StudentsPrimaryKey,
				Bidi:    false,
				Target: &sqlgraph.EdgeTarget{
					IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
				},
			}
			edge.Target.Nodes = append(edge.Target.Nodes, node)
			createE := &SubjectStudentCreate{config: su.config, mutation: newSubjectStudentMutation(su.config, OpCreate)}
			createE.defaults()
			_, specE := createE.createSpec()
			edge.Target.Fields = specE.Fields
			if specE.ID.Value != nil {
				edge.Target.Fields = append(edge.Target.Fields, specE.ID)
			}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
	}
	if su.mutation.SubjectStudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSubjectStudentsIDs(); len(nodes) > 0 && !su.mutation.SubjectStudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubjectStudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubjectMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableName(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (suo *SubjectUpdateOne) AddStudentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddStudentIDs(ids...)
	return suo
}

// AddStudents adds the "students" edges to the Student entity.
func (suo *SubjectUpdateOne) AddStudents(s ...*Student) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStudentIDs(ids...)
}

// AddSubjectStudentIDs adds the "subject_students" edge to the SubjectStudent entity by IDs.
func (suo *SubjectUpdateOne) AddSubjectStudentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddSubjectStudentIDs(ids...)
	return suo
}

// AddSubjectStudents adds the "subject_students" edges to the SubjectStudent entity.
func (suo *SubjectUpdateOne) AddSubjectStudents(s ...*SubjectStudent) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSubjectStudentIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (suo *SubjectUpdateOne) ClearStudents() *SubjectUpdateOne {
	suo.mutation.ClearStudents()
	return suo
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (suo *SubjectUpdateOne) RemoveStudentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveStudentIDs(ids...)
	return suo
}

// RemoveStudents removes "students" edges to Student entities.
func (suo *SubjectUpdateOne) RemoveStudents(s ...*Student) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStudentIDs(ids...)
}

// ClearSubjectStudents clears all "subject_students" edges to the SubjectStudent entity.
func (suo *SubjectUpdateOne) ClearSubjectStudents() *SubjectUpdateOne {
	suo.mutation.ClearSubjectStudents()
	return suo
}

// RemoveSubjectStudentIDs removes the "subject_students" edge to SubjectStudent entities by IDs.
func (suo *SubjectUpdateOne) RemoveSubjectStudentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveSubjectStudentIDs(ids...)
	return suo
}

// RemoveSubjectStudents removes "subject_students" edges to SubjectStudent entities.
func (suo *SubjectUpdateOne) RemoveSubjectStudents(s ...*SubjectStudent) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSubjectStudentIDs(ids...)
}

// Where appends a list predicates to the SubjectUpdate builder.
func (suo *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubjectUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubjectUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if suo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.StudentsTable,
			Columns: subject.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		createE := &SubjectStudentCreate{config: suo.config, mutation: newSubjectStudentMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !suo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.StudentsTable,
			Columns: subject.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubjectStudentCreate{config: suo.config, mutation: newSubjectStudentMutation(suo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudentsIDs(); len(nodes) > 0 {
		for _, node := range nodes {
			edge := &sqlgraph.EdgeSpec{
				Rel:     sqlgraph.M2M,
				Inverse: true,
				Table:   subject.StudentsTable,
				Columns: subject.StudentsPrimaryKey,
				Bidi:    false,
				Target: &sqlgraph.EdgeTarget{
					IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID),
				},
			}
			edge.Target.Nodes = append(edge.Target.Nodes, node)
			createE := &SubjectStudentCreate{config: suo.config, mutation: newSubjectStudentMutation(suo.config, OpCreate)}
			createE.defaults()
			_, specE := createE.createSpec()
			edge.Target.Fields = specE.Fields
			if specE.ID.Value != nil {
				edge.Target.Fields = append(edge.Target.Fields, specE.ID)
			}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
	}
	if suo.mutation.SubjectStudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSubjectStudentsIDs(); len(nodes) > 0 && !suo.mutation.SubjectStudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubjectStudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.SubjectStudentsTable,
			Columns: []string{subject.SubjectStudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectstudent.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
