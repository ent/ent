// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package subjectstudent

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldLTE(FieldID, id))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldNote, v))
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldSubjectID, v))
}

// StudentID applies equality check predicate on the "student_id" field. It's identical to StudentIDEQ.
func StudentID(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldStudentID, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldHasSuffix(FieldNote, v))
}

// NoteIsNil applies the IsNil predicate on the "note" field.
func NoteIsNil() predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldIsNull(FieldNote))
}

// NoteNotNil applies the NotNil predicate on the "note" field.
func NoteNotNil() predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNotNull(FieldNote))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldContainsFold(FieldNote, v))
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldSubjectID, v))
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNEQ(FieldSubjectID, v))
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldIn(FieldSubjectID, vs...))
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNotIn(FieldSubjectID, vs...))
}

// StudentIDEQ applies the EQ predicate on the "student_id" field.
func StudentIDEQ(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldEQ(FieldStudentID, v))
}

// StudentIDNEQ applies the NEQ predicate on the "student_id" field.
func StudentIDNEQ(v uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNEQ(FieldStudentID, v))
}

// StudentIDIn applies the In predicate on the "student_id" field.
func StudentIDIn(vs ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldIn(FieldStudentID, vs...))
}

// StudentIDNotIn applies the NotIn predicate on the "student_id" field.
func StudentIDNotIn(vs ...uuid.UUID) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.FieldNotIn(FieldStudentID, vs...))
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.SubjectStudent {
	return predicate.SubjectStudent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.SubjectStudent {
	return predicate.SubjectStudent(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.SubjectStudent {
	return predicate.SubjectStudent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.SubjectStudent {
	return predicate.SubjectStudent(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubjectStudent) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubjectStudent) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubjectStudent) predicate.SubjectStudent {
	return predicate.SubjectStudent(sql.NotPredicates(p))
}
