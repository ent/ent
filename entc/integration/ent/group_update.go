// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entc/integration/ent/file"
	"entgo.io/ent/entc/integration/ent/group"
	"entgo.io/ent/entc/integration/ent/groupinfo"
	"entgo.io/ent/entc/integration/ent/predicate"
	"entgo.io/ent/entc/integration/ent/user"
	"entgo.io/ent/schema/field"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GroupUpdate builder.
func (u *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetActive sets the "active" field.
func (m *GroupUpdate) SetActive(v bool) *GroupUpdate {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *GroupUpdate) SetNillableActive(v *bool) *GroupUpdate {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// SetExpire sets the "expire" field.
func (m *GroupUpdate) SetExpire(v time.Time) *GroupUpdate {
	m.mutation.SetExpire(v)
	return m
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (m *GroupUpdate) SetNillableExpire(v *time.Time) *GroupUpdate {
	if v != nil {
		m.SetExpire(*v)
	}
	return m
}

// SetType sets the "type" field.
func (m *GroupUpdate) SetType(v string) *GroupUpdate {
	m.mutation.SetType(v)
	return m
}

// SetNillableType sets the "type" field if the given value is not nil.
func (m *GroupUpdate) SetNillableType(v *string) *GroupUpdate {
	if v != nil {
		m.SetType(*v)
	}
	return m
}

// ClearType clears the value of the "type" field.
func (m *GroupUpdate) ClearType() *GroupUpdate {
	m.mutation.ClearType()
	return m
}

// SetMaxUsers sets the "max_users" field.
func (m *GroupUpdate) SetMaxUsers(v int) *GroupUpdate {
	m.mutation.ResetMaxUsers()
	m.mutation.SetMaxUsers(v)
	return m
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (m *GroupUpdate) SetNillableMaxUsers(v *int) *GroupUpdate {
	if v != nil {
		m.SetMaxUsers(*v)
	}
	return m
}

// AddMaxUsers adds value to the "max_users" field.
func (m *GroupUpdate) AddMaxUsers(v int) *GroupUpdate {
	m.mutation.AddMaxUsers(v)
	return m
}

// ClearMaxUsers clears the value of the "max_users" field.
func (m *GroupUpdate) ClearMaxUsers() *GroupUpdate {
	m.mutation.ClearMaxUsers()
	return m
}

// SetName sets the "name" field.
func (m *GroupUpdate) SetName(v string) *GroupUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *GroupUpdate) SetNillableName(v *string) *GroupUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (m *GroupUpdate) AddFileIDs(ids ...int) *GroupUpdate {
	m.mutation.AddFileIDs(ids...)
	return m
}

// AddFiles adds the "files" edges to the File entity.
func (m *GroupUpdate) AddFiles(v ...*File) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFileIDs(ids...)
}

// AddBlockedIDs adds the "blocked" edge to the User entity by IDs.
func (m *GroupUpdate) AddBlockedIDs(ids ...int) *GroupUpdate {
	m.mutation.AddBlockedIDs(ids...)
	return m
}

// AddBlocked adds the "blocked" edges to the User entity.
func (m *GroupUpdate) AddBlocked(v ...*User) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddBlockedIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (m *GroupUpdate) AddUserIDs(ids ...int) *GroupUpdate {
	m.mutation.AddUserIDs(ids...)
	return m
}

// AddUsers adds the "users" edges to the User entity.
func (m *GroupUpdate) AddUsers(v ...*User) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddUserIDs(ids...)
}

// SetInfoID sets the "info" edge to the GroupInfo entity by ID.
func (m *GroupUpdate) SetInfoID(id int) *GroupUpdate {
	m.mutation.SetInfoID(id)
	return m
}

// SetInfo sets the "info" edge to the GroupInfo entity.
func (m *GroupUpdate) SetInfo(v *GroupInfo) *GroupUpdate {
	return m.SetInfoID(v.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (m *GroupUpdate) Mutation() *GroupMutation {
	return m.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (u *GroupUpdate) ClearFiles() *GroupUpdate {
	u.mutation.ClearFiles()
	return u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (u *GroupUpdate) RemoveFileIDs(ids ...int) *GroupUpdate {
	u.mutation.RemoveFileIDs(ids...)
	return u
}

// RemoveFiles removes "files" edges to File entities.
func (u *GroupUpdate) RemoveFiles(v ...*File) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFileIDs(ids...)
}

// ClearBlocked clears all "blocked" edges to the User entity.
func (u *GroupUpdate) ClearBlocked() *GroupUpdate {
	u.mutation.ClearBlocked()
	return u
}

// RemoveBlockedIDs removes the "blocked" edge to User entities by IDs.
func (u *GroupUpdate) RemoveBlockedIDs(ids ...int) *GroupUpdate {
	u.mutation.RemoveBlockedIDs(ids...)
	return u
}

// RemoveBlocked removes "blocked" edges to User entities.
func (u *GroupUpdate) RemoveBlocked(v ...*User) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveBlockedIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (u *GroupUpdate) ClearUsers() *GroupUpdate {
	u.mutation.ClearUsers()
	return u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (u *GroupUpdate) RemoveUserIDs(ids ...int) *GroupUpdate {
	u.mutation.RemoveUserIDs(ids...)
	return u
}

// RemoveUsers removes "users" edges to User entities.
func (u *GroupUpdate) RemoveUsers(v ...*User) *GroupUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveUserIDs(ids...)
}

// ClearInfo clears the "info" edge to the GroupInfo entity.
func (u *GroupUpdate) ClearInfo() *GroupUpdate {
	u.mutation.ClearInfo()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *GroupUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *GroupUpdate) check() error {
	if v, ok := u.mutation.GetType(); ok {
		if err := group.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Group.type": %w`, err)}
		}
	}
	if v, ok := u.mutation.MaxUsers(); ok {
		if err := group.MaxUsersValidator(v); err != nil {
			return &ValidationError{Name: "max_users", err: fmt.Errorf(`ent: validator failed for field "Group.max_users": %w`, err)}
		}
	}
	if v, ok := u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if u.mutation.InfoCleared() && len(u.mutation.InfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.info"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *GroupUpdate) Modify(modifiers ...func(*sql.UpdateBuilder)) *GroupUpdate {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *GroupUpdate) sqlSave(ctx context.Context) (_n int, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(group.FieldActive, field.TypeBool, value)
	}
	if value, ok := u.mutation.Expire(); ok {
		_spec.SetField(group.FieldExpire, field.TypeTime, value)
	}
	if value, ok := u.mutation.GetType(); ok {
		_spec.SetField(group.FieldType, field.TypeString, value)
	}
	if u.mutation.TypeCleared() {
		_spec.ClearField(group.FieldType, field.TypeString)
	}
	if value, ok := u.mutation.MaxUsers(); ok {
		_spec.SetField(group.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedMaxUsers(); ok {
		_spec.AddField(group.FieldMaxUsers, field.TypeInt, value)
	}
	if u.mutation.MaxUsersCleared() {
		_spec.ClearField(group.FieldMaxUsers, field.TypeInt)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.BlockedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedBlockedIDs(); len(nodes) > 0 && !u.mutation.BlockedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.BlockedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.InfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.InfoTable,
			Columns: []string{group.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.InfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.InfoTable,
			Columns: []string{group.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(u.modifiers...)
	if _n, err = sqlgraph.UpdateNodes(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	u.mutation.done = true
	return _n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetActive sets the "active" field.
func (m *GroupUpdateOne) SetActive(v bool) *GroupUpdateOne {
	m.mutation.SetActive(v)
	return m
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (m *GroupUpdateOne) SetNillableActive(v *bool) *GroupUpdateOne {
	if v != nil {
		m.SetActive(*v)
	}
	return m
}

// SetExpire sets the "expire" field.
func (m *GroupUpdateOne) SetExpire(v time.Time) *GroupUpdateOne {
	m.mutation.SetExpire(v)
	return m
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (m *GroupUpdateOne) SetNillableExpire(v *time.Time) *GroupUpdateOne {
	if v != nil {
		m.SetExpire(*v)
	}
	return m
}

// SetType sets the "type" field.
func (m *GroupUpdateOne) SetType(v string) *GroupUpdateOne {
	m.mutation.SetType(v)
	return m
}

// SetNillableType sets the "type" field if the given value is not nil.
func (m *GroupUpdateOne) SetNillableType(v *string) *GroupUpdateOne {
	if v != nil {
		m.SetType(*v)
	}
	return m
}

// ClearType clears the value of the "type" field.
func (m *GroupUpdateOne) ClearType() *GroupUpdateOne {
	m.mutation.ClearType()
	return m
}

// SetMaxUsers sets the "max_users" field.
func (m *GroupUpdateOne) SetMaxUsers(v int) *GroupUpdateOne {
	m.mutation.ResetMaxUsers()
	m.mutation.SetMaxUsers(v)
	return m
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (m *GroupUpdateOne) SetNillableMaxUsers(v *int) *GroupUpdateOne {
	if v != nil {
		m.SetMaxUsers(*v)
	}
	return m
}

// AddMaxUsers adds value to the "max_users" field.
func (m *GroupUpdateOne) AddMaxUsers(v int) *GroupUpdateOne {
	m.mutation.AddMaxUsers(v)
	return m
}

// ClearMaxUsers clears the value of the "max_users" field.
func (m *GroupUpdateOne) ClearMaxUsers() *GroupUpdateOne {
	m.mutation.ClearMaxUsers()
	return m
}

// SetName sets the "name" field.
func (m *GroupUpdateOne) SetName(v string) *GroupUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *GroupUpdateOne) SetNillableName(v *string) *GroupUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (m *GroupUpdateOne) AddFileIDs(ids ...int) *GroupUpdateOne {
	m.mutation.AddFileIDs(ids...)
	return m
}

// AddFiles adds the "files" edges to the File entity.
func (m *GroupUpdateOne) AddFiles(v ...*File) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFileIDs(ids...)
}

// AddBlockedIDs adds the "blocked" edge to the User entity by IDs.
func (m *GroupUpdateOne) AddBlockedIDs(ids ...int) *GroupUpdateOne {
	m.mutation.AddBlockedIDs(ids...)
	return m
}

// AddBlocked adds the "blocked" edges to the User entity.
func (m *GroupUpdateOne) AddBlocked(v ...*User) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddBlockedIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (m *GroupUpdateOne) AddUserIDs(ids ...int) *GroupUpdateOne {
	m.mutation.AddUserIDs(ids...)
	return m
}

// AddUsers adds the "users" edges to the User entity.
func (m *GroupUpdateOne) AddUsers(v ...*User) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddUserIDs(ids...)
}

// SetInfoID sets the "info" edge to the GroupInfo entity by ID.
func (m *GroupUpdateOne) SetInfoID(id int) *GroupUpdateOne {
	m.mutation.SetInfoID(id)
	return m
}

// SetInfo sets the "info" edge to the GroupInfo entity.
func (m *GroupUpdateOne) SetInfo(v *GroupInfo) *GroupUpdateOne {
	return m.SetInfoID(v.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (m *GroupUpdateOne) Mutation() *GroupMutation {
	return m.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (u *GroupUpdateOne) ClearFiles() *GroupUpdateOne {
	u.mutation.ClearFiles()
	return u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (u *GroupUpdateOne) RemoveFileIDs(ids ...int) *GroupUpdateOne {
	u.mutation.RemoveFileIDs(ids...)
	return u
}

// RemoveFiles removes "files" edges to File entities.
func (u *GroupUpdateOne) RemoveFiles(v ...*File) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFileIDs(ids...)
}

// ClearBlocked clears all "blocked" edges to the User entity.
func (u *GroupUpdateOne) ClearBlocked() *GroupUpdateOne {
	u.mutation.ClearBlocked()
	return u
}

// RemoveBlockedIDs removes the "blocked" edge to User entities by IDs.
func (u *GroupUpdateOne) RemoveBlockedIDs(ids ...int) *GroupUpdateOne {
	u.mutation.RemoveBlockedIDs(ids...)
	return u
}

// RemoveBlocked removes "blocked" edges to User entities.
func (u *GroupUpdateOne) RemoveBlocked(v ...*User) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveBlockedIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (u *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	u.mutation.ClearUsers()
	return u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (u *GroupUpdateOne) RemoveUserIDs(ids ...int) *GroupUpdateOne {
	u.mutation.RemoveUserIDs(ids...)
	return u
}

// RemoveUsers removes "users" edges to User entities.
func (u *GroupUpdateOne) RemoveUsers(v ...*User) *GroupUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveUserIDs(ids...)
}

// ClearInfo clears the "info" edge to the GroupInfo entity.
func (u *GroupUpdateOne) ClearInfo() *GroupUpdateOne {
	u.mutation.ClearInfo()
	return u
}

// Where appends a list predicates to the GroupUpdate builder.
func (u *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Group entity.
func (u *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, u.sqlSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *GroupUpdateOne) check() error {
	if v, ok := u.mutation.GetType(); ok {
		if err := group.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Group.type": %w`, err)}
		}
	}
	if v, ok := u.mutation.MaxUsers(); ok {
		if err := group.MaxUsersValidator(v); err != nil {
			return &ValidationError{Name: "max_users", err: fmt.Errorf(`ent: validator failed for field "Group.max_users": %w`, err)}
		}
	}
	if v, ok := u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if u.mutation.InfoCleared() && len(u.mutation.InfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.info"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (u *GroupUpdateOne) Modify(modifiers ...func(*sql.UpdateBuilder)) *GroupUpdateOne {
	u.modifiers = append(u.modifiers, modifiers...)
	return u
}

func (u *GroupUpdateOne) sqlSave(ctx context.Context) (_n *Group, err error) {
	if err := u.check(); err != nil {
		return _n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt))
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := u.mutation.Active(); ok {
		_spec.SetField(group.FieldActive, field.TypeBool, value)
	}
	if value, ok := u.mutation.Expire(); ok {
		_spec.SetField(group.FieldExpire, field.TypeTime, value)
	}
	if value, ok := u.mutation.GetType(); ok {
		_spec.SetField(group.FieldType, field.TypeString, value)
	}
	if u.mutation.TypeCleared() {
		_spec.ClearField(group.FieldType, field.TypeString)
	}
	if value, ok := u.mutation.MaxUsers(); ok {
		_spec.SetField(group.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := u.mutation.AddedMaxUsers(); ok {
		_spec.AddField(group.FieldMaxUsers, field.TypeInt, value)
	}
	if u.mutation.MaxUsersCleared() {
		_spec.ClearField(group.FieldMaxUsers, field.TypeInt)
	}
	if value, ok := u.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.FilesTable,
			Columns: []string{group.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.BlockedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedBlockedIDs(); len(nodes) > 0 && !u.mutation.BlockedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.BlockedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.BlockedTable,
			Columns: []string{group.BlockedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if u.mutation.InfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.InfoTable,
			Columns: []string{group.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := u.mutation.InfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   group.InfoTable,
			Columns: []string{group.InfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(u.modifiers...)
	_n = &Group{config: u.config}
	_spec.Assign = _n.assignValues
	_spec.ScanValues = _n.scanValues
	if err = sqlgraph.UpdateNode(ctx, u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	u.mutation.done = true
	return _n, nil
}
