// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"entgo.io/ent/entc/integration/gremlin/ent/socialprofile"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
)

// SocialProfileUpdate is the builder for updating SocialProfile entities.
type SocialProfileUpdate struct {
	config
	hooks    []Hook
	mutation *SocialProfileMutation
}

// Where appends a list predicates to the SocialProfileUpdate builder.
func (spu *SocialProfileUpdate) Where(ps ...predicate.SocialProfile) *SocialProfileUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetDesc sets the "desc" field.
func (spu *SocialProfileUpdate) SetDesc(s string) *SocialProfileUpdate {
	spu.mutation.SetDesc(s)
	return spu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spu *SocialProfileUpdate) SetUserID(id string) *SocialProfileUpdate {
	spu.mutation.SetUserID(id)
	return spu
}

// SetUser sets the "user" edge to the User entity.
func (spu *SocialProfileUpdate) SetUser(u *User) *SocialProfileUpdate {
	return spu.SetUserID(u.ID)
}

// Mutation returns the SocialProfileMutation object of the builder.
func (spu *SocialProfileUpdate) Mutation() *SocialProfileMutation {
	return spu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spu *SocialProfileUpdate) ClearUser() *SocialProfileUpdate {
	spu.mutation.ClearUser()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SocialProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.gremlinSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SocialProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SocialProfileUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SocialProfileUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SocialProfileUpdate) check() error {
	if _, ok := spu.mutation.UserID(); spu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SocialProfile.user"`)
	}
	return nil
}

func (spu *SocialProfileUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := spu.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := spu.gremlin().Query()
	if err := spu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	spu.mutation.done = true
	return res.ReadInt()
}

func (spu *SocialProfileUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(socialprofile.Label)
	for _, p := range spu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := spu.mutation.Desc(); ok {
		v.Property(dsl.Single, socialprofile.FieldDesc, value)
	}
	if spu.mutation.UserCleared() {
		tr := rv.Clone().InE(user.SocialProfilesLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range spu.mutation.UserIDs() {
		v.AddE(user.SocialProfilesLabel).From(g.V(id)).InV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SocialProfileUpdateOne is the builder for updating a single SocialProfile entity.
type SocialProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SocialProfileMutation
}

// SetDesc sets the "desc" field.
func (spuo *SocialProfileUpdateOne) SetDesc(s string) *SocialProfileUpdateOne {
	spuo.mutation.SetDesc(s)
	return spuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spuo *SocialProfileUpdateOne) SetUserID(id string) *SocialProfileUpdateOne {
	spuo.mutation.SetUserID(id)
	return spuo
}

// SetUser sets the "user" edge to the User entity.
func (spuo *SocialProfileUpdateOne) SetUser(u *User) *SocialProfileUpdateOne {
	return spuo.SetUserID(u.ID)
}

// Mutation returns the SocialProfileMutation object of the builder.
func (spuo *SocialProfileUpdateOne) Mutation() *SocialProfileMutation {
	return spuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *SocialProfileUpdateOne) ClearUser() *SocialProfileUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// Where appends a list predicates to the SocialProfileUpdate builder.
func (spuo *SocialProfileUpdateOne) Where(ps ...predicate.SocialProfile) *SocialProfileUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SocialProfileUpdateOne) Select(field string, fields ...string) *SocialProfileUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SocialProfile entity.
func (spuo *SocialProfileUpdateOne) Save(ctx context.Context) (*SocialProfile, error) {
	return withHooks(ctx, spuo.gremlinSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SocialProfileUpdateOne) SaveX(ctx context.Context) *SocialProfile {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SocialProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SocialProfileUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SocialProfileUpdateOne) check() error {
	if _, ok := spuo.mutation.UserID(); spuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SocialProfile.user"`)
	}
	return nil
}

func (spuo *SocialProfileUpdateOne) gremlinSave(ctx context.Context) (*SocialProfile, error) {
	if err := spuo.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SocialProfile.id" for update`)}
	}
	query, bindings := spuo.gremlin(id).Query()
	if err := spuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	spuo.mutation.done = true
	sp := &SocialProfile{config: spuo.config}
	if err := sp.FromResponse(res); err != nil {
		return nil, err
	}
	return sp, nil
}

func (spuo *SocialProfileUpdateOne) gremlin(id string) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := spuo.mutation.Desc(); ok {
		v.Property(dsl.Single, socialprofile.FieldDesc, value)
	}
	if spuo.mutation.UserCleared() {
		tr := rv.Clone().InE(user.SocialProfilesLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range spuo.mutation.UserIDs() {
		v.AddE(user.SocialProfilesLabel).From(g.V(id)).InV()
	}
	if len(spuo.fields) > 0 {
		fields := make([]any, 0, len(spuo.fields)+1)
		fields = append(fields, true)
		for _, f := range spuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
