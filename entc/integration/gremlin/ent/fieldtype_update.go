// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net"
	"net/http"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/entc/integration/ent/role"
	"entgo.io/ent/entc/integration/ent/schema"
	"entgo.io/ent/entc/integration/gremlin/ent/fieldtype"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"github.com/google/uuid"
)

// FieldTypeUpdate is the builder for updating FieldType entities.
type FieldTypeUpdate struct {
	config
	hooks    []Hook
	mutation *FieldTypeMutation
}

// Where appends a list predicates to the FieldTypeUpdate builder.
func (_u *FieldTypeUpdate) Where(ps ...predicate.FieldType) *FieldTypeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetInt sets the "int" field.
func (_u *FieldTypeUpdate) SetInt(v int) *FieldTypeUpdate {
	_u.mutation.ResetInt()
	_u.mutation.SetInt(v)
	return _u
}

// AddInt adds value to the "int" field.
func (_u *FieldTypeUpdate) AddInt(v int) *FieldTypeUpdate {
	_u.mutation.AddInt(v)
	return _u
}

// SetInt8 sets the "int8" field.
func (_u *FieldTypeUpdate) SetInt8(v int8) *FieldTypeUpdate {
	_u.mutation.ResetInt8()
	_u.mutation.SetInt8(v)
	return _u
}

// AddInt8 adds value to the "int8" field.
func (_u *FieldTypeUpdate) AddInt8(v int8) *FieldTypeUpdate {
	_u.mutation.AddInt8(v)
	return _u
}

// SetInt16 sets the "int16" field.
func (_u *FieldTypeUpdate) SetInt16(v int16) *FieldTypeUpdate {
	_u.mutation.ResetInt16()
	_u.mutation.SetInt16(v)
	return _u
}

// AddInt16 adds value to the "int16" field.
func (_u *FieldTypeUpdate) AddInt16(v int16) *FieldTypeUpdate {
	_u.mutation.AddInt16(v)
	return _u
}

// SetInt32 sets the "int32" field.
func (_u *FieldTypeUpdate) SetInt32(v int32) *FieldTypeUpdate {
	_u.mutation.ResetInt32()
	_u.mutation.SetInt32(v)
	return _u
}

// AddInt32 adds value to the "int32" field.
func (_u *FieldTypeUpdate) AddInt32(v int32) *FieldTypeUpdate {
	_u.mutation.AddInt32(v)
	return _u
}

// SetInt64 sets the "int64" field.
func (_u *FieldTypeUpdate) SetInt64(v int64) *FieldTypeUpdate {
	_u.mutation.ResetInt64()
	_u.mutation.SetInt64(v)
	return _u
}

// AddInt64 adds value to the "int64" field.
func (_u *FieldTypeUpdate) AddInt64(v int64) *FieldTypeUpdate {
	_u.mutation.AddInt64(v)
	return _u
}

// SetOptionalInt sets the "optional_int" field.
func (_u *FieldTypeUpdate) SetOptionalInt(v int) *FieldTypeUpdate {
	_u.mutation.ResetOptionalInt()
	_u.mutation.SetOptionalInt(v)
	return _u
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalInt(v *int) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalInt(*v)
	}
	return _u
}

// AddOptionalInt adds value to the "optional_int" field.
func (_u *FieldTypeUpdate) AddOptionalInt(v int) *FieldTypeUpdate {
	_u.mutation.AddOptionalInt(v)
	return _u
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (_u *FieldTypeUpdate) ClearOptionalInt() *FieldTypeUpdate {
	_u.mutation.ClearOptionalInt()
	return _u
}

// SetOptionalInt8 sets the "optional_int8" field.
func (_u *FieldTypeUpdate) SetOptionalInt8(v int8) *FieldTypeUpdate {
	_u.mutation.ResetOptionalInt8()
	_u.mutation.SetOptionalInt8(v)
	return _u
}

// SetNillableOptionalInt8 sets the "optional_int8" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalInt8(v *int8) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalInt8(*v)
	}
	return _u
}

// AddOptionalInt8 adds value to the "optional_int8" field.
func (_u *FieldTypeUpdate) AddOptionalInt8(v int8) *FieldTypeUpdate {
	_u.mutation.AddOptionalInt8(v)
	return _u
}

// ClearOptionalInt8 clears the value of the "optional_int8" field.
func (_u *FieldTypeUpdate) ClearOptionalInt8() *FieldTypeUpdate {
	_u.mutation.ClearOptionalInt8()
	return _u
}

// SetOptionalInt16 sets the "optional_int16" field.
func (_u *FieldTypeUpdate) SetOptionalInt16(v int16) *FieldTypeUpdate {
	_u.mutation.ResetOptionalInt16()
	_u.mutation.SetOptionalInt16(v)
	return _u
}

// SetNillableOptionalInt16 sets the "optional_int16" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalInt16(v *int16) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalInt16(*v)
	}
	return _u
}

// AddOptionalInt16 adds value to the "optional_int16" field.
func (_u *FieldTypeUpdate) AddOptionalInt16(v int16) *FieldTypeUpdate {
	_u.mutation.AddOptionalInt16(v)
	return _u
}

// ClearOptionalInt16 clears the value of the "optional_int16" field.
func (_u *FieldTypeUpdate) ClearOptionalInt16() *FieldTypeUpdate {
	_u.mutation.ClearOptionalInt16()
	return _u
}

// SetOptionalInt32 sets the "optional_int32" field.
func (_u *FieldTypeUpdate) SetOptionalInt32(v int32) *FieldTypeUpdate {
	_u.mutation.ResetOptionalInt32()
	_u.mutation.SetOptionalInt32(v)
	return _u
}

// SetNillableOptionalInt32 sets the "optional_int32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalInt32(*v)
	}
	return _u
}

// AddOptionalInt32 adds value to the "optional_int32" field.
func (_u *FieldTypeUpdate) AddOptionalInt32(v int32) *FieldTypeUpdate {
	_u.mutation.AddOptionalInt32(v)
	return _u
}

// ClearOptionalInt32 clears the value of the "optional_int32" field.
func (_u *FieldTypeUpdate) ClearOptionalInt32() *FieldTypeUpdate {
	_u.mutation.ClearOptionalInt32()
	return _u
}

// SetOptionalInt64 sets the "optional_int64" field.
func (_u *FieldTypeUpdate) SetOptionalInt64(v int64) *FieldTypeUpdate {
	_u.mutation.ResetOptionalInt64()
	_u.mutation.SetOptionalInt64(v)
	return _u
}

// SetNillableOptionalInt64 sets the "optional_int64" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalInt64(v *int64) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalInt64(*v)
	}
	return _u
}

// AddOptionalInt64 adds value to the "optional_int64" field.
func (_u *FieldTypeUpdate) AddOptionalInt64(v int64) *FieldTypeUpdate {
	_u.mutation.AddOptionalInt64(v)
	return _u
}

// ClearOptionalInt64 clears the value of the "optional_int64" field.
func (_u *FieldTypeUpdate) ClearOptionalInt64() *FieldTypeUpdate {
	_u.mutation.ClearOptionalInt64()
	return _u
}

// SetNillableInt sets the "nillable_int" field.
func (_u *FieldTypeUpdate) SetNillableInt(v int) *FieldTypeUpdate {
	_u.mutation.ResetNillableInt()
	_u.mutation.SetNillableInt(v)
	return _u
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableInt(v *int) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableInt(*v)
	}
	return _u
}

// AddNillableInt adds value to the "nillable_int" field.
func (_u *FieldTypeUpdate) AddNillableInt(v int) *FieldTypeUpdate {
	_u.mutation.AddNillableInt(v)
	return _u
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (_u *FieldTypeUpdate) ClearNillableInt() *FieldTypeUpdate {
	_u.mutation.ClearNillableInt()
	return _u
}

// SetNillableInt8 sets the "nillable_int8" field.
func (_u *FieldTypeUpdate) SetNillableInt8(v int8) *FieldTypeUpdate {
	_u.mutation.ResetNillableInt8()
	_u.mutation.SetNillableInt8(v)
	return _u
}

// SetNillableNillableInt8 sets the "nillable_int8" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableInt8(v *int8) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableInt8(*v)
	}
	return _u
}

// AddNillableInt8 adds value to the "nillable_int8" field.
func (_u *FieldTypeUpdate) AddNillableInt8(v int8) *FieldTypeUpdate {
	_u.mutation.AddNillableInt8(v)
	return _u
}

// ClearNillableInt8 clears the value of the "nillable_int8" field.
func (_u *FieldTypeUpdate) ClearNillableInt8() *FieldTypeUpdate {
	_u.mutation.ClearNillableInt8()
	return _u
}

// SetNillableInt16 sets the "nillable_int16" field.
func (_u *FieldTypeUpdate) SetNillableInt16(v int16) *FieldTypeUpdate {
	_u.mutation.ResetNillableInt16()
	_u.mutation.SetNillableInt16(v)
	return _u
}

// SetNillableNillableInt16 sets the "nillable_int16" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableInt16(v *int16) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableInt16(*v)
	}
	return _u
}

// AddNillableInt16 adds value to the "nillable_int16" field.
func (_u *FieldTypeUpdate) AddNillableInt16(v int16) *FieldTypeUpdate {
	_u.mutation.AddNillableInt16(v)
	return _u
}

// ClearNillableInt16 clears the value of the "nillable_int16" field.
func (_u *FieldTypeUpdate) ClearNillableInt16() *FieldTypeUpdate {
	_u.mutation.ClearNillableInt16()
	return _u
}

// SetNillableInt32 sets the "nillable_int32" field.
func (_u *FieldTypeUpdate) SetNillableInt32(v int32) *FieldTypeUpdate {
	_u.mutation.ResetNillableInt32()
	_u.mutation.SetNillableInt32(v)
	return _u
}

// SetNillableNillableInt32 sets the "nillable_int32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableInt32(*v)
	}
	return _u
}

// AddNillableInt32 adds value to the "nillable_int32" field.
func (_u *FieldTypeUpdate) AddNillableInt32(v int32) *FieldTypeUpdate {
	_u.mutation.AddNillableInt32(v)
	return _u
}

// ClearNillableInt32 clears the value of the "nillable_int32" field.
func (_u *FieldTypeUpdate) ClearNillableInt32() *FieldTypeUpdate {
	_u.mutation.ClearNillableInt32()
	return _u
}

// SetNillableInt64 sets the "nillable_int64" field.
func (_u *FieldTypeUpdate) SetNillableInt64(v int64) *FieldTypeUpdate {
	_u.mutation.ResetNillableInt64()
	_u.mutation.SetNillableInt64(v)
	return _u
}

// SetNillableNillableInt64 sets the "nillable_int64" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableInt64(v *int64) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableInt64(*v)
	}
	return _u
}

// AddNillableInt64 adds value to the "nillable_int64" field.
func (_u *FieldTypeUpdate) AddNillableInt64(v int64) *FieldTypeUpdate {
	_u.mutation.AddNillableInt64(v)
	return _u
}

// ClearNillableInt64 clears the value of the "nillable_int64" field.
func (_u *FieldTypeUpdate) ClearNillableInt64() *FieldTypeUpdate {
	_u.mutation.ClearNillableInt64()
	return _u
}

// SetValidateOptionalInt32 sets the "validate_optional_int32" field.
func (_u *FieldTypeUpdate) SetValidateOptionalInt32(v int32) *FieldTypeUpdate {
	_u.mutation.ResetValidateOptionalInt32()
	_u.mutation.SetValidateOptionalInt32(v)
	return _u
}

// SetNillableValidateOptionalInt32 sets the "validate_optional_int32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableValidateOptionalInt32(v *int32) *FieldTypeUpdate {
	if v != nil {
		_u.SetValidateOptionalInt32(*v)
	}
	return _u
}

// AddValidateOptionalInt32 adds value to the "validate_optional_int32" field.
func (_u *FieldTypeUpdate) AddValidateOptionalInt32(v int32) *FieldTypeUpdate {
	_u.mutation.AddValidateOptionalInt32(v)
	return _u
}

// ClearValidateOptionalInt32 clears the value of the "validate_optional_int32" field.
func (_u *FieldTypeUpdate) ClearValidateOptionalInt32() *FieldTypeUpdate {
	_u.mutation.ClearValidateOptionalInt32()
	return _u
}

// SetOptionalUint sets the "optional_uint" field.
func (_u *FieldTypeUpdate) SetOptionalUint(v uint) *FieldTypeUpdate {
	_u.mutation.ResetOptionalUint()
	_u.mutation.SetOptionalUint(v)
	return _u
}

// SetNillableOptionalUint sets the "optional_uint" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUint(v *uint) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUint(*v)
	}
	return _u
}

// AddOptionalUint adds value to the "optional_uint" field.
func (_u *FieldTypeUpdate) AddOptionalUint(v int) *FieldTypeUpdate {
	_u.mutation.AddOptionalUint(v)
	return _u
}

// ClearOptionalUint clears the value of the "optional_uint" field.
func (_u *FieldTypeUpdate) ClearOptionalUint() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUint()
	return _u
}

// SetOptionalUint8 sets the "optional_uint8" field.
func (_u *FieldTypeUpdate) SetOptionalUint8(v uint8) *FieldTypeUpdate {
	_u.mutation.ResetOptionalUint8()
	_u.mutation.SetOptionalUint8(v)
	return _u
}

// SetNillableOptionalUint8 sets the "optional_uint8" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUint8(v *uint8) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUint8(*v)
	}
	return _u
}

// AddOptionalUint8 adds value to the "optional_uint8" field.
func (_u *FieldTypeUpdate) AddOptionalUint8(v int8) *FieldTypeUpdate {
	_u.mutation.AddOptionalUint8(v)
	return _u
}

// ClearOptionalUint8 clears the value of the "optional_uint8" field.
func (_u *FieldTypeUpdate) ClearOptionalUint8() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUint8()
	return _u
}

// SetOptionalUint16 sets the "optional_uint16" field.
func (_u *FieldTypeUpdate) SetOptionalUint16(v uint16) *FieldTypeUpdate {
	_u.mutation.ResetOptionalUint16()
	_u.mutation.SetOptionalUint16(v)
	return _u
}

// SetNillableOptionalUint16 sets the "optional_uint16" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUint16(v *uint16) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUint16(*v)
	}
	return _u
}

// AddOptionalUint16 adds value to the "optional_uint16" field.
func (_u *FieldTypeUpdate) AddOptionalUint16(v int16) *FieldTypeUpdate {
	_u.mutation.AddOptionalUint16(v)
	return _u
}

// ClearOptionalUint16 clears the value of the "optional_uint16" field.
func (_u *FieldTypeUpdate) ClearOptionalUint16() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUint16()
	return _u
}

// SetOptionalUint32 sets the "optional_uint32" field.
func (_u *FieldTypeUpdate) SetOptionalUint32(v uint32) *FieldTypeUpdate {
	_u.mutation.ResetOptionalUint32()
	_u.mutation.SetOptionalUint32(v)
	return _u
}

// SetNillableOptionalUint32 sets the "optional_uint32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUint32(v *uint32) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUint32(*v)
	}
	return _u
}

// AddOptionalUint32 adds value to the "optional_uint32" field.
func (_u *FieldTypeUpdate) AddOptionalUint32(v int32) *FieldTypeUpdate {
	_u.mutation.AddOptionalUint32(v)
	return _u
}

// ClearOptionalUint32 clears the value of the "optional_uint32" field.
func (_u *FieldTypeUpdate) ClearOptionalUint32() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUint32()
	return _u
}

// SetOptionalUint64 sets the "optional_uint64" field.
func (_u *FieldTypeUpdate) SetOptionalUint64(v uint64) *FieldTypeUpdate {
	_u.mutation.ResetOptionalUint64()
	_u.mutation.SetOptionalUint64(v)
	return _u
}

// SetNillableOptionalUint64 sets the "optional_uint64" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUint64(v *uint64) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUint64(*v)
	}
	return _u
}

// AddOptionalUint64 adds value to the "optional_uint64" field.
func (_u *FieldTypeUpdate) AddOptionalUint64(v int64) *FieldTypeUpdate {
	_u.mutation.AddOptionalUint64(v)
	return _u
}

// ClearOptionalUint64 clears the value of the "optional_uint64" field.
func (_u *FieldTypeUpdate) ClearOptionalUint64() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUint64()
	return _u
}

// SetState sets the "state" field.
func (_u *FieldTypeUpdate) SetState(v fieldtype.State) *FieldTypeUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableState(v *fieldtype.State) *FieldTypeUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *FieldTypeUpdate) ClearState() *FieldTypeUpdate {
	_u.mutation.ClearState()
	return _u
}

// SetOptionalFloat sets the "optional_float" field.
func (_u *FieldTypeUpdate) SetOptionalFloat(v float64) *FieldTypeUpdate {
	_u.mutation.ResetOptionalFloat()
	_u.mutation.SetOptionalFloat(v)
	return _u
}

// SetNillableOptionalFloat sets the "optional_float" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalFloat(v *float64) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalFloat(*v)
	}
	return _u
}

// AddOptionalFloat adds value to the "optional_float" field.
func (_u *FieldTypeUpdate) AddOptionalFloat(v float64) *FieldTypeUpdate {
	_u.mutation.AddOptionalFloat(v)
	return _u
}

// ClearOptionalFloat clears the value of the "optional_float" field.
func (_u *FieldTypeUpdate) ClearOptionalFloat() *FieldTypeUpdate {
	_u.mutation.ClearOptionalFloat()
	return _u
}

// SetOptionalFloat32 sets the "optional_float32" field.
func (_u *FieldTypeUpdate) SetOptionalFloat32(v float32) *FieldTypeUpdate {
	_u.mutation.ResetOptionalFloat32()
	_u.mutation.SetOptionalFloat32(v)
	return _u
}

// SetNillableOptionalFloat32 sets the "optional_float32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalFloat32(v *float32) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalFloat32(*v)
	}
	return _u
}

// AddOptionalFloat32 adds value to the "optional_float32" field.
func (_u *FieldTypeUpdate) AddOptionalFloat32(v float32) *FieldTypeUpdate {
	_u.mutation.AddOptionalFloat32(v)
	return _u
}

// ClearOptionalFloat32 clears the value of the "optional_float32" field.
func (_u *FieldTypeUpdate) ClearOptionalFloat32() *FieldTypeUpdate {
	_u.mutation.ClearOptionalFloat32()
	return _u
}

// SetText sets the "text" field.
func (_u *FieldTypeUpdate) SetText(v string) *FieldTypeUpdate {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableText(v *string) *FieldTypeUpdate {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// ClearText clears the value of the "text" field.
func (_u *FieldTypeUpdate) ClearText() *FieldTypeUpdate {
	_u.mutation.ClearText()
	return _u
}

// SetDatetime sets the "datetime" field.
func (_u *FieldTypeUpdate) SetDatetime(v time.Time) *FieldTypeUpdate {
	_u.mutation.SetDatetime(v)
	return _u
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableDatetime(v *time.Time) *FieldTypeUpdate {
	if v != nil {
		_u.SetDatetime(*v)
	}
	return _u
}

// ClearDatetime clears the value of the "datetime" field.
func (_u *FieldTypeUpdate) ClearDatetime() *FieldTypeUpdate {
	_u.mutation.ClearDatetime()
	return _u
}

// SetDecimal sets the "decimal" field.
func (_u *FieldTypeUpdate) SetDecimal(v float64) *FieldTypeUpdate {
	_u.mutation.ResetDecimal()
	_u.mutation.SetDecimal(v)
	return _u
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableDecimal(v *float64) *FieldTypeUpdate {
	if v != nil {
		_u.SetDecimal(*v)
	}
	return _u
}

// AddDecimal adds value to the "decimal" field.
func (_u *FieldTypeUpdate) AddDecimal(v float64) *FieldTypeUpdate {
	_u.mutation.AddDecimal(v)
	return _u
}

// ClearDecimal clears the value of the "decimal" field.
func (_u *FieldTypeUpdate) ClearDecimal() *FieldTypeUpdate {
	_u.mutation.ClearDecimal()
	return _u
}

// SetLinkOther sets the "link_other" field.
func (_u *FieldTypeUpdate) SetLinkOther(v *schema.Link) *FieldTypeUpdate {
	_u.mutation.SetLinkOther(v)
	return _u
}

// ClearLinkOther clears the value of the "link_other" field.
func (_u *FieldTypeUpdate) ClearLinkOther() *FieldTypeUpdate {
	_u.mutation.ClearLinkOther()
	return _u
}

// SetLinkOtherFunc sets the "link_other_func" field.
func (_u *FieldTypeUpdate) SetLinkOtherFunc(v *schema.Link) *FieldTypeUpdate {
	_u.mutation.SetLinkOtherFunc(v)
	return _u
}

// ClearLinkOtherFunc clears the value of the "link_other_func" field.
func (_u *FieldTypeUpdate) ClearLinkOtherFunc() *FieldTypeUpdate {
	_u.mutation.ClearLinkOtherFunc()
	return _u
}

// SetMAC sets the "mac" field.
func (_u *FieldTypeUpdate) SetMAC(v schema.MAC) *FieldTypeUpdate {
	_u.mutation.SetMAC(v)
	return _u
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableMAC(v *schema.MAC) *FieldTypeUpdate {
	if v != nil {
		_u.SetMAC(*v)
	}
	return _u
}

// ClearMAC clears the value of the "mac" field.
func (_u *FieldTypeUpdate) ClearMAC() *FieldTypeUpdate {
	_u.mutation.ClearMAC()
	return _u
}

// SetStringArray sets the "string_array" field.
func (_u *FieldTypeUpdate) SetStringArray(v schema.Strings) *FieldTypeUpdate {
	_u.mutation.SetStringArray(v)
	return _u
}

// ClearStringArray clears the value of the "string_array" field.
func (_u *FieldTypeUpdate) ClearStringArray() *FieldTypeUpdate {
	_u.mutation.ClearStringArray()
	return _u
}

// SetPassword sets the "password" field.
func (_u *FieldTypeUpdate) SetPassword(v string) *FieldTypeUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillablePassword(v *string) *FieldTypeUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *FieldTypeUpdate) ClearPassword() *FieldTypeUpdate {
	_u.mutation.ClearPassword()
	return _u
}

// SetStringScanner sets the "string_scanner" field.
func (_u *FieldTypeUpdate) SetStringScanner(v schema.StringScanner) *FieldTypeUpdate {
	_u.mutation.SetStringScanner(v)
	return _u
}

// SetNillableStringScanner sets the "string_scanner" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableStringScanner(v *schema.StringScanner) *FieldTypeUpdate {
	if v != nil {
		_u.SetStringScanner(*v)
	}
	return _u
}

// ClearStringScanner clears the value of the "string_scanner" field.
func (_u *FieldTypeUpdate) ClearStringScanner() *FieldTypeUpdate {
	_u.mutation.ClearStringScanner()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *FieldTypeUpdate) SetDuration(v time.Duration) *FieldTypeUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *FieldTypeUpdate) AddDuration(v time.Duration) *FieldTypeUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *FieldTypeUpdate) ClearDuration() *FieldTypeUpdate {
	_u.mutation.ClearDuration()
	return _u
}

// SetDir sets the "dir" field.
func (_u *FieldTypeUpdate) SetDir(v http.Dir) *FieldTypeUpdate {
	_u.mutation.SetDir(v)
	return _u
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableDir(v *http.Dir) *FieldTypeUpdate {
	if v != nil {
		_u.SetDir(*v)
	}
	return _u
}

// SetNdir sets the "ndir" field.
func (_u *FieldTypeUpdate) SetNdir(v http.Dir) *FieldTypeUpdate {
	_u.mutation.SetNdir(v)
	return _u
}

// SetNillableNdir sets the "ndir" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNdir(v *http.Dir) *FieldTypeUpdate {
	if v != nil {
		_u.SetNdir(*v)
	}
	return _u
}

// ClearNdir clears the value of the "ndir" field.
func (_u *FieldTypeUpdate) ClearNdir() *FieldTypeUpdate {
	_u.mutation.ClearNdir()
	return _u
}

// SetStr sets the "str" field.
func (_u *FieldTypeUpdate) SetStr(v sql.NullString) *FieldTypeUpdate {
	_u.mutation.SetStr(v)
	return _u
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableStr(v *sql.NullString) *FieldTypeUpdate {
	if v != nil {
		_u.SetStr(*v)
	}
	return _u
}

// ClearStr clears the value of the "str" field.
func (_u *FieldTypeUpdate) ClearStr() *FieldTypeUpdate {
	_u.mutation.ClearStr()
	return _u
}

// SetNullStr sets the "null_str" field.
func (_u *FieldTypeUpdate) SetNullStr(v *sql.NullString) *FieldTypeUpdate {
	_u.mutation.SetNullStr(v)
	return _u
}

// ClearNullStr clears the value of the "null_str" field.
func (_u *FieldTypeUpdate) ClearNullStr() *FieldTypeUpdate {
	_u.mutation.ClearNullStr()
	return _u
}

// SetLink sets the "link" field.
func (_u *FieldTypeUpdate) SetLink(v schema.Link) *FieldTypeUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableLink(v *schema.Link) *FieldTypeUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *FieldTypeUpdate) ClearLink() *FieldTypeUpdate {
	_u.mutation.ClearLink()
	return _u
}

// SetNullLink sets the "null_link" field.
func (_u *FieldTypeUpdate) SetNullLink(v *schema.Link) *FieldTypeUpdate {
	_u.mutation.SetNullLink(v)
	return _u
}

// ClearNullLink clears the value of the "null_link" field.
func (_u *FieldTypeUpdate) ClearNullLink() *FieldTypeUpdate {
	_u.mutation.ClearNullLink()
	return _u
}

// SetActive sets the "active" field.
func (_u *FieldTypeUpdate) SetActive(v schema.Status) *FieldTypeUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableActive(v *schema.Status) *FieldTypeUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// ClearActive clears the value of the "active" field.
func (_u *FieldTypeUpdate) ClearActive() *FieldTypeUpdate {
	_u.mutation.ClearActive()
	return _u
}

// SetNullActive sets the "null_active" field.
func (_u *FieldTypeUpdate) SetNullActive(v schema.Status) *FieldTypeUpdate {
	_u.mutation.SetNullActive(v)
	return _u
}

// SetNillableNullActive sets the "null_active" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNullActive(v *schema.Status) *FieldTypeUpdate {
	if v != nil {
		_u.SetNullActive(*v)
	}
	return _u
}

// ClearNullActive clears the value of the "null_active" field.
func (_u *FieldTypeUpdate) ClearNullActive() *FieldTypeUpdate {
	_u.mutation.ClearNullActive()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *FieldTypeUpdate) SetDeleted(v *sql.NullBool) *FieldTypeUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// ClearDeleted clears the value of the "deleted" field.
func (_u *FieldTypeUpdate) ClearDeleted() *FieldTypeUpdate {
	_u.mutation.ClearDeleted()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FieldTypeUpdate) SetDeletedAt(v *sql.NullTime) *FieldTypeUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FieldTypeUpdate) ClearDeletedAt() *FieldTypeUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetRawData sets the "raw_data" field.
func (_u *FieldTypeUpdate) SetRawData(v []byte) *FieldTypeUpdate {
	_u.mutation.SetRawData(v)
	return _u
}

// ClearRawData clears the value of the "raw_data" field.
func (_u *FieldTypeUpdate) ClearRawData() *FieldTypeUpdate {
	_u.mutation.ClearRawData()
	return _u
}

// SetSensitive sets the "sensitive" field.
func (_u *FieldTypeUpdate) SetSensitive(v []byte) *FieldTypeUpdate {
	_u.mutation.SetSensitive(v)
	return _u
}

// ClearSensitive clears the value of the "sensitive" field.
func (_u *FieldTypeUpdate) ClearSensitive() *FieldTypeUpdate {
	_u.mutation.ClearSensitive()
	return _u
}

// SetIP sets the "ip" field.
func (_u *FieldTypeUpdate) SetIP(v net.IP) *FieldTypeUpdate {
	_u.mutation.SetIP(v)
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *FieldTypeUpdate) ClearIP() *FieldTypeUpdate {
	_u.mutation.ClearIP()
	return _u
}

// SetNullInt64 sets the "null_int64" field.
func (_u *FieldTypeUpdate) SetNullInt64(v *sql.NullInt64) *FieldTypeUpdate {
	_u.mutation.SetNullInt64(v)
	return _u
}

// ClearNullInt64 clears the value of the "null_int64" field.
func (_u *FieldTypeUpdate) ClearNullInt64() *FieldTypeUpdate {
	_u.mutation.ClearNullInt64()
	return _u
}

// SetSchemaInt sets the "schema_int" field.
func (_u *FieldTypeUpdate) SetSchemaInt(v schema.Int) *FieldTypeUpdate {
	_u.mutation.ResetSchemaInt()
	_u.mutation.SetSchemaInt(v)
	return _u
}

// SetNillableSchemaInt sets the "schema_int" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableSchemaInt(v *schema.Int) *FieldTypeUpdate {
	if v != nil {
		_u.SetSchemaInt(*v)
	}
	return _u
}

// AddSchemaInt adds value to the "schema_int" field.
func (_u *FieldTypeUpdate) AddSchemaInt(v schema.Int) *FieldTypeUpdate {
	_u.mutation.AddSchemaInt(v)
	return _u
}

// ClearSchemaInt clears the value of the "schema_int" field.
func (_u *FieldTypeUpdate) ClearSchemaInt() *FieldTypeUpdate {
	_u.mutation.ClearSchemaInt()
	return _u
}

// SetSchemaInt8 sets the "schema_int8" field.
func (_u *FieldTypeUpdate) SetSchemaInt8(v schema.Int8) *FieldTypeUpdate {
	_u.mutation.ResetSchemaInt8()
	_u.mutation.SetSchemaInt8(v)
	return _u
}

// SetNillableSchemaInt8 sets the "schema_int8" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableSchemaInt8(v *schema.Int8) *FieldTypeUpdate {
	if v != nil {
		_u.SetSchemaInt8(*v)
	}
	return _u
}

// AddSchemaInt8 adds value to the "schema_int8" field.
func (_u *FieldTypeUpdate) AddSchemaInt8(v schema.Int8) *FieldTypeUpdate {
	_u.mutation.AddSchemaInt8(v)
	return _u
}

// ClearSchemaInt8 clears the value of the "schema_int8" field.
func (_u *FieldTypeUpdate) ClearSchemaInt8() *FieldTypeUpdate {
	_u.mutation.ClearSchemaInt8()
	return _u
}

// SetSchemaInt64 sets the "schema_int64" field.
func (_u *FieldTypeUpdate) SetSchemaInt64(v schema.Int64) *FieldTypeUpdate {
	_u.mutation.ResetSchemaInt64()
	_u.mutation.SetSchemaInt64(v)
	return _u
}

// SetNillableSchemaInt64 sets the "schema_int64" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableSchemaInt64(v *schema.Int64) *FieldTypeUpdate {
	if v != nil {
		_u.SetSchemaInt64(*v)
	}
	return _u
}

// AddSchemaInt64 adds value to the "schema_int64" field.
func (_u *FieldTypeUpdate) AddSchemaInt64(v schema.Int64) *FieldTypeUpdate {
	_u.mutation.AddSchemaInt64(v)
	return _u
}

// ClearSchemaInt64 clears the value of the "schema_int64" field.
func (_u *FieldTypeUpdate) ClearSchemaInt64() *FieldTypeUpdate {
	_u.mutation.ClearSchemaInt64()
	return _u
}

// SetSchemaFloat sets the "schema_float" field.
func (_u *FieldTypeUpdate) SetSchemaFloat(v schema.Float64) *FieldTypeUpdate {
	_u.mutation.ResetSchemaFloat()
	_u.mutation.SetSchemaFloat(v)
	return _u
}

// SetNillableSchemaFloat sets the "schema_float" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableSchemaFloat(v *schema.Float64) *FieldTypeUpdate {
	if v != nil {
		_u.SetSchemaFloat(*v)
	}
	return _u
}

// AddSchemaFloat adds value to the "schema_float" field.
func (_u *FieldTypeUpdate) AddSchemaFloat(v schema.Float64) *FieldTypeUpdate {
	_u.mutation.AddSchemaFloat(v)
	return _u
}

// ClearSchemaFloat clears the value of the "schema_float" field.
func (_u *FieldTypeUpdate) ClearSchemaFloat() *FieldTypeUpdate {
	_u.mutation.ClearSchemaFloat()
	return _u
}

// SetSchemaFloat32 sets the "schema_float32" field.
func (_u *FieldTypeUpdate) SetSchemaFloat32(v schema.Float32) *FieldTypeUpdate {
	_u.mutation.ResetSchemaFloat32()
	_u.mutation.SetSchemaFloat32(v)
	return _u
}

// SetNillableSchemaFloat32 sets the "schema_float32" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableSchemaFloat32(v *schema.Float32) *FieldTypeUpdate {
	if v != nil {
		_u.SetSchemaFloat32(*v)
	}
	return _u
}

// AddSchemaFloat32 adds value to the "schema_float32" field.
func (_u *FieldTypeUpdate) AddSchemaFloat32(v schema.Float32) *FieldTypeUpdate {
	_u.mutation.AddSchemaFloat32(v)
	return _u
}

// ClearSchemaFloat32 clears the value of the "schema_float32" field.
func (_u *FieldTypeUpdate) ClearSchemaFloat32() *FieldTypeUpdate {
	_u.mutation.ClearSchemaFloat32()
	return _u
}

// SetNullFloat sets the "null_float" field.
func (_u *FieldTypeUpdate) SetNullFloat(v *sql.NullFloat64) *FieldTypeUpdate {
	_u.mutation.SetNullFloat(v)
	return _u
}

// ClearNullFloat clears the value of the "null_float" field.
func (_u *FieldTypeUpdate) ClearNullFloat() *FieldTypeUpdate {
	_u.mutation.ClearNullFloat()
	return _u
}

// SetRole sets the "role" field.
func (_u *FieldTypeUpdate) SetRole(v role.Role) *FieldTypeUpdate {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableRole(v *role.Role) *FieldTypeUpdate {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *FieldTypeUpdate) SetPriority(v role.Priority) *FieldTypeUpdate {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillablePriority(v *role.Priority) *FieldTypeUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *FieldTypeUpdate) ClearPriority() *FieldTypeUpdate {
	_u.mutation.ClearPriority()
	return _u
}

// SetOptionalUUID sets the "optional_uuid" field.
func (_u *FieldTypeUpdate) SetOptionalUUID(v uuid.UUID) *FieldTypeUpdate {
	_u.mutation.SetOptionalUUID(v)
	return _u
}

// SetNillableOptionalUUID sets the "optional_uuid" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableOptionalUUID(v *uuid.UUID) *FieldTypeUpdate {
	if v != nil {
		_u.SetOptionalUUID(*v)
	}
	return _u
}

// ClearOptionalUUID clears the value of the "optional_uuid" field.
func (_u *FieldTypeUpdate) ClearOptionalUUID() *FieldTypeUpdate {
	_u.mutation.ClearOptionalUUID()
	return _u
}

// SetNillableUUID sets the "nillable_uuid" field.
func (_u *FieldTypeUpdate) SetNillableUUID(v uuid.UUID) *FieldTypeUpdate {
	_u.mutation.SetNillableUUID(v)
	return _u
}

// SetNillableNillableUUID sets the "nillable_uuid" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableNillableUUID(v *uuid.UUID) *FieldTypeUpdate {
	if v != nil {
		_u.SetNillableUUID(*v)
	}
	return _u
}

// ClearNillableUUID clears the value of the "nillable_uuid" field.
func (_u *FieldTypeUpdate) ClearNillableUUID() *FieldTypeUpdate {
	_u.mutation.ClearNillableUUID()
	return _u
}

// SetStrings sets the "strings" field.
func (_u *FieldTypeUpdate) SetStrings(v []string) *FieldTypeUpdate {
	_u.mutation.SetStrings(v)
	return _u
}

// AppendStrings appends value to the "strings" field.
func (_u *FieldTypeUpdate) AppendStrings(v []string) *FieldTypeUpdate {
	_u.mutation.AppendStrings(v)
	return _u
}

// ClearStrings clears the value of the "strings" field.
func (_u *FieldTypeUpdate) ClearStrings() *FieldTypeUpdate {
	_u.mutation.ClearStrings()
	return _u
}

// SetPair sets the "pair" field.
func (_u *FieldTypeUpdate) SetPair(v schema.Pair) *FieldTypeUpdate {
	_u.mutation.SetPair(v)
	return _u
}

// SetNillablePair sets the "pair" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillablePair(v *schema.Pair) *FieldTypeUpdate {
	if v != nil {
		_u.SetPair(*v)
	}
	return _u
}

// SetNilPair sets the "nil_pair" field.
func (_u *FieldTypeUpdate) SetNilPair(v *schema.Pair) *FieldTypeUpdate {
	_u.mutation.SetNilPair(v)
	return _u
}

// ClearNilPair clears the value of the "nil_pair" field.
func (_u *FieldTypeUpdate) ClearNilPair() *FieldTypeUpdate {
	_u.mutation.ClearNilPair()
	return _u
}

// SetVstring sets the "vstring" field.
func (_u *FieldTypeUpdate) SetVstring(v schema.VString) *FieldTypeUpdate {
	_u.mutation.SetVstring(v)
	return _u
}

// SetNillableVstring sets the "vstring" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableVstring(v *schema.VString) *FieldTypeUpdate {
	if v != nil {
		_u.SetVstring(*v)
	}
	return _u
}

// SetTriple sets the "triple" field.
func (_u *FieldTypeUpdate) SetTriple(v schema.Triple) *FieldTypeUpdate {
	_u.mutation.SetTriple(v)
	return _u
}

// SetNillableTriple sets the "triple" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableTriple(v *schema.Triple) *FieldTypeUpdate {
	if v != nil {
		_u.SetTriple(*v)
	}
	return _u
}

// SetBigInt sets the "big_int" field.
func (_u *FieldTypeUpdate) SetBigInt(v schema.BigInt) *FieldTypeUpdate {
	_u.mutation.ResetBigInt()
	_u.mutation.SetBigInt(v)
	return _u
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillableBigInt(v *schema.BigInt) *FieldTypeUpdate {
	if v != nil {
		_u.SetBigInt(*v)
	}
	return _u
}

// AddBigInt adds value to the "big_int" field.
func (_u *FieldTypeUpdate) AddBigInt(v schema.BigInt) *FieldTypeUpdate {
	_u.mutation.AddBigInt(v)
	return _u
}

// ClearBigInt clears the value of the "big_int" field.
func (_u *FieldTypeUpdate) ClearBigInt() *FieldTypeUpdate {
	_u.mutation.ClearBigInt()
	return _u
}

// SetPasswordOther sets the "password_other" field.
func (_u *FieldTypeUpdate) SetPasswordOther(v schema.Password) *FieldTypeUpdate {
	_u.mutation.SetPasswordOther(v)
	return _u
}

// SetNillablePasswordOther sets the "password_other" field if the given value is not nil.
func (_u *FieldTypeUpdate) SetNillablePasswordOther(v *schema.Password) *FieldTypeUpdate {
	if v != nil {
		_u.SetPasswordOther(*v)
	}
	return _u
}

// ClearPasswordOther clears the value of the "password_other" field.
func (_u *FieldTypeUpdate) ClearPasswordOther() *FieldTypeUpdate {
	_u.mutation.ClearPasswordOther()
	return _u
}

// Mutation returns the FieldTypeMutation object of the builder.
func (_u *FieldTypeUpdate) Mutation() *FieldTypeMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FieldTypeUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FieldTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FieldTypeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FieldTypeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FieldTypeUpdate) defaults() {
	if _, ok := _u.mutation.Int64(); !ok {
		v := fieldtype.UpdateDefaultInt64()
		_u.mutation.SetInt64(v)
	}
	if _, ok := _u.mutation.Duration(); !ok && !_u.mutation.DurationCleared() {
		v := fieldtype.UpdateDefaultDuration()
		_u.mutation.SetDuration(v)
	}
	if _, ok := _u.mutation.DeletedAt(); !ok && !_u.mutation.DeletedAtCleared() {
		v := fieldtype.UpdateDefaultDeletedAt()
		_u.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FieldTypeUpdate) check() error {
	if v, ok := _u.mutation.ValidateOptionalInt32(); ok {
		if err := fieldtype.ValidateOptionalInt32Validator(v); err != nil {
			return &ValidationError{Name: "validate_optional_int32", err: fmt.Errorf(`ent: validator failed for field "FieldType.validate_optional_int32": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := fieldtype.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FieldType.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MAC(); ok {
		if err := fieldtype.MACValidator(v.String()); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "FieldType.mac": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Ndir(); ok {
		if err := fieldtype.NdirValidator(string(v)); err != nil {
			return &ValidationError{Name: "ndir", err: fmt.Errorf(`ent: validator failed for field "FieldType.ndir": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := fieldtype.LinkValidator(v.String()); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "FieldType.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RawData(); ok {
		if err := fieldtype.RawDataValidator(v); err != nil {
			return &ValidationError{Name: "raw_data", err: fmt.Errorf(`ent: validator failed for field "FieldType.raw_data": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IP(); ok {
		if err := fieldtype.IPValidator([]byte(v)); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "FieldType.ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := fieldtype.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "FieldType.role": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := fieldtype.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "FieldType.priority": %w`, err)}
		}
	}
	return nil
}

func (_u *FieldTypeUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := _u.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := _u.gremlin().Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	_u.mutation.done = true
	return res.ReadInt()
}

func (_u *FieldTypeUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(fieldtype.Label)
	for _, p := range _u.mutation.predicates {
		p(v)
	}
	var (
		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.Int(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt, value)
	}
	if value, ok := _u.mutation.AddedInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt, __.Union(__.Values(fieldtype.FieldInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int8(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt8, value)
	}
	if value, ok := _u.mutation.AddedInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt8, __.Union(__.Values(fieldtype.FieldInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int16(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt16, value)
	}
	if value, ok := _u.mutation.AddedInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt16, __.Union(__.Values(fieldtype.FieldInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int32(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt32, value)
	}
	if value, ok := _u.mutation.AddedInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt32, __.Union(__.Values(fieldtype.FieldInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int64(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt64, value)
	}
	if value, ok := _u.mutation.AddedInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt64, __.Union(__.Values(fieldtype.FieldInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt, __.Union(__.Values(fieldtype.FieldOptionalInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt8, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt8, __.Union(__.Values(fieldtype.FieldOptionalInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt16, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt16, __.Union(__.Values(fieldtype.FieldOptionalInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt32, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt32, __.Union(__.Values(fieldtype.FieldOptionalInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt64, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt64, __.Union(__.Values(fieldtype.FieldOptionalInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt, value)
	}
	if value, ok := _u.mutation.AddedNillableInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt, __.Union(__.Values(fieldtype.FieldNillableInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt8, value)
	}
	if value, ok := _u.mutation.AddedNillableInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt8, __.Union(__.Values(fieldtype.FieldNillableInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt16, value)
	}
	if value, ok := _u.mutation.AddedNillableInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt16, __.Union(__.Values(fieldtype.FieldNillableInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt32, value)
	}
	if value, ok := _u.mutation.AddedNillableInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt32, __.Union(__.Values(fieldtype.FieldNillableInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt64, value)
	}
	if value, ok := _u.mutation.AddedNillableInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt64, __.Union(__.Values(fieldtype.FieldNillableInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.ValidateOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldValidateOptionalInt32, value)
	}
	if value, ok := _u.mutation.AddedValidateOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldValidateOptionalInt32, __.Union(__.Values(fieldtype.FieldValidateOptionalInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint, __.Union(__.Values(fieldtype.FieldOptionalUint), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint8, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint8, __.Union(__.Values(fieldtype.FieldOptionalUint8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint16, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint16, __.Union(__.Values(fieldtype.FieldOptionalUint16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint32, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint32, __.Union(__.Values(fieldtype.FieldOptionalUint32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint64, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint64, __.Union(__.Values(fieldtype.FieldOptionalUint64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.State(); ok {
		v.Property(dsl.Single, fieldtype.FieldState, value)
	}
	if value, ok := _u.mutation.OptionalFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat, value)
	}
	if value, ok := _u.mutation.AddedOptionalFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat, __.Union(__.Values(fieldtype.FieldOptionalFloat), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat32, value)
	}
	if value, ok := _u.mutation.AddedOptionalFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat32, __.Union(__.Values(fieldtype.FieldOptionalFloat32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Text(); ok {
		v.Property(dsl.Single, fieldtype.FieldText, value)
	}
	if value, ok := _u.mutation.Datetime(); ok {
		v.Property(dsl.Single, fieldtype.FieldDatetime, value)
	}
	if value, ok := _u.mutation.Decimal(); ok {
		v.Property(dsl.Single, fieldtype.FieldDecimal, value)
	}
	if value, ok := _u.mutation.AddedDecimal(); ok {
		v.Property(dsl.Single, fieldtype.FieldDecimal, __.Union(__.Values(fieldtype.FieldDecimal), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.LinkOther(); ok {
		v.Property(dsl.Single, fieldtype.FieldLinkOther, value)
	}
	if value, ok := _u.mutation.LinkOtherFunc(); ok {
		v.Property(dsl.Single, fieldtype.FieldLinkOtherFunc, value)
	}
	if value, ok := _u.mutation.MAC(); ok {
		v.Property(dsl.Single, fieldtype.FieldMAC, value)
	}
	if value, ok := _u.mutation.StringArray(); ok {
		v.Property(dsl.Single, fieldtype.FieldStringArray, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		v.Property(dsl.Single, fieldtype.FieldPassword, value)
	}
	if value, ok := _u.mutation.StringScanner(); ok {
		v.Property(dsl.Single, fieldtype.FieldStringScanner, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		v.Property(dsl.Single, fieldtype.FieldDuration, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		v.Property(dsl.Single, fieldtype.FieldDuration, __.Union(__.Values(fieldtype.FieldDuration), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Dir(); ok {
		v.Property(dsl.Single, fieldtype.FieldDir, value)
	}
	if value, ok := _u.mutation.Ndir(); ok {
		v.Property(dsl.Single, fieldtype.FieldNdir, value)
	}
	if value, ok := _u.mutation.Str(); ok {
		v.Property(dsl.Single, fieldtype.FieldStr, value)
	}
	if value, ok := _u.mutation.NullStr(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullStr, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		v.Property(dsl.Single, fieldtype.FieldLink, value)
	}
	if value, ok := _u.mutation.NullLink(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullLink, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		v.Property(dsl.Single, fieldtype.FieldActive, value)
	}
	if value, ok := _u.mutation.NullActive(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullActive, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		v.Property(dsl.Single, fieldtype.FieldDeleted, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		v.Property(dsl.Single, fieldtype.FieldDeletedAt, value)
	}
	if value, ok := _u.mutation.RawData(); ok {
		v.Property(dsl.Single, fieldtype.FieldRawData, value)
	}
	if value, ok := _u.mutation.Sensitive(); ok {
		v.Property(dsl.Single, fieldtype.FieldSensitive, value)
	}
	if value, ok := _u.mutation.IP(); ok {
		v.Property(dsl.Single, fieldtype.FieldIP, value)
	}
	if value, ok := _u.mutation.NullInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullInt64, value)
	}
	if value, ok := _u.mutation.SchemaInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt, __.Union(__.Values(fieldtype.FieldSchemaInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt8, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt8, __.Union(__.Values(fieldtype.FieldSchemaInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt64, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt64, __.Union(__.Values(fieldtype.FieldSchemaInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat, value)
	}
	if value, ok := _u.mutation.AddedSchemaFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat, __.Union(__.Values(fieldtype.FieldSchemaFloat), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat32, value)
	}
	if value, ok := _u.mutation.AddedSchemaFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat32, __.Union(__.Values(fieldtype.FieldSchemaFloat32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NullFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullFloat, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		v.Property(dsl.Single, fieldtype.FieldRole, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		v.Property(dsl.Single, fieldtype.FieldPriority, value)
	}
	if value, ok := _u.mutation.OptionalUUID(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUUID, value)
	}
	if value, ok := _u.mutation.NillableUUID(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableUUID, value)
	}
	if value, ok := _u.mutation.Strings(); ok {
		v.Property(dsl.Single, fieldtype.FieldStrings, value)
	}
	if value, ok := _u.mutation.Pair(); ok {
		v.Property(dsl.Single, fieldtype.FieldPair, value)
	}
	if value, ok := _u.mutation.NilPair(); ok {
		v.Property(dsl.Single, fieldtype.FieldNilPair, value)
	}
	if value, ok := _u.mutation.Vstring(); ok {
		v.Property(dsl.Single, fieldtype.FieldVstring, value)
	}
	if value, ok := _u.mutation.Triple(); ok {
		v.Property(dsl.Single, fieldtype.FieldTriple, value)
	}
	if value, ok := _u.mutation.BigInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldBigInt, value)
	}
	if value, ok := _u.mutation.AddedBigInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldBigInt, __.Union(__.Values(fieldtype.FieldBigInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.PasswordOther(); ok {
		v.Property(dsl.Single, fieldtype.FieldPasswordOther, value)
	}
	var properties []any
	if _u.mutation.OptionalIntCleared() {
		properties = append(properties, fieldtype.FieldOptionalInt)
	}
	if _u.mutation.OptionalInt8Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt8)
	}
	if _u.mutation.OptionalInt16Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt16)
	}
	if _u.mutation.OptionalInt32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt32)
	}
	if _u.mutation.OptionalInt64Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt64)
	}
	if _u.mutation.NillableIntCleared() {
		properties = append(properties, fieldtype.FieldNillableInt)
	}
	if _u.mutation.NillableInt8Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt8)
	}
	if _u.mutation.NillableInt16Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt16)
	}
	if _u.mutation.NillableInt32Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt32)
	}
	if _u.mutation.NillableInt64Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt64)
	}
	if _u.mutation.ValidateOptionalInt32Cleared() {
		properties = append(properties, fieldtype.FieldValidateOptionalInt32)
	}
	if _u.mutation.OptionalUintCleared() {
		properties = append(properties, fieldtype.FieldOptionalUint)
	}
	if _u.mutation.OptionalUint8Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint8)
	}
	if _u.mutation.OptionalUint16Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint16)
	}
	if _u.mutation.OptionalUint32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint32)
	}
	if _u.mutation.OptionalUint64Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint64)
	}
	if _u.mutation.StateCleared() {
		properties = append(properties, fieldtype.FieldState)
	}
	if _u.mutation.OptionalFloatCleared() {
		properties = append(properties, fieldtype.FieldOptionalFloat)
	}
	if _u.mutation.OptionalFloat32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalFloat32)
	}
	if _u.mutation.TextCleared() {
		properties = append(properties, fieldtype.FieldText)
	}
	if _u.mutation.DatetimeCleared() {
		properties = append(properties, fieldtype.FieldDatetime)
	}
	if _u.mutation.DecimalCleared() {
		properties = append(properties, fieldtype.FieldDecimal)
	}
	if _u.mutation.LinkOtherCleared() {
		properties = append(properties, fieldtype.FieldLinkOther)
	}
	if _u.mutation.LinkOtherFuncCleared() {
		properties = append(properties, fieldtype.FieldLinkOtherFunc)
	}
	if _u.mutation.MACCleared() {
		properties = append(properties, fieldtype.FieldMAC)
	}
	if _u.mutation.StringArrayCleared() {
		properties = append(properties, fieldtype.FieldStringArray)
	}
	if _u.mutation.PasswordCleared() {
		properties = append(properties, fieldtype.FieldPassword)
	}
	if _u.mutation.StringScannerCleared() {
		properties = append(properties, fieldtype.FieldStringScanner)
	}
	if _u.mutation.DurationCleared() {
		properties = append(properties, fieldtype.FieldDuration)
	}
	if _u.mutation.NdirCleared() {
		properties = append(properties, fieldtype.FieldNdir)
	}
	if _u.mutation.StrCleared() {
		properties = append(properties, fieldtype.FieldStr)
	}
	if _u.mutation.NullStrCleared() {
		properties = append(properties, fieldtype.FieldNullStr)
	}
	if _u.mutation.LinkCleared() {
		properties = append(properties, fieldtype.FieldLink)
	}
	if _u.mutation.NullLinkCleared() {
		properties = append(properties, fieldtype.FieldNullLink)
	}
	if _u.mutation.ActiveCleared() {
		properties = append(properties, fieldtype.FieldActive)
	}
	if _u.mutation.NullActiveCleared() {
		properties = append(properties, fieldtype.FieldNullActive)
	}
	if _u.mutation.DeletedCleared() {
		properties = append(properties, fieldtype.FieldDeleted)
	}
	if _u.mutation.DeletedAtCleared() {
		properties = append(properties, fieldtype.FieldDeletedAt)
	}
	if _u.mutation.RawDataCleared() {
		properties = append(properties, fieldtype.FieldRawData)
	}
	if _u.mutation.SensitiveCleared() {
		properties = append(properties, fieldtype.FieldSensitive)
	}
	if _u.mutation.IPCleared() {
		properties = append(properties, fieldtype.FieldIP)
	}
	if _u.mutation.NullInt64Cleared() {
		properties = append(properties, fieldtype.FieldNullInt64)
	}
	if _u.mutation.SchemaIntCleared() {
		properties = append(properties, fieldtype.FieldSchemaInt)
	}
	if _u.mutation.SchemaInt8Cleared() {
		properties = append(properties, fieldtype.FieldSchemaInt8)
	}
	if _u.mutation.SchemaInt64Cleared() {
		properties = append(properties, fieldtype.FieldSchemaInt64)
	}
	if _u.mutation.SchemaFloatCleared() {
		properties = append(properties, fieldtype.FieldSchemaFloat)
	}
	if _u.mutation.SchemaFloat32Cleared() {
		properties = append(properties, fieldtype.FieldSchemaFloat32)
	}
	if _u.mutation.NullFloatCleared() {
		properties = append(properties, fieldtype.FieldNullFloat)
	}
	if _u.mutation.PriorityCleared() {
		properties = append(properties, fieldtype.FieldPriority)
	}
	if _u.mutation.OptionalUUIDCleared() {
		properties = append(properties, fieldtype.FieldOptionalUUID)
	}
	if _u.mutation.NillableUUIDCleared() {
		properties = append(properties, fieldtype.FieldNillableUUID)
	}
	if _u.mutation.StringsCleared() {
		properties = append(properties, fieldtype.FieldStrings)
	}
	if _u.mutation.NilPairCleared() {
		properties = append(properties, fieldtype.FieldNilPair)
	}
	if _u.mutation.BigIntCleared() {
		properties = append(properties, fieldtype.FieldBigInt)
	}
	if _u.mutation.PasswordOtherCleared() {
		properties = append(properties, fieldtype.FieldPasswordOther)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// FieldTypeUpdateOne is the builder for updating a single FieldType entity.
type FieldTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FieldTypeMutation
}

// SetInt sets the "int" field.
func (_u *FieldTypeUpdateOne) SetInt(v int) *FieldTypeUpdateOne {
	_u.mutation.ResetInt()
	_u.mutation.SetInt(v)
	return _u
}

// AddInt adds value to the "int" field.
func (_u *FieldTypeUpdateOne) AddInt(v int) *FieldTypeUpdateOne {
	_u.mutation.AddInt(v)
	return _u
}

// SetInt8 sets the "int8" field.
func (_u *FieldTypeUpdateOne) SetInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.ResetInt8()
	_u.mutation.SetInt8(v)
	return _u
}

// AddInt8 adds value to the "int8" field.
func (_u *FieldTypeUpdateOne) AddInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.AddInt8(v)
	return _u
}

// SetInt16 sets the "int16" field.
func (_u *FieldTypeUpdateOne) SetInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.ResetInt16()
	_u.mutation.SetInt16(v)
	return _u
}

// AddInt16 adds value to the "int16" field.
func (_u *FieldTypeUpdateOne) AddInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.AddInt16(v)
	return _u
}

// SetInt32 sets the "int32" field.
func (_u *FieldTypeUpdateOne) SetInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.ResetInt32()
	_u.mutation.SetInt32(v)
	return _u
}

// AddInt32 adds value to the "int32" field.
func (_u *FieldTypeUpdateOne) AddInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.AddInt32(v)
	return _u
}

// SetInt64 sets the "int64" field.
func (_u *FieldTypeUpdateOne) SetInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.ResetInt64()
	_u.mutation.SetInt64(v)
	return _u
}

// AddInt64 adds value to the "int64" field.
func (_u *FieldTypeUpdateOne) AddInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.AddInt64(v)
	return _u
}

// SetOptionalInt sets the "optional_int" field.
func (_u *FieldTypeUpdateOne) SetOptionalInt(v int) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalInt()
	_u.mutation.SetOptionalInt(v)
	return _u
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalInt(v *int) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalInt(*v)
	}
	return _u
}

// AddOptionalInt adds value to the "optional_int" field.
func (_u *FieldTypeUpdateOne) AddOptionalInt(v int) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalInt(v)
	return _u
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (_u *FieldTypeUpdateOne) ClearOptionalInt() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalInt()
	return _u
}

// SetOptionalInt8 sets the "optional_int8" field.
func (_u *FieldTypeUpdateOne) SetOptionalInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalInt8()
	_u.mutation.SetOptionalInt8(v)
	return _u
}

// SetNillableOptionalInt8 sets the "optional_int8" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalInt8(v *int8) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalInt8(*v)
	}
	return _u
}

// AddOptionalInt8 adds value to the "optional_int8" field.
func (_u *FieldTypeUpdateOne) AddOptionalInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalInt8(v)
	return _u
}

// ClearOptionalInt8 clears the value of the "optional_int8" field.
func (_u *FieldTypeUpdateOne) ClearOptionalInt8() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalInt8()
	return _u
}

// SetOptionalInt16 sets the "optional_int16" field.
func (_u *FieldTypeUpdateOne) SetOptionalInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalInt16()
	_u.mutation.SetOptionalInt16(v)
	return _u
}

// SetNillableOptionalInt16 sets the "optional_int16" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalInt16(v *int16) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalInt16(*v)
	}
	return _u
}

// AddOptionalInt16 adds value to the "optional_int16" field.
func (_u *FieldTypeUpdateOne) AddOptionalInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalInt16(v)
	return _u
}

// ClearOptionalInt16 clears the value of the "optional_int16" field.
func (_u *FieldTypeUpdateOne) ClearOptionalInt16() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalInt16()
	return _u
}

// SetOptionalInt32 sets the "optional_int32" field.
func (_u *FieldTypeUpdateOne) SetOptionalInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalInt32()
	_u.mutation.SetOptionalInt32(v)
	return _u
}

// SetNillableOptionalInt32 sets the "optional_int32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalInt32(*v)
	}
	return _u
}

// AddOptionalInt32 adds value to the "optional_int32" field.
func (_u *FieldTypeUpdateOne) AddOptionalInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalInt32(v)
	return _u
}

// ClearOptionalInt32 clears the value of the "optional_int32" field.
func (_u *FieldTypeUpdateOne) ClearOptionalInt32() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalInt32()
	return _u
}

// SetOptionalInt64 sets the "optional_int64" field.
func (_u *FieldTypeUpdateOne) SetOptionalInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalInt64()
	_u.mutation.SetOptionalInt64(v)
	return _u
}

// SetNillableOptionalInt64 sets the "optional_int64" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalInt64(v *int64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalInt64(*v)
	}
	return _u
}

// AddOptionalInt64 adds value to the "optional_int64" field.
func (_u *FieldTypeUpdateOne) AddOptionalInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalInt64(v)
	return _u
}

// ClearOptionalInt64 clears the value of the "optional_int64" field.
func (_u *FieldTypeUpdateOne) ClearOptionalInt64() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalInt64()
	return _u
}

// SetNillableInt sets the "nillable_int" field.
func (_u *FieldTypeUpdateOne) SetNillableInt(v int) *FieldTypeUpdateOne {
	_u.mutation.ResetNillableInt()
	_u.mutation.SetNillableInt(v)
	return _u
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableInt(v *int) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableInt(*v)
	}
	return _u
}

// AddNillableInt adds value to the "nillable_int" field.
func (_u *FieldTypeUpdateOne) AddNillableInt(v int) *FieldTypeUpdateOne {
	_u.mutation.AddNillableInt(v)
	return _u
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (_u *FieldTypeUpdateOne) ClearNillableInt() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableInt()
	return _u
}

// SetNillableInt8 sets the "nillable_int8" field.
func (_u *FieldTypeUpdateOne) SetNillableInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.ResetNillableInt8()
	_u.mutation.SetNillableInt8(v)
	return _u
}

// SetNillableNillableInt8 sets the "nillable_int8" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableInt8(v *int8) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableInt8(*v)
	}
	return _u
}

// AddNillableInt8 adds value to the "nillable_int8" field.
func (_u *FieldTypeUpdateOne) AddNillableInt8(v int8) *FieldTypeUpdateOne {
	_u.mutation.AddNillableInt8(v)
	return _u
}

// ClearNillableInt8 clears the value of the "nillable_int8" field.
func (_u *FieldTypeUpdateOne) ClearNillableInt8() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableInt8()
	return _u
}

// SetNillableInt16 sets the "nillable_int16" field.
func (_u *FieldTypeUpdateOne) SetNillableInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.ResetNillableInt16()
	_u.mutation.SetNillableInt16(v)
	return _u
}

// SetNillableNillableInt16 sets the "nillable_int16" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableInt16(v *int16) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableInt16(*v)
	}
	return _u
}

// AddNillableInt16 adds value to the "nillable_int16" field.
func (_u *FieldTypeUpdateOne) AddNillableInt16(v int16) *FieldTypeUpdateOne {
	_u.mutation.AddNillableInt16(v)
	return _u
}

// ClearNillableInt16 clears the value of the "nillable_int16" field.
func (_u *FieldTypeUpdateOne) ClearNillableInt16() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableInt16()
	return _u
}

// SetNillableInt32 sets the "nillable_int32" field.
func (_u *FieldTypeUpdateOne) SetNillableInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.ResetNillableInt32()
	_u.mutation.SetNillableInt32(v)
	return _u
}

// SetNillableNillableInt32 sets the "nillable_int32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableInt32(*v)
	}
	return _u
}

// AddNillableInt32 adds value to the "nillable_int32" field.
func (_u *FieldTypeUpdateOne) AddNillableInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.AddNillableInt32(v)
	return _u
}

// ClearNillableInt32 clears the value of the "nillable_int32" field.
func (_u *FieldTypeUpdateOne) ClearNillableInt32() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableInt32()
	return _u
}

// SetNillableInt64 sets the "nillable_int64" field.
func (_u *FieldTypeUpdateOne) SetNillableInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.ResetNillableInt64()
	_u.mutation.SetNillableInt64(v)
	return _u
}

// SetNillableNillableInt64 sets the "nillable_int64" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableInt64(v *int64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableInt64(*v)
	}
	return _u
}

// AddNillableInt64 adds value to the "nillable_int64" field.
func (_u *FieldTypeUpdateOne) AddNillableInt64(v int64) *FieldTypeUpdateOne {
	_u.mutation.AddNillableInt64(v)
	return _u
}

// ClearNillableInt64 clears the value of the "nillable_int64" field.
func (_u *FieldTypeUpdateOne) ClearNillableInt64() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableInt64()
	return _u
}

// SetValidateOptionalInt32 sets the "validate_optional_int32" field.
func (_u *FieldTypeUpdateOne) SetValidateOptionalInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.ResetValidateOptionalInt32()
	_u.mutation.SetValidateOptionalInt32(v)
	return _u
}

// SetNillableValidateOptionalInt32 sets the "validate_optional_int32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableValidateOptionalInt32(v *int32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetValidateOptionalInt32(*v)
	}
	return _u
}

// AddValidateOptionalInt32 adds value to the "validate_optional_int32" field.
func (_u *FieldTypeUpdateOne) AddValidateOptionalInt32(v int32) *FieldTypeUpdateOne {
	_u.mutation.AddValidateOptionalInt32(v)
	return _u
}

// ClearValidateOptionalInt32 clears the value of the "validate_optional_int32" field.
func (_u *FieldTypeUpdateOne) ClearValidateOptionalInt32() *FieldTypeUpdateOne {
	_u.mutation.ClearValidateOptionalInt32()
	return _u
}

// SetOptionalUint sets the "optional_uint" field.
func (_u *FieldTypeUpdateOne) SetOptionalUint(v uint) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalUint()
	_u.mutation.SetOptionalUint(v)
	return _u
}

// SetNillableOptionalUint sets the "optional_uint" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUint(v *uint) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUint(*v)
	}
	return _u
}

// AddOptionalUint adds value to the "optional_uint" field.
func (_u *FieldTypeUpdateOne) AddOptionalUint(v int) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalUint(v)
	return _u
}

// ClearOptionalUint clears the value of the "optional_uint" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUint() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUint()
	return _u
}

// SetOptionalUint8 sets the "optional_uint8" field.
func (_u *FieldTypeUpdateOne) SetOptionalUint8(v uint8) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalUint8()
	_u.mutation.SetOptionalUint8(v)
	return _u
}

// SetNillableOptionalUint8 sets the "optional_uint8" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUint8(v *uint8) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUint8(*v)
	}
	return _u
}

// AddOptionalUint8 adds value to the "optional_uint8" field.
func (_u *FieldTypeUpdateOne) AddOptionalUint8(v int8) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalUint8(v)
	return _u
}

// ClearOptionalUint8 clears the value of the "optional_uint8" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUint8() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUint8()
	return _u
}

// SetOptionalUint16 sets the "optional_uint16" field.
func (_u *FieldTypeUpdateOne) SetOptionalUint16(v uint16) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalUint16()
	_u.mutation.SetOptionalUint16(v)
	return _u
}

// SetNillableOptionalUint16 sets the "optional_uint16" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUint16(v *uint16) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUint16(*v)
	}
	return _u
}

// AddOptionalUint16 adds value to the "optional_uint16" field.
func (_u *FieldTypeUpdateOne) AddOptionalUint16(v int16) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalUint16(v)
	return _u
}

// ClearOptionalUint16 clears the value of the "optional_uint16" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUint16() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUint16()
	return _u
}

// SetOptionalUint32 sets the "optional_uint32" field.
func (_u *FieldTypeUpdateOne) SetOptionalUint32(v uint32) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalUint32()
	_u.mutation.SetOptionalUint32(v)
	return _u
}

// SetNillableOptionalUint32 sets the "optional_uint32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUint32(v *uint32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUint32(*v)
	}
	return _u
}

// AddOptionalUint32 adds value to the "optional_uint32" field.
func (_u *FieldTypeUpdateOne) AddOptionalUint32(v int32) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalUint32(v)
	return _u
}

// ClearOptionalUint32 clears the value of the "optional_uint32" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUint32() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUint32()
	return _u
}

// SetOptionalUint64 sets the "optional_uint64" field.
func (_u *FieldTypeUpdateOne) SetOptionalUint64(v uint64) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalUint64()
	_u.mutation.SetOptionalUint64(v)
	return _u
}

// SetNillableOptionalUint64 sets the "optional_uint64" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUint64(v *uint64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUint64(*v)
	}
	return _u
}

// AddOptionalUint64 adds value to the "optional_uint64" field.
func (_u *FieldTypeUpdateOne) AddOptionalUint64(v int64) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalUint64(v)
	return _u
}

// ClearOptionalUint64 clears the value of the "optional_uint64" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUint64() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUint64()
	return _u
}

// SetState sets the "state" field.
func (_u *FieldTypeUpdateOne) SetState(v fieldtype.State) *FieldTypeUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableState(v *fieldtype.State) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *FieldTypeUpdateOne) ClearState() *FieldTypeUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// SetOptionalFloat sets the "optional_float" field.
func (_u *FieldTypeUpdateOne) SetOptionalFloat(v float64) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalFloat()
	_u.mutation.SetOptionalFloat(v)
	return _u
}

// SetNillableOptionalFloat sets the "optional_float" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalFloat(v *float64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalFloat(*v)
	}
	return _u
}

// AddOptionalFloat adds value to the "optional_float" field.
func (_u *FieldTypeUpdateOne) AddOptionalFloat(v float64) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalFloat(v)
	return _u
}

// ClearOptionalFloat clears the value of the "optional_float" field.
func (_u *FieldTypeUpdateOne) ClearOptionalFloat() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalFloat()
	return _u
}

// SetOptionalFloat32 sets the "optional_float32" field.
func (_u *FieldTypeUpdateOne) SetOptionalFloat32(v float32) *FieldTypeUpdateOne {
	_u.mutation.ResetOptionalFloat32()
	_u.mutation.SetOptionalFloat32(v)
	return _u
}

// SetNillableOptionalFloat32 sets the "optional_float32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalFloat32(v *float32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalFloat32(*v)
	}
	return _u
}

// AddOptionalFloat32 adds value to the "optional_float32" field.
func (_u *FieldTypeUpdateOne) AddOptionalFloat32(v float32) *FieldTypeUpdateOne {
	_u.mutation.AddOptionalFloat32(v)
	return _u
}

// ClearOptionalFloat32 clears the value of the "optional_float32" field.
func (_u *FieldTypeUpdateOne) ClearOptionalFloat32() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalFloat32()
	return _u
}

// SetText sets the "text" field.
func (_u *FieldTypeUpdateOne) SetText(v string) *FieldTypeUpdateOne {
	_u.mutation.SetText(v)
	return _u
}

// SetNillableText sets the "text" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableText(v *string) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetText(*v)
	}
	return _u
}

// ClearText clears the value of the "text" field.
func (_u *FieldTypeUpdateOne) ClearText() *FieldTypeUpdateOne {
	_u.mutation.ClearText()
	return _u
}

// SetDatetime sets the "datetime" field.
func (_u *FieldTypeUpdateOne) SetDatetime(v time.Time) *FieldTypeUpdateOne {
	_u.mutation.SetDatetime(v)
	return _u
}

// SetNillableDatetime sets the "datetime" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableDatetime(v *time.Time) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetDatetime(*v)
	}
	return _u
}

// ClearDatetime clears the value of the "datetime" field.
func (_u *FieldTypeUpdateOne) ClearDatetime() *FieldTypeUpdateOne {
	_u.mutation.ClearDatetime()
	return _u
}

// SetDecimal sets the "decimal" field.
func (_u *FieldTypeUpdateOne) SetDecimal(v float64) *FieldTypeUpdateOne {
	_u.mutation.ResetDecimal()
	_u.mutation.SetDecimal(v)
	return _u
}

// SetNillableDecimal sets the "decimal" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableDecimal(v *float64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetDecimal(*v)
	}
	return _u
}

// AddDecimal adds value to the "decimal" field.
func (_u *FieldTypeUpdateOne) AddDecimal(v float64) *FieldTypeUpdateOne {
	_u.mutation.AddDecimal(v)
	return _u
}

// ClearDecimal clears the value of the "decimal" field.
func (_u *FieldTypeUpdateOne) ClearDecimal() *FieldTypeUpdateOne {
	_u.mutation.ClearDecimal()
	return _u
}

// SetLinkOther sets the "link_other" field.
func (_u *FieldTypeUpdateOne) SetLinkOther(v *schema.Link) *FieldTypeUpdateOne {
	_u.mutation.SetLinkOther(v)
	return _u
}

// ClearLinkOther clears the value of the "link_other" field.
func (_u *FieldTypeUpdateOne) ClearLinkOther() *FieldTypeUpdateOne {
	_u.mutation.ClearLinkOther()
	return _u
}

// SetLinkOtherFunc sets the "link_other_func" field.
func (_u *FieldTypeUpdateOne) SetLinkOtherFunc(v *schema.Link) *FieldTypeUpdateOne {
	_u.mutation.SetLinkOtherFunc(v)
	return _u
}

// ClearLinkOtherFunc clears the value of the "link_other_func" field.
func (_u *FieldTypeUpdateOne) ClearLinkOtherFunc() *FieldTypeUpdateOne {
	_u.mutation.ClearLinkOtherFunc()
	return _u
}

// SetMAC sets the "mac" field.
func (_u *FieldTypeUpdateOne) SetMAC(v schema.MAC) *FieldTypeUpdateOne {
	_u.mutation.SetMAC(v)
	return _u
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableMAC(v *schema.MAC) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetMAC(*v)
	}
	return _u
}

// ClearMAC clears the value of the "mac" field.
func (_u *FieldTypeUpdateOne) ClearMAC() *FieldTypeUpdateOne {
	_u.mutation.ClearMAC()
	return _u
}

// SetStringArray sets the "string_array" field.
func (_u *FieldTypeUpdateOne) SetStringArray(v schema.Strings) *FieldTypeUpdateOne {
	_u.mutation.SetStringArray(v)
	return _u
}

// ClearStringArray clears the value of the "string_array" field.
func (_u *FieldTypeUpdateOne) ClearStringArray() *FieldTypeUpdateOne {
	_u.mutation.ClearStringArray()
	return _u
}

// SetPassword sets the "password" field.
func (_u *FieldTypeUpdateOne) SetPassword(v string) *FieldTypeUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillablePassword(v *string) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// ClearPassword clears the value of the "password" field.
func (_u *FieldTypeUpdateOne) ClearPassword() *FieldTypeUpdateOne {
	_u.mutation.ClearPassword()
	return _u
}

// SetStringScanner sets the "string_scanner" field.
func (_u *FieldTypeUpdateOne) SetStringScanner(v schema.StringScanner) *FieldTypeUpdateOne {
	_u.mutation.SetStringScanner(v)
	return _u
}

// SetNillableStringScanner sets the "string_scanner" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableStringScanner(v *schema.StringScanner) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetStringScanner(*v)
	}
	return _u
}

// ClearStringScanner clears the value of the "string_scanner" field.
func (_u *FieldTypeUpdateOne) ClearStringScanner() *FieldTypeUpdateOne {
	_u.mutation.ClearStringScanner()
	return _u
}

// SetDuration sets the "duration" field.
func (_u *FieldTypeUpdateOne) SetDuration(v time.Duration) *FieldTypeUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *FieldTypeUpdateOne) AddDuration(v time.Duration) *FieldTypeUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// ClearDuration clears the value of the "duration" field.
func (_u *FieldTypeUpdateOne) ClearDuration() *FieldTypeUpdateOne {
	_u.mutation.ClearDuration()
	return _u
}

// SetDir sets the "dir" field.
func (_u *FieldTypeUpdateOne) SetDir(v http.Dir) *FieldTypeUpdateOne {
	_u.mutation.SetDir(v)
	return _u
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableDir(v *http.Dir) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetDir(*v)
	}
	return _u
}

// SetNdir sets the "ndir" field.
func (_u *FieldTypeUpdateOne) SetNdir(v http.Dir) *FieldTypeUpdateOne {
	_u.mutation.SetNdir(v)
	return _u
}

// SetNillableNdir sets the "ndir" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNdir(v *http.Dir) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNdir(*v)
	}
	return _u
}

// ClearNdir clears the value of the "ndir" field.
func (_u *FieldTypeUpdateOne) ClearNdir() *FieldTypeUpdateOne {
	_u.mutation.ClearNdir()
	return _u
}

// SetStr sets the "str" field.
func (_u *FieldTypeUpdateOne) SetStr(v sql.NullString) *FieldTypeUpdateOne {
	_u.mutation.SetStr(v)
	return _u
}

// SetNillableStr sets the "str" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableStr(v *sql.NullString) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetStr(*v)
	}
	return _u
}

// ClearStr clears the value of the "str" field.
func (_u *FieldTypeUpdateOne) ClearStr() *FieldTypeUpdateOne {
	_u.mutation.ClearStr()
	return _u
}

// SetNullStr sets the "null_str" field.
func (_u *FieldTypeUpdateOne) SetNullStr(v *sql.NullString) *FieldTypeUpdateOne {
	_u.mutation.SetNullStr(v)
	return _u
}

// ClearNullStr clears the value of the "null_str" field.
func (_u *FieldTypeUpdateOne) ClearNullStr() *FieldTypeUpdateOne {
	_u.mutation.ClearNullStr()
	return _u
}

// SetLink sets the "link" field.
func (_u *FieldTypeUpdateOne) SetLink(v schema.Link) *FieldTypeUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableLink(v *schema.Link) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *FieldTypeUpdateOne) ClearLink() *FieldTypeUpdateOne {
	_u.mutation.ClearLink()
	return _u
}

// SetNullLink sets the "null_link" field.
func (_u *FieldTypeUpdateOne) SetNullLink(v *schema.Link) *FieldTypeUpdateOne {
	_u.mutation.SetNullLink(v)
	return _u
}

// ClearNullLink clears the value of the "null_link" field.
func (_u *FieldTypeUpdateOne) ClearNullLink() *FieldTypeUpdateOne {
	_u.mutation.ClearNullLink()
	return _u
}

// SetActive sets the "active" field.
func (_u *FieldTypeUpdateOne) SetActive(v schema.Status) *FieldTypeUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableActive(v *schema.Status) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// ClearActive clears the value of the "active" field.
func (_u *FieldTypeUpdateOne) ClearActive() *FieldTypeUpdateOne {
	_u.mutation.ClearActive()
	return _u
}

// SetNullActive sets the "null_active" field.
func (_u *FieldTypeUpdateOne) SetNullActive(v schema.Status) *FieldTypeUpdateOne {
	_u.mutation.SetNullActive(v)
	return _u
}

// SetNillableNullActive sets the "null_active" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNullActive(v *schema.Status) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNullActive(*v)
	}
	return _u
}

// ClearNullActive clears the value of the "null_active" field.
func (_u *FieldTypeUpdateOne) ClearNullActive() *FieldTypeUpdateOne {
	_u.mutation.ClearNullActive()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *FieldTypeUpdateOne) SetDeleted(v *sql.NullBool) *FieldTypeUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// ClearDeleted clears the value of the "deleted" field.
func (_u *FieldTypeUpdateOne) ClearDeleted() *FieldTypeUpdateOne {
	_u.mutation.ClearDeleted()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FieldTypeUpdateOne) SetDeletedAt(v *sql.NullTime) *FieldTypeUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FieldTypeUpdateOne) ClearDeletedAt() *FieldTypeUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetRawData sets the "raw_data" field.
func (_u *FieldTypeUpdateOne) SetRawData(v []byte) *FieldTypeUpdateOne {
	_u.mutation.SetRawData(v)
	return _u
}

// ClearRawData clears the value of the "raw_data" field.
func (_u *FieldTypeUpdateOne) ClearRawData() *FieldTypeUpdateOne {
	_u.mutation.ClearRawData()
	return _u
}

// SetSensitive sets the "sensitive" field.
func (_u *FieldTypeUpdateOne) SetSensitive(v []byte) *FieldTypeUpdateOne {
	_u.mutation.SetSensitive(v)
	return _u
}

// ClearSensitive clears the value of the "sensitive" field.
func (_u *FieldTypeUpdateOne) ClearSensitive() *FieldTypeUpdateOne {
	_u.mutation.ClearSensitive()
	return _u
}

// SetIP sets the "ip" field.
func (_u *FieldTypeUpdateOne) SetIP(v net.IP) *FieldTypeUpdateOne {
	_u.mutation.SetIP(v)
	return _u
}

// ClearIP clears the value of the "ip" field.
func (_u *FieldTypeUpdateOne) ClearIP() *FieldTypeUpdateOne {
	_u.mutation.ClearIP()
	return _u
}

// SetNullInt64 sets the "null_int64" field.
func (_u *FieldTypeUpdateOne) SetNullInt64(v *sql.NullInt64) *FieldTypeUpdateOne {
	_u.mutation.SetNullInt64(v)
	return _u
}

// ClearNullInt64 clears the value of the "null_int64" field.
func (_u *FieldTypeUpdateOne) ClearNullInt64() *FieldTypeUpdateOne {
	_u.mutation.ClearNullInt64()
	return _u
}

// SetSchemaInt sets the "schema_int" field.
func (_u *FieldTypeUpdateOne) SetSchemaInt(v schema.Int) *FieldTypeUpdateOne {
	_u.mutation.ResetSchemaInt()
	_u.mutation.SetSchemaInt(v)
	return _u
}

// SetNillableSchemaInt sets the "schema_int" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableSchemaInt(v *schema.Int) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetSchemaInt(*v)
	}
	return _u
}

// AddSchemaInt adds value to the "schema_int" field.
func (_u *FieldTypeUpdateOne) AddSchemaInt(v schema.Int) *FieldTypeUpdateOne {
	_u.mutation.AddSchemaInt(v)
	return _u
}

// ClearSchemaInt clears the value of the "schema_int" field.
func (_u *FieldTypeUpdateOne) ClearSchemaInt() *FieldTypeUpdateOne {
	_u.mutation.ClearSchemaInt()
	return _u
}

// SetSchemaInt8 sets the "schema_int8" field.
func (_u *FieldTypeUpdateOne) SetSchemaInt8(v schema.Int8) *FieldTypeUpdateOne {
	_u.mutation.ResetSchemaInt8()
	_u.mutation.SetSchemaInt8(v)
	return _u
}

// SetNillableSchemaInt8 sets the "schema_int8" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableSchemaInt8(v *schema.Int8) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetSchemaInt8(*v)
	}
	return _u
}

// AddSchemaInt8 adds value to the "schema_int8" field.
func (_u *FieldTypeUpdateOne) AddSchemaInt8(v schema.Int8) *FieldTypeUpdateOne {
	_u.mutation.AddSchemaInt8(v)
	return _u
}

// ClearSchemaInt8 clears the value of the "schema_int8" field.
func (_u *FieldTypeUpdateOne) ClearSchemaInt8() *FieldTypeUpdateOne {
	_u.mutation.ClearSchemaInt8()
	return _u
}

// SetSchemaInt64 sets the "schema_int64" field.
func (_u *FieldTypeUpdateOne) SetSchemaInt64(v schema.Int64) *FieldTypeUpdateOne {
	_u.mutation.ResetSchemaInt64()
	_u.mutation.SetSchemaInt64(v)
	return _u
}

// SetNillableSchemaInt64 sets the "schema_int64" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableSchemaInt64(v *schema.Int64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetSchemaInt64(*v)
	}
	return _u
}

// AddSchemaInt64 adds value to the "schema_int64" field.
func (_u *FieldTypeUpdateOne) AddSchemaInt64(v schema.Int64) *FieldTypeUpdateOne {
	_u.mutation.AddSchemaInt64(v)
	return _u
}

// ClearSchemaInt64 clears the value of the "schema_int64" field.
func (_u *FieldTypeUpdateOne) ClearSchemaInt64() *FieldTypeUpdateOne {
	_u.mutation.ClearSchemaInt64()
	return _u
}

// SetSchemaFloat sets the "schema_float" field.
func (_u *FieldTypeUpdateOne) SetSchemaFloat(v schema.Float64) *FieldTypeUpdateOne {
	_u.mutation.ResetSchemaFloat()
	_u.mutation.SetSchemaFloat(v)
	return _u
}

// SetNillableSchemaFloat sets the "schema_float" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableSchemaFloat(v *schema.Float64) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetSchemaFloat(*v)
	}
	return _u
}

// AddSchemaFloat adds value to the "schema_float" field.
func (_u *FieldTypeUpdateOne) AddSchemaFloat(v schema.Float64) *FieldTypeUpdateOne {
	_u.mutation.AddSchemaFloat(v)
	return _u
}

// ClearSchemaFloat clears the value of the "schema_float" field.
func (_u *FieldTypeUpdateOne) ClearSchemaFloat() *FieldTypeUpdateOne {
	_u.mutation.ClearSchemaFloat()
	return _u
}

// SetSchemaFloat32 sets the "schema_float32" field.
func (_u *FieldTypeUpdateOne) SetSchemaFloat32(v schema.Float32) *FieldTypeUpdateOne {
	_u.mutation.ResetSchemaFloat32()
	_u.mutation.SetSchemaFloat32(v)
	return _u
}

// SetNillableSchemaFloat32 sets the "schema_float32" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableSchemaFloat32(v *schema.Float32) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetSchemaFloat32(*v)
	}
	return _u
}

// AddSchemaFloat32 adds value to the "schema_float32" field.
func (_u *FieldTypeUpdateOne) AddSchemaFloat32(v schema.Float32) *FieldTypeUpdateOne {
	_u.mutation.AddSchemaFloat32(v)
	return _u
}

// ClearSchemaFloat32 clears the value of the "schema_float32" field.
func (_u *FieldTypeUpdateOne) ClearSchemaFloat32() *FieldTypeUpdateOne {
	_u.mutation.ClearSchemaFloat32()
	return _u
}

// SetNullFloat sets the "null_float" field.
func (_u *FieldTypeUpdateOne) SetNullFloat(v *sql.NullFloat64) *FieldTypeUpdateOne {
	_u.mutation.SetNullFloat(v)
	return _u
}

// ClearNullFloat clears the value of the "null_float" field.
func (_u *FieldTypeUpdateOne) ClearNullFloat() *FieldTypeUpdateOne {
	_u.mutation.ClearNullFloat()
	return _u
}

// SetRole sets the "role" field.
func (_u *FieldTypeUpdateOne) SetRole(v role.Role) *FieldTypeUpdateOne {
	_u.mutation.SetRole(v)
	return _u
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableRole(v *role.Role) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetRole(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *FieldTypeUpdateOne) SetPriority(v role.Priority) *FieldTypeUpdateOne {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillablePriority(v *role.Priority) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *FieldTypeUpdateOne) ClearPriority() *FieldTypeUpdateOne {
	_u.mutation.ClearPriority()
	return _u
}

// SetOptionalUUID sets the "optional_uuid" field.
func (_u *FieldTypeUpdateOne) SetOptionalUUID(v uuid.UUID) *FieldTypeUpdateOne {
	_u.mutation.SetOptionalUUID(v)
	return _u
}

// SetNillableOptionalUUID sets the "optional_uuid" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableOptionalUUID(v *uuid.UUID) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetOptionalUUID(*v)
	}
	return _u
}

// ClearOptionalUUID clears the value of the "optional_uuid" field.
func (_u *FieldTypeUpdateOne) ClearOptionalUUID() *FieldTypeUpdateOne {
	_u.mutation.ClearOptionalUUID()
	return _u
}

// SetNillableUUID sets the "nillable_uuid" field.
func (_u *FieldTypeUpdateOne) SetNillableUUID(v uuid.UUID) *FieldTypeUpdateOne {
	_u.mutation.SetNillableUUID(v)
	return _u
}

// SetNillableNillableUUID sets the "nillable_uuid" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableNillableUUID(v *uuid.UUID) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetNillableUUID(*v)
	}
	return _u
}

// ClearNillableUUID clears the value of the "nillable_uuid" field.
func (_u *FieldTypeUpdateOne) ClearNillableUUID() *FieldTypeUpdateOne {
	_u.mutation.ClearNillableUUID()
	return _u
}

// SetStrings sets the "strings" field.
func (_u *FieldTypeUpdateOne) SetStrings(v []string) *FieldTypeUpdateOne {
	_u.mutation.SetStrings(v)
	return _u
}

// AppendStrings appends value to the "strings" field.
func (_u *FieldTypeUpdateOne) AppendStrings(v []string) *FieldTypeUpdateOne {
	_u.mutation.AppendStrings(v)
	return _u
}

// ClearStrings clears the value of the "strings" field.
func (_u *FieldTypeUpdateOne) ClearStrings() *FieldTypeUpdateOne {
	_u.mutation.ClearStrings()
	return _u
}

// SetPair sets the "pair" field.
func (_u *FieldTypeUpdateOne) SetPair(v schema.Pair) *FieldTypeUpdateOne {
	_u.mutation.SetPair(v)
	return _u
}

// SetNillablePair sets the "pair" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillablePair(v *schema.Pair) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetPair(*v)
	}
	return _u
}

// SetNilPair sets the "nil_pair" field.
func (_u *FieldTypeUpdateOne) SetNilPair(v *schema.Pair) *FieldTypeUpdateOne {
	_u.mutation.SetNilPair(v)
	return _u
}

// ClearNilPair clears the value of the "nil_pair" field.
func (_u *FieldTypeUpdateOne) ClearNilPair() *FieldTypeUpdateOne {
	_u.mutation.ClearNilPair()
	return _u
}

// SetVstring sets the "vstring" field.
func (_u *FieldTypeUpdateOne) SetVstring(v schema.VString) *FieldTypeUpdateOne {
	_u.mutation.SetVstring(v)
	return _u
}

// SetNillableVstring sets the "vstring" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableVstring(v *schema.VString) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetVstring(*v)
	}
	return _u
}

// SetTriple sets the "triple" field.
func (_u *FieldTypeUpdateOne) SetTriple(v schema.Triple) *FieldTypeUpdateOne {
	_u.mutation.SetTriple(v)
	return _u
}

// SetNillableTriple sets the "triple" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableTriple(v *schema.Triple) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetTriple(*v)
	}
	return _u
}

// SetBigInt sets the "big_int" field.
func (_u *FieldTypeUpdateOne) SetBigInt(v schema.BigInt) *FieldTypeUpdateOne {
	_u.mutation.ResetBigInt()
	_u.mutation.SetBigInt(v)
	return _u
}

// SetNillableBigInt sets the "big_int" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillableBigInt(v *schema.BigInt) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetBigInt(*v)
	}
	return _u
}

// AddBigInt adds value to the "big_int" field.
func (_u *FieldTypeUpdateOne) AddBigInt(v schema.BigInt) *FieldTypeUpdateOne {
	_u.mutation.AddBigInt(v)
	return _u
}

// ClearBigInt clears the value of the "big_int" field.
func (_u *FieldTypeUpdateOne) ClearBigInt() *FieldTypeUpdateOne {
	_u.mutation.ClearBigInt()
	return _u
}

// SetPasswordOther sets the "password_other" field.
func (_u *FieldTypeUpdateOne) SetPasswordOther(v schema.Password) *FieldTypeUpdateOne {
	_u.mutation.SetPasswordOther(v)
	return _u
}

// SetNillablePasswordOther sets the "password_other" field if the given value is not nil.
func (_u *FieldTypeUpdateOne) SetNillablePasswordOther(v *schema.Password) *FieldTypeUpdateOne {
	if v != nil {
		_u.SetPasswordOther(*v)
	}
	return _u
}

// ClearPasswordOther clears the value of the "password_other" field.
func (_u *FieldTypeUpdateOne) ClearPasswordOther() *FieldTypeUpdateOne {
	_u.mutation.ClearPasswordOther()
	return _u
}

// Mutation returns the FieldTypeMutation object of the builder.
func (_u *FieldTypeUpdateOne) Mutation() *FieldTypeMutation {
	return _u.mutation
}

// Where appends a list predicates to the FieldTypeUpdate builder.
func (_u *FieldTypeUpdateOne) Where(ps ...predicate.FieldType) *FieldTypeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FieldTypeUpdateOne) Select(field string, fields ...string) *FieldTypeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FieldType entity.
func (_u *FieldTypeUpdateOne) Save(ctx context.Context) (*FieldType, error) {
	_u.defaults()
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FieldTypeUpdateOne) SaveX(ctx context.Context) *FieldType {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FieldTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FieldTypeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FieldTypeUpdateOne) defaults() {
	if _, ok := _u.mutation.Int64(); !ok {
		v := fieldtype.UpdateDefaultInt64()
		_u.mutation.SetInt64(v)
	}
	if _, ok := _u.mutation.Duration(); !ok && !_u.mutation.DurationCleared() {
		v := fieldtype.UpdateDefaultDuration()
		_u.mutation.SetDuration(v)
	}
	if _, ok := _u.mutation.DeletedAt(); !ok && !_u.mutation.DeletedAtCleared() {
		v := fieldtype.UpdateDefaultDeletedAt()
		_u.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *FieldTypeUpdateOne) check() error {
	if v, ok := _u.mutation.ValidateOptionalInt32(); ok {
		if err := fieldtype.ValidateOptionalInt32Validator(v); err != nil {
			return &ValidationError{Name: "validate_optional_int32", err: fmt.Errorf(`ent: validator failed for field "FieldType.validate_optional_int32": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := fieldtype.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FieldType.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MAC(); ok {
		if err := fieldtype.MACValidator(v.String()); err != nil {
			return &ValidationError{Name: "mac", err: fmt.Errorf(`ent: validator failed for field "FieldType.mac": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Ndir(); ok {
		if err := fieldtype.NdirValidator(string(v)); err != nil {
			return &ValidationError{Name: "ndir", err: fmt.Errorf(`ent: validator failed for field "FieldType.ndir": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Link(); ok {
		if err := fieldtype.LinkValidator(v.String()); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "FieldType.link": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RawData(); ok {
		if err := fieldtype.RawDataValidator(v); err != nil {
			return &ValidationError{Name: "raw_data", err: fmt.Errorf(`ent: validator failed for field "FieldType.raw_data": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IP(); ok {
		if err := fieldtype.IPValidator([]byte(v)); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "FieldType.ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Role(); ok {
		if err := fieldtype.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "FieldType.role": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := fieldtype.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "FieldType.priority": %w`, err)}
		}
	}
	return nil
}

func (_u *FieldTypeUpdateOne) gremlinSave(ctx context.Context) (*FieldType, error) {
	if err := _u.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FieldType.id" for update`)}
	}
	query, bindings := _u.gremlin(id).Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	_u.mutation.done = true
	_m := &FieldType{config: _u.config}
	if err := _m.FromResponse(res); err != nil {
		return nil, err
	}
	return _m, nil
}

func (_u *FieldTypeUpdateOne) gremlin(id string) *dsl.Traversal {
	v := g.V(id)
	var (
		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.Int(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt, value)
	}
	if value, ok := _u.mutation.AddedInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt, __.Union(__.Values(fieldtype.FieldInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int8(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt8, value)
	}
	if value, ok := _u.mutation.AddedInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt8, __.Union(__.Values(fieldtype.FieldInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int16(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt16, value)
	}
	if value, ok := _u.mutation.AddedInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt16, __.Union(__.Values(fieldtype.FieldInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int32(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt32, value)
	}
	if value, ok := _u.mutation.AddedInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt32, __.Union(__.Values(fieldtype.FieldInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Int64(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt64, value)
	}
	if value, ok := _u.mutation.AddedInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldInt64, __.Union(__.Values(fieldtype.FieldInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt, __.Union(__.Values(fieldtype.FieldOptionalInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt8, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt8, __.Union(__.Values(fieldtype.FieldOptionalInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt16, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt16, __.Union(__.Values(fieldtype.FieldOptionalInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt32, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt32, __.Union(__.Values(fieldtype.FieldOptionalInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt64, value)
	}
	if value, ok := _u.mutation.AddedOptionalInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalInt64, __.Union(__.Values(fieldtype.FieldOptionalInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt, value)
	}
	if value, ok := _u.mutation.AddedNillableInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt, __.Union(__.Values(fieldtype.FieldNillableInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt8, value)
	}
	if value, ok := _u.mutation.AddedNillableInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt8, __.Union(__.Values(fieldtype.FieldNillableInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt16, value)
	}
	if value, ok := _u.mutation.AddedNillableInt16(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt16, __.Union(__.Values(fieldtype.FieldNillableInt16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt32, value)
	}
	if value, ok := _u.mutation.AddedNillableInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt32, __.Union(__.Values(fieldtype.FieldNillableInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NillableInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt64, value)
	}
	if value, ok := _u.mutation.AddedNillableInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableInt64, __.Union(__.Values(fieldtype.FieldNillableInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.ValidateOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldValidateOptionalInt32, value)
	}
	if value, ok := _u.mutation.AddedValidateOptionalInt32(); ok {
		v.Property(dsl.Single, fieldtype.FieldValidateOptionalInt32, __.Union(__.Values(fieldtype.FieldValidateOptionalInt32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint, __.Union(__.Values(fieldtype.FieldOptionalUint), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint8, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint8(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint8, __.Union(__.Values(fieldtype.FieldOptionalUint8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint16, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint16(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint16, __.Union(__.Values(fieldtype.FieldOptionalUint16), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint32, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint32, __.Union(__.Values(fieldtype.FieldOptionalUint32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalUint64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint64, value)
	}
	if value, ok := _u.mutation.AddedOptionalUint64(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUint64, __.Union(__.Values(fieldtype.FieldOptionalUint64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.State(); ok {
		v.Property(dsl.Single, fieldtype.FieldState, value)
	}
	if value, ok := _u.mutation.OptionalFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat, value)
	}
	if value, ok := _u.mutation.AddedOptionalFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat, __.Union(__.Values(fieldtype.FieldOptionalFloat), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.OptionalFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat32, value)
	}
	if value, ok := _u.mutation.AddedOptionalFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalFloat32, __.Union(__.Values(fieldtype.FieldOptionalFloat32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Text(); ok {
		v.Property(dsl.Single, fieldtype.FieldText, value)
	}
	if value, ok := _u.mutation.Datetime(); ok {
		v.Property(dsl.Single, fieldtype.FieldDatetime, value)
	}
	if value, ok := _u.mutation.Decimal(); ok {
		v.Property(dsl.Single, fieldtype.FieldDecimal, value)
	}
	if value, ok := _u.mutation.AddedDecimal(); ok {
		v.Property(dsl.Single, fieldtype.FieldDecimal, __.Union(__.Values(fieldtype.FieldDecimal), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.LinkOther(); ok {
		v.Property(dsl.Single, fieldtype.FieldLinkOther, value)
	}
	if value, ok := _u.mutation.LinkOtherFunc(); ok {
		v.Property(dsl.Single, fieldtype.FieldLinkOtherFunc, value)
	}
	if value, ok := _u.mutation.MAC(); ok {
		v.Property(dsl.Single, fieldtype.FieldMAC, value)
	}
	if value, ok := _u.mutation.StringArray(); ok {
		v.Property(dsl.Single, fieldtype.FieldStringArray, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		v.Property(dsl.Single, fieldtype.FieldPassword, value)
	}
	if value, ok := _u.mutation.StringScanner(); ok {
		v.Property(dsl.Single, fieldtype.FieldStringScanner, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		v.Property(dsl.Single, fieldtype.FieldDuration, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		v.Property(dsl.Single, fieldtype.FieldDuration, __.Union(__.Values(fieldtype.FieldDuration), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Dir(); ok {
		v.Property(dsl.Single, fieldtype.FieldDir, value)
	}
	if value, ok := _u.mutation.Ndir(); ok {
		v.Property(dsl.Single, fieldtype.FieldNdir, value)
	}
	if value, ok := _u.mutation.Str(); ok {
		v.Property(dsl.Single, fieldtype.FieldStr, value)
	}
	if value, ok := _u.mutation.NullStr(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullStr, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		v.Property(dsl.Single, fieldtype.FieldLink, value)
	}
	if value, ok := _u.mutation.NullLink(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullLink, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		v.Property(dsl.Single, fieldtype.FieldActive, value)
	}
	if value, ok := _u.mutation.NullActive(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullActive, value)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		v.Property(dsl.Single, fieldtype.FieldDeleted, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		v.Property(dsl.Single, fieldtype.FieldDeletedAt, value)
	}
	if value, ok := _u.mutation.RawData(); ok {
		v.Property(dsl.Single, fieldtype.FieldRawData, value)
	}
	if value, ok := _u.mutation.Sensitive(); ok {
		v.Property(dsl.Single, fieldtype.FieldSensitive, value)
	}
	if value, ok := _u.mutation.IP(); ok {
		v.Property(dsl.Single, fieldtype.FieldIP, value)
	}
	if value, ok := _u.mutation.NullInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullInt64, value)
	}
	if value, ok := _u.mutation.SchemaInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt, __.Union(__.Values(fieldtype.FieldSchemaInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt8, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt8(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt8, __.Union(__.Values(fieldtype.FieldSchemaInt8), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt64, value)
	}
	if value, ok := _u.mutation.AddedSchemaInt64(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaInt64, __.Union(__.Values(fieldtype.FieldSchemaInt64), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat, value)
	}
	if value, ok := _u.mutation.AddedSchemaFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat, __.Union(__.Values(fieldtype.FieldSchemaFloat), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.SchemaFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat32, value)
	}
	if value, ok := _u.mutation.AddedSchemaFloat32(); ok {
		v.Property(dsl.Single, fieldtype.FieldSchemaFloat32, __.Union(__.Values(fieldtype.FieldSchemaFloat32), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.NullFloat(); ok {
		v.Property(dsl.Single, fieldtype.FieldNullFloat, value)
	}
	if value, ok := _u.mutation.Role(); ok {
		v.Property(dsl.Single, fieldtype.FieldRole, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		v.Property(dsl.Single, fieldtype.FieldPriority, value)
	}
	if value, ok := _u.mutation.OptionalUUID(); ok {
		v.Property(dsl.Single, fieldtype.FieldOptionalUUID, value)
	}
	if value, ok := _u.mutation.NillableUUID(); ok {
		v.Property(dsl.Single, fieldtype.FieldNillableUUID, value)
	}
	if value, ok := _u.mutation.Strings(); ok {
		v.Property(dsl.Single, fieldtype.FieldStrings, value)
	}
	if value, ok := _u.mutation.Pair(); ok {
		v.Property(dsl.Single, fieldtype.FieldPair, value)
	}
	if value, ok := _u.mutation.NilPair(); ok {
		v.Property(dsl.Single, fieldtype.FieldNilPair, value)
	}
	if value, ok := _u.mutation.Vstring(); ok {
		v.Property(dsl.Single, fieldtype.FieldVstring, value)
	}
	if value, ok := _u.mutation.Triple(); ok {
		v.Property(dsl.Single, fieldtype.FieldTriple, value)
	}
	if value, ok := _u.mutation.BigInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldBigInt, value)
	}
	if value, ok := _u.mutation.AddedBigInt(); ok {
		v.Property(dsl.Single, fieldtype.FieldBigInt, __.Union(__.Values(fieldtype.FieldBigInt), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.PasswordOther(); ok {
		v.Property(dsl.Single, fieldtype.FieldPasswordOther, value)
	}
	var properties []any
	if _u.mutation.OptionalIntCleared() {
		properties = append(properties, fieldtype.FieldOptionalInt)
	}
	if _u.mutation.OptionalInt8Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt8)
	}
	if _u.mutation.OptionalInt16Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt16)
	}
	if _u.mutation.OptionalInt32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt32)
	}
	if _u.mutation.OptionalInt64Cleared() {
		properties = append(properties, fieldtype.FieldOptionalInt64)
	}
	if _u.mutation.NillableIntCleared() {
		properties = append(properties, fieldtype.FieldNillableInt)
	}
	if _u.mutation.NillableInt8Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt8)
	}
	if _u.mutation.NillableInt16Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt16)
	}
	if _u.mutation.NillableInt32Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt32)
	}
	if _u.mutation.NillableInt64Cleared() {
		properties = append(properties, fieldtype.FieldNillableInt64)
	}
	if _u.mutation.ValidateOptionalInt32Cleared() {
		properties = append(properties, fieldtype.FieldValidateOptionalInt32)
	}
	if _u.mutation.OptionalUintCleared() {
		properties = append(properties, fieldtype.FieldOptionalUint)
	}
	if _u.mutation.OptionalUint8Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint8)
	}
	if _u.mutation.OptionalUint16Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint16)
	}
	if _u.mutation.OptionalUint32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint32)
	}
	if _u.mutation.OptionalUint64Cleared() {
		properties = append(properties, fieldtype.FieldOptionalUint64)
	}
	if _u.mutation.StateCleared() {
		properties = append(properties, fieldtype.FieldState)
	}
	if _u.mutation.OptionalFloatCleared() {
		properties = append(properties, fieldtype.FieldOptionalFloat)
	}
	if _u.mutation.OptionalFloat32Cleared() {
		properties = append(properties, fieldtype.FieldOptionalFloat32)
	}
	if _u.mutation.TextCleared() {
		properties = append(properties, fieldtype.FieldText)
	}
	if _u.mutation.DatetimeCleared() {
		properties = append(properties, fieldtype.FieldDatetime)
	}
	if _u.mutation.DecimalCleared() {
		properties = append(properties, fieldtype.FieldDecimal)
	}
	if _u.mutation.LinkOtherCleared() {
		properties = append(properties, fieldtype.FieldLinkOther)
	}
	if _u.mutation.LinkOtherFuncCleared() {
		properties = append(properties, fieldtype.FieldLinkOtherFunc)
	}
	if _u.mutation.MACCleared() {
		properties = append(properties, fieldtype.FieldMAC)
	}
	if _u.mutation.StringArrayCleared() {
		properties = append(properties, fieldtype.FieldStringArray)
	}
	if _u.mutation.PasswordCleared() {
		properties = append(properties, fieldtype.FieldPassword)
	}
	if _u.mutation.StringScannerCleared() {
		properties = append(properties, fieldtype.FieldStringScanner)
	}
	if _u.mutation.DurationCleared() {
		properties = append(properties, fieldtype.FieldDuration)
	}
	if _u.mutation.NdirCleared() {
		properties = append(properties, fieldtype.FieldNdir)
	}
	if _u.mutation.StrCleared() {
		properties = append(properties, fieldtype.FieldStr)
	}
	if _u.mutation.NullStrCleared() {
		properties = append(properties, fieldtype.FieldNullStr)
	}
	if _u.mutation.LinkCleared() {
		properties = append(properties, fieldtype.FieldLink)
	}
	if _u.mutation.NullLinkCleared() {
		properties = append(properties, fieldtype.FieldNullLink)
	}
	if _u.mutation.ActiveCleared() {
		properties = append(properties, fieldtype.FieldActive)
	}
	if _u.mutation.NullActiveCleared() {
		properties = append(properties, fieldtype.FieldNullActive)
	}
	if _u.mutation.DeletedCleared() {
		properties = append(properties, fieldtype.FieldDeleted)
	}
	if _u.mutation.DeletedAtCleared() {
		properties = append(properties, fieldtype.FieldDeletedAt)
	}
	if _u.mutation.RawDataCleared() {
		properties = append(properties, fieldtype.FieldRawData)
	}
	if _u.mutation.SensitiveCleared() {
		properties = append(properties, fieldtype.FieldSensitive)
	}
	if _u.mutation.IPCleared() {
		properties = append(properties, fieldtype.FieldIP)
	}
	if _u.mutation.NullInt64Cleared() {
		properties = append(properties, fieldtype.FieldNullInt64)
	}
	if _u.mutation.SchemaIntCleared() {
		properties = append(properties, fieldtype.FieldSchemaInt)
	}
	if _u.mutation.SchemaInt8Cleared() {
		properties = append(properties, fieldtype.FieldSchemaInt8)
	}
	if _u.mutation.SchemaInt64Cleared() {
		properties = append(properties, fieldtype.FieldSchemaInt64)
	}
	if _u.mutation.SchemaFloatCleared() {
		properties = append(properties, fieldtype.FieldSchemaFloat)
	}
	if _u.mutation.SchemaFloat32Cleared() {
		properties = append(properties, fieldtype.FieldSchemaFloat32)
	}
	if _u.mutation.NullFloatCleared() {
		properties = append(properties, fieldtype.FieldNullFloat)
	}
	if _u.mutation.PriorityCleared() {
		properties = append(properties, fieldtype.FieldPriority)
	}
	if _u.mutation.OptionalUUIDCleared() {
		properties = append(properties, fieldtype.FieldOptionalUUID)
	}
	if _u.mutation.NillableUUIDCleared() {
		properties = append(properties, fieldtype.FieldNillableUUID)
	}
	if _u.mutation.StringsCleared() {
		properties = append(properties, fieldtype.FieldStrings)
	}
	if _u.mutation.NilPairCleared() {
		properties = append(properties, fieldtype.FieldNilPair)
	}
	if _u.mutation.BigIntCleared() {
		properties = append(properties, fieldtype.FieldBigInt)
	}
	if _u.mutation.PasswordOtherCleared() {
		properties = append(properties, fieldtype.FieldPasswordOther)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if len(_u.fields) > 0 {
		fields := make([]any, 0, len(_u.fields)+1)
		fields = append(fields, true)
		for _, f := range _u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
