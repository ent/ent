// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/pet"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
	"github.com/google/uuid"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks    []Hook
	mutation *PetMutation
}

// Where appends a list predicates to the PetUpdate builder.
func (u *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetAge sets the "age" field.
func (m *PetUpdate) SetAge(v float64) *PetUpdate {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *PetUpdate) SetNillableAge(v *float64) *PetUpdate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *PetUpdate) AddAge(v float64) *PetUpdate {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *PetUpdate) SetName(v string) *PetUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *PetUpdate) SetNillableName(v *string) *PetUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetUUID sets the "uuid" field.
func (m *PetUpdate) SetUUID(v uuid.UUID) *PetUpdate {
	m.mutation.SetUUID(v)
	return m
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (m *PetUpdate) SetNillableUUID(v *uuid.UUID) *PetUpdate {
	if v != nil {
		m.SetUUID(*v)
	}
	return m
}

// ClearUUID clears the value of the "uuid" field.
func (m *PetUpdate) ClearUUID() *PetUpdate {
	m.mutation.ClearUUID()
	return m
}

// SetNickname sets the "nickname" field.
func (m *PetUpdate) SetNickname(v string) *PetUpdate {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *PetUpdate) SetNillableNickname(v *string) *PetUpdate {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// ClearNickname clears the value of the "nickname" field.
func (m *PetUpdate) ClearNickname() *PetUpdate {
	m.mutation.ClearNickname()
	return m
}

// SetTrained sets the "trained" field.
func (m *PetUpdate) SetTrained(v bool) *PetUpdate {
	m.mutation.SetTrained(v)
	return m
}

// SetNillableTrained sets the "trained" field if the given value is not nil.
func (m *PetUpdate) SetNillableTrained(v *bool) *PetUpdate {
	if v != nil {
		m.SetTrained(*v)
	}
	return m
}

// SetOptionalTime sets the "optional_time" field.
func (m *PetUpdate) SetOptionalTime(v time.Time) *PetUpdate {
	m.mutation.SetOptionalTime(v)
	return m
}

// SetNillableOptionalTime sets the "optional_time" field if the given value is not nil.
func (m *PetUpdate) SetNillableOptionalTime(v *time.Time) *PetUpdate {
	if v != nil {
		m.SetOptionalTime(*v)
	}
	return m
}

// ClearOptionalTime clears the value of the "optional_time" field.
func (m *PetUpdate) ClearOptionalTime() *PetUpdate {
	m.mutation.ClearOptionalTime()
	return m
}

// SetTeamID sets the "team" edge to the User entity by ID.
func (m *PetUpdate) SetTeamID(id string) *PetUpdate {
	m.mutation.SetTeamID(id)
	return m
}

// SetNillableTeamID sets the "team" edge to the User entity by ID if the given value is not nil.
func (m *PetUpdate) SetNillableTeamID(id *string) *PetUpdate {
	if id != nil {
		m = m.SetTeamID(*id)
	}
	return m
}

// SetTeam sets the "team" edge to the User entity.
func (m *PetUpdate) SetTeam(v *User) *PetUpdate {
	return m.SetTeamID(v.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (m *PetUpdate) SetOwnerID(id string) *PetUpdate {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (m *PetUpdate) SetNillableOwnerID(id *string) *PetUpdate {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the User entity.
func (m *PetUpdate) SetOwner(v *User) *PetUpdate {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the PetMutation object of the builder.
func (m *PetUpdate) Mutation() *PetMutation {
	return m.mutation
}

// ClearTeam clears the "team" edge to the User entity.
func (u *PetUpdate) ClearTeam() *PetUpdate {
	u.mutation.ClearTeam()
	return u
}

// ClearOwner clears the "owner" edge to the User entity.
func (u *PetUpdate) ClearOwner() *PetUpdate {
	u.mutation.ClearOwner()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *PetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *PetUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PetUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *PetUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := u.gremlin().Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	u.mutation.done = true
	return res.ReadInt()
}

func (u *PetUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(pet.Label)
	for _, p := range u.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.Age(); ok {
		v.Property(dsl.Single, pet.FieldAge, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		v.Property(dsl.Single, pet.FieldAge, __.Union(__.Values(pet.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Name(); ok {
		v.Property(dsl.Single, pet.FieldName, value)
	}
	if value, ok := u.mutation.UUID(); ok {
		v.Property(dsl.Single, pet.FieldUUID, value)
	}
	if value, ok := u.mutation.Nickname(); ok {
		v.Property(dsl.Single, pet.FieldNickname, value)
	}
	if value, ok := u.mutation.Trained(); ok {
		v.Property(dsl.Single, pet.FieldTrained, value)
	}
	if value, ok := u.mutation.OptionalTime(); ok {
		v.Property(dsl.Single, pet.FieldOptionalTime, value)
	}
	var properties []any
	if u.mutation.UUIDCleared() {
		properties = append(properties, pet.FieldUUID)
	}
	if u.mutation.NicknameCleared() {
		properties = append(properties, pet.FieldNickname)
	}
	if u.mutation.OptionalTimeCleared() {
		properties = append(properties, pet.FieldOptionalTime)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if u.mutation.TeamCleared() {
		tr := rv.Clone().InE(user.TeamLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.TeamIDs() {
		v.AddE(user.TeamLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.TeamLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(pet.Label, user.TeamLabel, id)),
		})
	}
	if u.mutation.OwnerCleared() {
		tr := rv.Clone().InE(user.PetsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.OwnerIDs() {
		v.AddE(user.PetsLabel).From(g.V(id)).InV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PetMutation
}

// SetAge sets the "age" field.
func (m *PetUpdateOne) SetAge(v float64) *PetUpdateOne {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableAge(v *float64) *PetUpdateOne {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *PetUpdateOne) AddAge(v float64) *PetUpdateOne {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *PetUpdateOne) SetName(v string) *PetUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableName(v *string) *PetUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetUUID sets the "uuid" field.
func (m *PetUpdateOne) SetUUID(v uuid.UUID) *PetUpdateOne {
	m.mutation.SetUUID(v)
	return m
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableUUID(v *uuid.UUID) *PetUpdateOne {
	if v != nil {
		m.SetUUID(*v)
	}
	return m
}

// ClearUUID clears the value of the "uuid" field.
func (m *PetUpdateOne) ClearUUID() *PetUpdateOne {
	m.mutation.ClearUUID()
	return m
}

// SetNickname sets the "nickname" field.
func (m *PetUpdateOne) SetNickname(v string) *PetUpdateOne {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableNickname(v *string) *PetUpdateOne {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// ClearNickname clears the value of the "nickname" field.
func (m *PetUpdateOne) ClearNickname() *PetUpdateOne {
	m.mutation.ClearNickname()
	return m
}

// SetTrained sets the "trained" field.
func (m *PetUpdateOne) SetTrained(v bool) *PetUpdateOne {
	m.mutation.SetTrained(v)
	return m
}

// SetNillableTrained sets the "trained" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableTrained(v *bool) *PetUpdateOne {
	if v != nil {
		m.SetTrained(*v)
	}
	return m
}

// SetOptionalTime sets the "optional_time" field.
func (m *PetUpdateOne) SetOptionalTime(v time.Time) *PetUpdateOne {
	m.mutation.SetOptionalTime(v)
	return m
}

// SetNillableOptionalTime sets the "optional_time" field if the given value is not nil.
func (m *PetUpdateOne) SetNillableOptionalTime(v *time.Time) *PetUpdateOne {
	if v != nil {
		m.SetOptionalTime(*v)
	}
	return m
}

// ClearOptionalTime clears the value of the "optional_time" field.
func (m *PetUpdateOne) ClearOptionalTime() *PetUpdateOne {
	m.mutation.ClearOptionalTime()
	return m
}

// SetTeamID sets the "team" edge to the User entity by ID.
func (m *PetUpdateOne) SetTeamID(id string) *PetUpdateOne {
	m.mutation.SetTeamID(id)
	return m
}

// SetNillableTeamID sets the "team" edge to the User entity by ID if the given value is not nil.
func (m *PetUpdateOne) SetNillableTeamID(id *string) *PetUpdateOne {
	if id != nil {
		m = m.SetTeamID(*id)
	}
	return m
}

// SetTeam sets the "team" edge to the User entity.
func (m *PetUpdateOne) SetTeam(v *User) *PetUpdateOne {
	return m.SetTeamID(v.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (m *PetUpdateOne) SetOwnerID(id string) *PetUpdateOne {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (m *PetUpdateOne) SetNillableOwnerID(id *string) *PetUpdateOne {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the User entity.
func (m *PetUpdateOne) SetOwner(v *User) *PetUpdateOne {
	return m.SetOwnerID(v.ID)
}

// Mutation returns the PetMutation object of the builder.
func (m *PetUpdateOne) Mutation() *PetMutation {
	return m.mutation
}

// ClearTeam clears the "team" edge to the User entity.
func (u *PetUpdateOne) ClearTeam() *PetUpdateOne {
	u.mutation.ClearTeam()
	return u
}

// ClearOwner clears the "owner" edge to the User entity.
func (u *PetUpdateOne) ClearOwner() *PetUpdateOne {
	u.mutation.ClearOwner()
	return u
}

// Where appends a list predicates to the PetUpdate builder.
func (u *PetUpdateOne) Where(ps ...predicate.Pet) *PetUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Pet entity.
func (u *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PetUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *PetUpdateOne) gremlinSave(ctx context.Context) (*Pet, error) {
	res := &gremlin.Response{}
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pet.id" for update`)}
	}
	query, bindings := u.gremlin(id).Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	u.mutation.done = true
	m := &Pet{config: u.config}
	if err := m.FromResponse(res); err != nil {
		return nil, err
	}
	return m, nil
}

func (u *PetUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.Age(); ok {
		v.Property(dsl.Single, pet.FieldAge, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		v.Property(dsl.Single, pet.FieldAge, __.Union(__.Values(pet.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Name(); ok {
		v.Property(dsl.Single, pet.FieldName, value)
	}
	if value, ok := u.mutation.UUID(); ok {
		v.Property(dsl.Single, pet.FieldUUID, value)
	}
	if value, ok := u.mutation.Nickname(); ok {
		v.Property(dsl.Single, pet.FieldNickname, value)
	}
	if value, ok := u.mutation.Trained(); ok {
		v.Property(dsl.Single, pet.FieldTrained, value)
	}
	if value, ok := u.mutation.OptionalTime(); ok {
		v.Property(dsl.Single, pet.FieldOptionalTime, value)
	}
	var properties []any
	if u.mutation.UUIDCleared() {
		properties = append(properties, pet.FieldUUID)
	}
	if u.mutation.NicknameCleared() {
		properties = append(properties, pet.FieldNickname)
	}
	if u.mutation.OptionalTimeCleared() {
		properties = append(properties, pet.FieldOptionalTime)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if u.mutation.TeamCleared() {
		tr := rv.Clone().InE(user.TeamLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.TeamIDs() {
		v.AddE(user.TeamLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.TeamLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(pet.Label, user.TeamLabel, id)),
		})
	}
	if u.mutation.OwnerCleared() {
		tr := rv.Clone().InE(user.PetsLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.OwnerIDs() {
		v.AddE(user.PetsLabel).From(g.V(id)).InV()
	}
	if len(u.fields) > 0 {
		fields := make([]any, 0, len(u.fields)+1)
		fields = append(fields, true)
		for _, f := range u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
