// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/group"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (_u *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetActive sets the "active" field.
func (_u *GroupUpdate) SetActive(v bool) *GroupUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableActive(v *bool) *GroupUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpire sets the "expire" field.
func (_u *GroupUpdate) SetExpire(v time.Time) *GroupUpdate {
	_u.mutation.SetExpire(v)
	return _u
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableExpire(v *time.Time) *GroupUpdate {
	if v != nil {
		_u.SetExpire(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *GroupUpdate) SetType(v string) *GroupUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableType(v *string) *GroupUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *GroupUpdate) ClearType() *GroupUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetMaxUsers sets the "max_users" field.
func (_u *GroupUpdate) SetMaxUsers(v int) *GroupUpdate {
	_u.mutation.ResetMaxUsers()
	_u.mutation.SetMaxUsers(v)
	return _u
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableMaxUsers(v *int) *GroupUpdate {
	if v != nil {
		_u.SetMaxUsers(*v)
	}
	return _u
}

// AddMaxUsers adds value to the "max_users" field.
func (_u *GroupUpdate) AddMaxUsers(v int) *GroupUpdate {
	_u.mutation.AddMaxUsers(v)
	return _u
}

// ClearMaxUsers clears the value of the "max_users" field.
func (_u *GroupUpdate) ClearMaxUsers() *GroupUpdate {
	_u.mutation.ClearMaxUsers()
	return _u
}

// SetName sets the "name" field.
func (_u *GroupUpdate) SetName(v string) *GroupUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GroupUpdate) SetNillableName(v *string) *GroupUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GroupUpdate) AddFileIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GroupUpdate) AddFiles(v ...*File) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddBlockedIDs adds the "blocked" edge to the User entity by IDs.
func (_u *GroupUpdate) AddBlockedIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddBlockedIDs(ids...)
	return _u
}

// AddBlocked adds the "blocked" edges to the User entity.
func (_u *GroupUpdate) AddBlocked(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *GroupUpdate) AddUserIDs(ids ...string) *GroupUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *GroupUpdate) AddUsers(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// SetInfoID sets the "info" edge to the GroupInfo entity by ID.
func (_u *GroupUpdate) SetInfoID(id string) *GroupUpdate {
	_u.mutation.SetInfoID(id)
	return _u
}

// SetInfo sets the "info" edge to the GroupInfo entity.
func (_u *GroupUpdate) SetInfo(v *GroupInfo) *GroupUpdate {
	return _u.SetInfoID(v.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (_u *GroupUpdate) Mutation() *GroupMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GroupUpdate) ClearFiles() *GroupUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GroupUpdate) RemoveFileIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GroupUpdate) RemoveFiles(v ...*File) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearBlocked clears all "blocked" edges to the User entity.
func (_u *GroupUpdate) ClearBlocked() *GroupUpdate {
	_u.mutation.ClearBlocked()
	return _u
}

// RemoveBlockedIDs removes the "blocked" edge to User entities by IDs.
func (_u *GroupUpdate) RemoveBlockedIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveBlockedIDs(ids...)
	return _u
}

// RemoveBlocked removes "blocked" edges to User entities.
func (_u *GroupUpdate) RemoveBlocked(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *GroupUpdate) ClearUsers() *GroupUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *GroupUpdate) RemoveUserIDs(ids ...string) *GroupUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *GroupUpdate) RemoveUsers(v ...*User) *GroupUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearInfo clears the "info" edge to the GroupInfo entity.
func (_u *GroupUpdate) ClearInfo() *GroupUpdate {
	_u.mutation.ClearInfo()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GroupUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := group.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Group.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MaxUsers(); ok {
		if err := group.MaxUsersValidator(v); err != nil {
			return &ValidationError{Name: "max_users", err: fmt.Errorf(`ent: validator failed for field "Group.max_users": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if _u.mutation.InfoCleared() && len(_u.mutation.InfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.info"`)
	}
	return nil
}

func (_u *GroupUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := _u.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := _u.gremlin().Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	_u.mutation.done = true
	return res.ReadInt()
}

func (_u *GroupUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(group.Label)
	for _, p := range _u.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.Active(); ok {
		v.Property(dsl.Single, group.FieldActive, value)
	}
	if value, ok := _u.mutation.Expire(); ok {
		v.Property(dsl.Single, group.FieldExpire, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		v.Property(dsl.Single, group.FieldType, value)
	}
	if value, ok := _u.mutation.MaxUsers(); ok {
		v.Property(dsl.Single, group.FieldMaxUsers, value)
	}
	if value, ok := _u.mutation.AddedMaxUsers(); ok {
		v.Property(dsl.Single, group.FieldMaxUsers, __.Union(__.Values(group.FieldMaxUsers), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Name(); ok {
		v.Property(dsl.Single, group.FieldName, value)
	}
	var properties []any
	if _u.mutation.TypeCleared() {
		properties = append(properties, group.FieldType)
	}
	if _u.mutation.MaxUsersCleared() {
		properties = append(properties, group.FieldMaxUsers)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	for _, id := range _u.mutation.RemovedFilesIDs() {
		tr := rv.Clone().OutE(group.FilesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.FilesIDs() {
		v.AddE(group.FilesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(group.FilesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(group.Label, group.FilesLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedBlockedIDs() {
		tr := rv.Clone().OutE(group.BlockedLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.BlockedIDs() {
		v.AddE(group.BlockedLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(group.BlockedLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(group.Label, group.BlockedLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedUsersIDs() {
		tr := rv.Clone().InE(user.GroupsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.UsersIDs() {
		v.AddE(user.GroupsLabel).From(g.V(id)).InV()
	}
	if _u.mutation.InfoCleared() {
		tr := rv.Clone().OutE(group.InfoLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.InfoIDs() {
		v.AddE(group.InfoLabel).To(g.V(id)).OutV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetActive sets the "active" field.
func (_u *GroupUpdateOne) SetActive(v bool) *GroupUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableActive(v *bool) *GroupUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetExpire sets the "expire" field.
func (_u *GroupUpdateOne) SetExpire(v time.Time) *GroupUpdateOne {
	_u.mutation.SetExpire(v)
	return _u
}

// SetNillableExpire sets the "expire" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableExpire(v *time.Time) *GroupUpdateOne {
	if v != nil {
		_u.SetExpire(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *GroupUpdateOne) SetType(v string) *GroupUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableType(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *GroupUpdateOne) ClearType() *GroupUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetMaxUsers sets the "max_users" field.
func (_u *GroupUpdateOne) SetMaxUsers(v int) *GroupUpdateOne {
	_u.mutation.ResetMaxUsers()
	_u.mutation.SetMaxUsers(v)
	return _u
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableMaxUsers(v *int) *GroupUpdateOne {
	if v != nil {
		_u.SetMaxUsers(*v)
	}
	return _u
}

// AddMaxUsers adds value to the "max_users" field.
func (_u *GroupUpdateOne) AddMaxUsers(v int) *GroupUpdateOne {
	_u.mutation.AddMaxUsers(v)
	return _u
}

// ClearMaxUsers clears the value of the "max_users" field.
func (_u *GroupUpdateOne) ClearMaxUsers() *GroupUpdateOne {
	_u.mutation.ClearMaxUsers()
	return _u
}

// SetName sets the "name" field.
func (_u *GroupUpdateOne) SetName(v string) *GroupUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GroupUpdateOne) SetNillableName(v *string) *GroupUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GroupUpdateOne) AddFileIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GroupUpdateOne) AddFiles(v ...*File) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddBlockedIDs adds the "blocked" edge to the User entity by IDs.
func (_u *GroupUpdateOne) AddBlockedIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddBlockedIDs(ids...)
	return _u
}

// AddBlocked adds the "blocked" edges to the User entity.
func (_u *GroupUpdateOne) AddBlocked(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *GroupUpdateOne) AddUserIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *GroupUpdateOne) AddUsers(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// SetInfoID sets the "info" edge to the GroupInfo entity by ID.
func (_u *GroupUpdateOne) SetInfoID(id string) *GroupUpdateOne {
	_u.mutation.SetInfoID(id)
	return _u
}

// SetInfo sets the "info" edge to the GroupInfo entity.
func (_u *GroupUpdateOne) SetInfo(v *GroupInfo) *GroupUpdateOne {
	return _u.SetInfoID(v.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (_u *GroupUpdateOne) Mutation() *GroupMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GroupUpdateOne) ClearFiles() *GroupUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GroupUpdateOne) RemoveFileIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GroupUpdateOne) RemoveFiles(v ...*File) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearBlocked clears all "blocked" edges to the User entity.
func (_u *GroupUpdateOne) ClearBlocked() *GroupUpdateOne {
	_u.mutation.ClearBlocked()
	return _u
}

// RemoveBlockedIDs removes the "blocked" edge to User entities by IDs.
func (_u *GroupUpdateOne) RemoveBlockedIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveBlockedIDs(ids...)
	return _u
}

// RemoveBlocked removes "blocked" edges to User entities.
func (_u *GroupUpdateOne) RemoveBlocked(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *GroupUpdateOne) ClearUsers() *GroupUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *GroupUpdateOne) RemoveUserIDs(ids ...string) *GroupUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *GroupUpdateOne) RemoveUsers(v ...*User) *GroupUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearInfo clears the "info" edge to the GroupInfo entity.
func (_u *GroupUpdateOne) ClearInfo() *GroupUpdateOne {
	_u.mutation.ClearInfo()
	return _u
}

// Where appends a list predicates to the GroupUpdate builder.
func (_u *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Group entity.
func (_u *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GroupUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := group.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Group.type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MaxUsers(); ok {
		if err := group.MaxUsersValidator(v); err != nil {
			return &ValidationError{Name: "max_users", err: fmt.Errorf(`ent: validator failed for field "Group.max_users": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Group.name": %w`, err)}
		}
	}
	if _u.mutation.InfoCleared() && len(_u.mutation.InfoIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Group.info"`)
	}
	return nil
}

func (_u *GroupUpdateOne) gremlinSave(ctx context.Context) (*Group, error) {
	if err := _u.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	query, bindings := _u.gremlin(id).Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	_u.mutation.done = true
	_m := &Group{config: _u.config}
	if err := _m.FromResponse(res); err != nil {
		return nil, err
	}
	return _m, nil
}

func (_u *GroupUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.Active(); ok {
		v.Property(dsl.Single, group.FieldActive, value)
	}
	if value, ok := _u.mutation.Expire(); ok {
		v.Property(dsl.Single, group.FieldExpire, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		v.Property(dsl.Single, group.FieldType, value)
	}
	if value, ok := _u.mutation.MaxUsers(); ok {
		v.Property(dsl.Single, group.FieldMaxUsers, value)
	}
	if value, ok := _u.mutation.AddedMaxUsers(); ok {
		v.Property(dsl.Single, group.FieldMaxUsers, __.Union(__.Values(group.FieldMaxUsers), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Name(); ok {
		v.Property(dsl.Single, group.FieldName, value)
	}
	var properties []any
	if _u.mutation.TypeCleared() {
		properties = append(properties, group.FieldType)
	}
	if _u.mutation.MaxUsersCleared() {
		properties = append(properties, group.FieldMaxUsers)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	for _, id := range _u.mutation.RemovedFilesIDs() {
		tr := rv.Clone().OutE(group.FilesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.FilesIDs() {
		v.AddE(group.FilesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(group.FilesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(group.Label, group.FilesLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedBlockedIDs() {
		tr := rv.Clone().OutE(group.BlockedLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.BlockedIDs() {
		v.AddE(group.BlockedLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(group.BlockedLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(group.Label, group.BlockedLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedUsersIDs() {
		tr := rv.Clone().InE(user.GroupsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.UsersIDs() {
		v.AddE(user.GroupsLabel).From(g.V(id)).InV()
	}
	if _u.mutation.InfoCleared() {
		tr := rv.Clone().OutE(group.InfoLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.InfoIDs() {
		v.AddE(group.InfoLabel).To(g.V(id)).OutV()
	}
	if len(_u.fields) > 0 {
		fields := make([]any, 0, len(_u.fields)+1)
		fields = append(fields, true)
		for _, f := range _u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
