// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	schemadir "entgo.io/ent/entc/integration/ent/schema/dir"
	"entgo.io/ent/entc/integration/gremlin/ent/comment"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
)

// CommentUpdate is the builder for updating Comment entities.
type CommentUpdate struct {
	config
	hooks    []Hook
	mutation *CommentMutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (u *CommentUpdate) Where(ps ...predicate.Comment) *CommentUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetUniqueInt sets the "unique_int" field.
func (m *CommentUpdate) SetUniqueInt(v int) *CommentUpdate {
	m.mutation.ResetUniqueInt()
	m.mutation.SetUniqueInt(v)
	return m
}

// SetNillableUniqueInt sets the "unique_int" field if the given value is not nil.
func (m *CommentUpdate) SetNillableUniqueInt(v *int) *CommentUpdate {
	if v != nil {
		m.SetUniqueInt(*v)
	}
	return m
}

// AddUniqueInt adds value to the "unique_int" field.
func (m *CommentUpdate) AddUniqueInt(v int) *CommentUpdate {
	m.mutation.AddUniqueInt(v)
	return m
}

// SetUniqueFloat sets the "unique_float" field.
func (m *CommentUpdate) SetUniqueFloat(v float64) *CommentUpdate {
	m.mutation.ResetUniqueFloat()
	m.mutation.SetUniqueFloat(v)
	return m
}

// SetNillableUniqueFloat sets the "unique_float" field if the given value is not nil.
func (m *CommentUpdate) SetNillableUniqueFloat(v *float64) *CommentUpdate {
	if v != nil {
		m.SetUniqueFloat(*v)
	}
	return m
}

// AddUniqueFloat adds value to the "unique_float" field.
func (m *CommentUpdate) AddUniqueFloat(v float64) *CommentUpdate {
	m.mutation.AddUniqueFloat(v)
	return m
}

// SetNillableInt sets the "nillable_int" field.
func (m *CommentUpdate) SetNillableInt(v int) *CommentUpdate {
	m.mutation.ResetNillableInt()
	m.mutation.SetNillableInt(v)
	return m
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (m *CommentUpdate) SetNillableNillableInt(v *int) *CommentUpdate {
	if v != nil {
		m.SetNillableInt(*v)
	}
	return m
}

// AddNillableInt adds value to the "nillable_int" field.
func (m *CommentUpdate) AddNillableInt(v int) *CommentUpdate {
	m.mutation.AddNillableInt(v)
	return m
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (m *CommentUpdate) ClearNillableInt() *CommentUpdate {
	m.mutation.ClearNillableInt()
	return m
}

// SetTable sets the "table" field.
func (m *CommentUpdate) SetTable(v string) *CommentUpdate {
	m.mutation.SetTable(v)
	return m
}

// SetNillableTable sets the "table" field if the given value is not nil.
func (m *CommentUpdate) SetNillableTable(v *string) *CommentUpdate {
	if v != nil {
		m.SetTable(*v)
	}
	return m
}

// ClearTable clears the value of the "table" field.
func (m *CommentUpdate) ClearTable() *CommentUpdate {
	m.mutation.ClearTable()
	return m
}

// SetDir sets the "dir" field.
func (m *CommentUpdate) SetDir(v schemadir.Dir) *CommentUpdate {
	m.mutation.SetDir(v)
	return m
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (m *CommentUpdate) SetNillableDir(v *schemadir.Dir) *CommentUpdate {
	if v != nil {
		m.SetDir(*v)
	}
	return m
}

// ClearDir clears the value of the "dir" field.
func (m *CommentUpdate) ClearDir() *CommentUpdate {
	m.mutation.ClearDir()
	return m
}

// SetClient sets the "client" field.
func (m *CommentUpdate) SetClient(v string) *CommentUpdate {
	m.mutation.SetClient(v)
	return m
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (m *CommentUpdate) SetNillableClient(v *string) *CommentUpdate {
	if v != nil {
		m.SetClient(*v)
	}
	return m
}

// ClearClient clears the value of the "client" field.
func (m *CommentUpdate) ClearClient() *CommentUpdate {
	m.mutation.ClearClient()
	return m
}

// Mutation returns the CommentMutation object of the builder.
func (m *CommentUpdate) Mutation() *CommentMutation {
	return m.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *CommentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *CommentUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *CommentUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *CommentUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := u.gremlin().Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	u.mutation.done = true
	return res.ReadInt()
}

func (u *CommentUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(comment.Label)
	for _, p := range u.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.UniqueInt(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueInt, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueInt, value)),
		})
		v.Property(dsl.Single, comment.FieldUniqueInt, value)
	}
	if value, ok := u.mutation.AddedUniqueInt(); ok {
		addValue := rv.Clone().Union(__.Values(comment.FieldUniqueInt), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueInt, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueInt, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, comment.FieldUniqueInt, __.Union(__.Values(comment.FieldUniqueInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.UniqueFloat(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueFloat, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueFloat, value)),
		})
		v.Property(dsl.Single, comment.FieldUniqueFloat, value)
	}
	if value, ok := u.mutation.AddedUniqueFloat(); ok {
		addValue := rv.Clone().Union(__.Values(comment.FieldUniqueFloat), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueFloat, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueFloat, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, comment.FieldUniqueFloat, __.Union(__.Values(comment.FieldUniqueFloat), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.NillableInt(); ok {
		v.Property(dsl.Single, comment.FieldNillableInt, value)
	}
	if value, ok := u.mutation.AddedNillableInt(); ok {
		v.Property(dsl.Single, comment.FieldNillableInt, __.Union(__.Values(comment.FieldNillableInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Table(); ok {
		v.Property(dsl.Single, comment.FieldTable, value)
	}
	if value, ok := u.mutation.Dir(); ok {
		v.Property(dsl.Single, comment.FieldDir, value)
	}
	if value, ok := u.mutation.GetClient(); ok {
		v.Property(dsl.Single, comment.FieldClient, value)
	}
	var properties []any
	if u.mutation.NillableIntCleared() {
		properties = append(properties, comment.FieldNillableInt)
	}
	if u.mutation.TableCleared() {
		properties = append(properties, comment.FieldTable)
	}
	if u.mutation.DirCleared() {
		properties = append(properties, comment.FieldDir)
	}
	if u.mutation.ClientCleared() {
		properties = append(properties, comment.FieldClient)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// CommentUpdateOne is the builder for updating a single Comment entity.
type CommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentMutation
}

// SetUniqueInt sets the "unique_int" field.
func (m *CommentUpdateOne) SetUniqueInt(v int) *CommentUpdateOne {
	m.mutation.ResetUniqueInt()
	m.mutation.SetUniqueInt(v)
	return m
}

// SetNillableUniqueInt sets the "unique_int" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableUniqueInt(v *int) *CommentUpdateOne {
	if v != nil {
		m.SetUniqueInt(*v)
	}
	return m
}

// AddUniqueInt adds value to the "unique_int" field.
func (m *CommentUpdateOne) AddUniqueInt(v int) *CommentUpdateOne {
	m.mutation.AddUniqueInt(v)
	return m
}

// SetUniqueFloat sets the "unique_float" field.
func (m *CommentUpdateOne) SetUniqueFloat(v float64) *CommentUpdateOne {
	m.mutation.ResetUniqueFloat()
	m.mutation.SetUniqueFloat(v)
	return m
}

// SetNillableUniqueFloat sets the "unique_float" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableUniqueFloat(v *float64) *CommentUpdateOne {
	if v != nil {
		m.SetUniqueFloat(*v)
	}
	return m
}

// AddUniqueFloat adds value to the "unique_float" field.
func (m *CommentUpdateOne) AddUniqueFloat(v float64) *CommentUpdateOne {
	m.mutation.AddUniqueFloat(v)
	return m
}

// SetNillableInt sets the "nillable_int" field.
func (m *CommentUpdateOne) SetNillableInt(v int) *CommentUpdateOne {
	m.mutation.ResetNillableInt()
	m.mutation.SetNillableInt(v)
	return m
}

// SetNillableNillableInt sets the "nillable_int" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableNillableInt(v *int) *CommentUpdateOne {
	if v != nil {
		m.SetNillableInt(*v)
	}
	return m
}

// AddNillableInt adds value to the "nillable_int" field.
func (m *CommentUpdateOne) AddNillableInt(v int) *CommentUpdateOne {
	m.mutation.AddNillableInt(v)
	return m
}

// ClearNillableInt clears the value of the "nillable_int" field.
func (m *CommentUpdateOne) ClearNillableInt() *CommentUpdateOne {
	m.mutation.ClearNillableInt()
	return m
}

// SetTable sets the "table" field.
func (m *CommentUpdateOne) SetTable(v string) *CommentUpdateOne {
	m.mutation.SetTable(v)
	return m
}

// SetNillableTable sets the "table" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableTable(v *string) *CommentUpdateOne {
	if v != nil {
		m.SetTable(*v)
	}
	return m
}

// ClearTable clears the value of the "table" field.
func (m *CommentUpdateOne) ClearTable() *CommentUpdateOne {
	m.mutation.ClearTable()
	return m
}

// SetDir sets the "dir" field.
func (m *CommentUpdateOne) SetDir(v schemadir.Dir) *CommentUpdateOne {
	m.mutation.SetDir(v)
	return m
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableDir(v *schemadir.Dir) *CommentUpdateOne {
	if v != nil {
		m.SetDir(*v)
	}
	return m
}

// ClearDir clears the value of the "dir" field.
func (m *CommentUpdateOne) ClearDir() *CommentUpdateOne {
	m.mutation.ClearDir()
	return m
}

// SetClient sets the "client" field.
func (m *CommentUpdateOne) SetClient(v string) *CommentUpdateOne {
	m.mutation.SetClient(v)
	return m
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (m *CommentUpdateOne) SetNillableClient(v *string) *CommentUpdateOne {
	if v != nil {
		m.SetClient(*v)
	}
	return m
}

// ClearClient clears the value of the "client" field.
func (m *CommentUpdateOne) ClearClient() *CommentUpdateOne {
	m.mutation.ClearClient()
	return m
}

// Mutation returns the CommentMutation object of the builder.
func (m *CommentUpdateOne) Mutation() *CommentMutation {
	return m.mutation
}

// Where appends a list predicates to the CommentUpdate builder.
func (u *CommentUpdateOne) Where(ps ...predicate.Comment) *CommentUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *CommentUpdateOne) Select(field string, fields ...string) *CommentUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated Comment entity.
func (u *CommentUpdateOne) Save(ctx context.Context) (*Comment, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *CommentUpdateOne) SaveX(ctx context.Context) *Comment {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *CommentUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (u *CommentUpdateOne) gremlinSave(ctx context.Context) (*Comment, error) {
	res := &gremlin.Response{}
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comment.id" for update`)}
	}
	query, bindings := u.gremlin(id).Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	u.mutation.done = true
	m := &Comment{config: u.config}
	if err := m.FromResponse(res); err != nil {
		return nil, err
	}
	return m, nil
}

func (u *CommentUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.UniqueInt(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueInt, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueInt, value)),
		})
		v.Property(dsl.Single, comment.FieldUniqueInt, value)
	}
	if value, ok := u.mutation.AddedUniqueInt(); ok {
		addValue := rv.Clone().Union(__.Values(comment.FieldUniqueInt), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueInt, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueInt, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, comment.FieldUniqueInt, __.Union(__.Values(comment.FieldUniqueInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.UniqueFloat(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueFloat, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueFloat, value)),
		})
		v.Property(dsl.Single, comment.FieldUniqueFloat, value)
	}
	if value, ok := u.mutation.AddedUniqueFloat(); ok {
		addValue := rv.Clone().Union(__.Values(comment.FieldUniqueFloat), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(comment.Label, comment.FieldUniqueFloat, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(comment.Label, comment.FieldUniqueFloat, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, comment.FieldUniqueFloat, __.Union(__.Values(comment.FieldUniqueFloat), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.NillableInt(); ok {
		v.Property(dsl.Single, comment.FieldNillableInt, value)
	}
	if value, ok := u.mutation.AddedNillableInt(); ok {
		v.Property(dsl.Single, comment.FieldNillableInt, __.Union(__.Values(comment.FieldNillableInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Table(); ok {
		v.Property(dsl.Single, comment.FieldTable, value)
	}
	if value, ok := u.mutation.Dir(); ok {
		v.Property(dsl.Single, comment.FieldDir, value)
	}
	if value, ok := u.mutation.GetClient(); ok {
		v.Property(dsl.Single, comment.FieldClient, value)
	}
	var properties []any
	if u.mutation.NillableIntCleared() {
		properties = append(properties, comment.FieldNillableInt)
	}
	if u.mutation.TableCleared() {
		properties = append(properties, comment.FieldTable)
	}
	if u.mutation.DirCleared() {
		properties = append(properties, comment.FieldDir)
	}
	if u.mutation.ClientCleared() {
		properties = append(properties, comment.FieldClient)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if len(u.fields) > 0 {
		fields := make([]any, 0, len(u.fields)+1)
		fields = append(fields, true)
		for _, f := range u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
