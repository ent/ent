// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/node"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (m *NodeCreate) SetValue(v int) *NodeCreate {
	m.mutation.SetValue(v)
	return m
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (m *NodeCreate) SetNillableValue(v *int) *NodeCreate {
	if v != nil {
		m.SetValue(*v)
	}
	return m
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NodeCreate) SetUpdatedAt(v time.Time) *NodeCreate {
	m.mutation.SetUpdatedAt(v)
	return m
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (m *NodeCreate) SetNillableUpdatedAt(v *time.Time) *NodeCreate {
	if v != nil {
		m.SetUpdatedAt(*v)
	}
	return m
}

// SetPrevID sets the "prev" edge to the Node entity by ID.
func (m *NodeCreate) SetPrevID(id string) *NodeCreate {
	m.mutation.SetPrevID(id)
	return m
}

// SetNillablePrevID sets the "prev" edge to the Node entity by ID if the given value is not nil.
func (m *NodeCreate) SetNillablePrevID(id *string) *NodeCreate {
	if id != nil {
		m = m.SetPrevID(*id)
	}
	return m
}

// SetPrev sets the "prev" edge to the Node entity.
func (m *NodeCreate) SetPrev(v *Node) *NodeCreate {
	return m.SetPrevID(v.ID)
}

// SetNextID sets the "next" edge to the Node entity by ID.
func (m *NodeCreate) SetNextID(id string) *NodeCreate {
	m.mutation.SetNextID(id)
	return m
}

// SetNillableNextID sets the "next" edge to the Node entity by ID if the given value is not nil.
func (m *NodeCreate) SetNillableNextID(id *string) *NodeCreate {
	if id != nil {
		m = m.SetNextID(*id)
	}
	return m
}

// SetNext sets the "next" edge to the Node entity.
func (m *NodeCreate) SetNext(v *Node) *NodeCreate {
	return m.SetNextID(v.ID)
}

// Mutation returns the NodeMutation object of the builder.
func (m *NodeCreate) Mutation() *NodeMutation {
	return m.mutation
}

// Save creates the Node in the database.
func (c *NodeCreate) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, c.gremlinSave, c.mutation, c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (c *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *NodeCreate) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *NodeCreate) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (c *NodeCreate) check() error {
	return nil
}

func (c *NodeCreate) gremlinSave(ctx context.Context) (*Node, error) {
	if err := c.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := c.gremlin().Query()
	if err := c.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Node{config: c.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	c.mutation.id = &rnode.ID
	c.mutation.done = true
	return rnode, nil
}

func (c *NodeCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(node.Label)
	if value, ok := c.mutation.Value(); ok {
		v.Property(dsl.Single, node.FieldValue, value)
	}
	if value, ok := c.mutation.UpdatedAt(); ok {
		v.Property(dsl.Single, node.FieldUpdatedAt, value)
	}
	for _, id := range c.mutation.PrevIDs() {
		v.AddE(node.NextLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(node.NextLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(node.Label, node.NextLabel, id)),
		})
	}
	for _, id := range c.mutation.NextIDs() {
		v.AddE(node.NextLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(node.NextLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(node.Label, node.NextLabel, id)),
		})
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
}
