// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/card"
	"entgo.io/ent/entc/integration/gremlin/ent/spec"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (m *CardCreate) SetCreateTime(v time.Time) *CardCreate {
	m.mutation.SetCreateTime(v)
	return m
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (m *CardCreate) SetNillableCreateTime(v *time.Time) *CardCreate {
	if v != nil {
		m.SetCreateTime(*v)
	}
	return m
}

// SetUpdateTime sets the "update_time" field.
func (m *CardCreate) SetUpdateTime(v time.Time) *CardCreate {
	m.mutation.SetUpdateTime(v)
	return m
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (m *CardCreate) SetNillableUpdateTime(v *time.Time) *CardCreate {
	if v != nil {
		m.SetUpdateTime(*v)
	}
	return m
}

// SetBalance sets the "balance" field.
func (m *CardCreate) SetBalance(v float64) *CardCreate {
	m.mutation.SetBalance(v)
	return m
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (m *CardCreate) SetNillableBalance(v *float64) *CardCreate {
	if v != nil {
		m.SetBalance(*v)
	}
	return m
}

// SetNumber sets the "number" field.
func (m *CardCreate) SetNumber(v string) *CardCreate {
	m.mutation.SetNumber(v)
	return m
}

// SetName sets the "name" field.
func (m *CardCreate) SetName(v string) *CardCreate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *CardCreate) SetNillableName(v *string) *CardCreate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (m *CardCreate) SetOwnerID(id string) *CardCreate {
	m.mutation.SetOwnerID(id)
	return m
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (m *CardCreate) SetNillableOwnerID(id *string) *CardCreate {
	if id != nil {
		m = m.SetOwnerID(*id)
	}
	return m
}

// SetOwner sets the "owner" edge to the User entity.
func (m *CardCreate) SetOwner(v *User) *CardCreate {
	return m.SetOwnerID(v.ID)
}

// AddSpecIDs adds the "spec" edge to the Spec entity by IDs.
func (m *CardCreate) AddSpecIDs(ids ...string) *CardCreate {
	m.mutation.AddSpecIDs(ids...)
	return m
}

// AddSpec adds the "spec" edges to the Spec entity.
func (m *CardCreate) AddSpec(v ...*Spec) *CardCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddSpecIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (m *CardCreate) Mutation() *CardMutation {
	return m.mutation
}

// Save creates the Card in the database.
func (c *CardCreate) Save(ctx context.Context) (*Card, error) {
	c.defaults()
	return withHooks(ctx, c.gremlinSave, c.mutation, c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (c *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (c *CardCreate) Exec(ctx context.Context) error {
	_, err := c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (c *CardCreate) ExecX(ctx context.Context) {
	if err := c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (c *CardCreate) defaults() {
	if _, ok := c.mutation.CreateTime(); !ok {
		v := card.DefaultCreateTime()
		c.mutation.SetCreateTime(v)
	}
	if _, ok := c.mutation.UpdateTime(); !ok {
		v := card.DefaultUpdateTime()
		c.mutation.SetUpdateTime(v)
	}
	if _, ok := c.mutation.Balance(); !ok {
		v := card.DefaultBalance
		c.mutation.SetBalance(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (c *CardCreate) check() error {
	if _, ok := c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Card.create_time"`)}
	}
	if _, ok := c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Card.update_time"`)}
	}
	if _, ok := c.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Card.balance"`)}
	}
	if _, ok := c.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Card.number"`)}
	}
	if v, ok := c.mutation.Number(); ok {
		if err := card.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Card.number": %w`, err)}
		}
	}
	if v, ok := c.mutation.Name(); ok {
		if err := card.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Card.name": %w`, err)}
		}
	}
	return nil
}

func (c *CardCreate) gremlinSave(ctx context.Context) (*Card, error) {
	if err := c.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	query, bindings := c.gremlin().Query()
	if err := c.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	rnode := &Card{config: c.config}
	if err := rnode.FromResponse(res); err != nil {
		return nil, err
	}
	c.mutation.id = &rnode.ID
	c.mutation.done = true
	return rnode, nil
}

func (c *CardCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.AddV(card.Label)
	if value, ok := c.mutation.CreateTime(); ok {
		v.Property(dsl.Single, card.FieldCreateTime, value)
	}
	if value, ok := c.mutation.UpdateTime(); ok {
		v.Property(dsl.Single, card.FieldUpdateTime, value)
	}
	if value, ok := c.mutation.Balance(); ok {
		v.Property(dsl.Single, card.FieldBalance, value)
	}
	if value, ok := c.mutation.Number(); ok {
		v.Property(dsl.Single, card.FieldNumber, value)
	}
	if value, ok := c.mutation.Name(); ok {
		v.Property(dsl.Single, card.FieldName, value)
	}
	for _, id := range c.mutation.OwnerIDs() {
		v.AddE(user.CardLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.CardLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(card.Label, user.CardLabel, id)),
		})
	}
	for _, id := range c.mutation.SpecIDs() {
		v.AddE(spec.CardLabel).From(g.V(id)).InV()
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	err      error
	builders []*CardCreate
}
