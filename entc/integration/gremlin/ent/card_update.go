// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/card"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"entgo.io/ent/entc/integration/gremlin/ent/spec"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (_u *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *CardUpdate) SetUpdateTime(v time.Time) *CardUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetBalance sets the "balance" field.
func (_u *CardUpdate) SetBalance(v float64) *CardUpdate {
	_u.mutation.ResetBalance()
	_u.mutation.SetBalance(v)
	return _u
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (_u *CardUpdate) SetNillableBalance(v *float64) *CardUpdate {
	if v != nil {
		_u.SetBalance(*v)
	}
	return _u
}

// AddBalance adds value to the "balance" field.
func (_u *CardUpdate) AddBalance(v float64) *CardUpdate {
	_u.mutation.AddBalance(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CardUpdate) SetName(v string) *CardUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CardUpdate) SetNillableName(v *string) *CardUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *CardUpdate) ClearName() *CardUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *CardUpdate) SetOwnerID(id string) *CardUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *CardUpdate) SetNillableOwnerID(id *string) *CardUpdate {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *CardUpdate) SetOwner(v *User) *CardUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddSpecIDs adds the "spec" edge to the Spec entity by IDs.
func (_u *CardUpdate) AddSpecIDs(ids ...string) *CardUpdate {
	_u.mutation.AddSpecIDs(ids...)
	return _u
}

// AddSpec adds the "spec" edges to the Spec entity.
func (_u *CardUpdate) AddSpec(v ...*Spec) *CardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSpecIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (_u *CardUpdate) Mutation() *CardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *CardUpdate) ClearOwner() *CardUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearSpec clears all "spec" edges to the Spec entity.
func (_u *CardUpdate) ClearSpec() *CardUpdate {
	_u.mutation.ClearSpec()
	return _u
}

// RemoveSpecIDs removes the "spec" edge to Spec entities by IDs.
func (_u *CardUpdate) RemoveSpecIDs(ids ...string) *CardUpdate {
	_u.mutation.RemoveSpecIDs(ids...)
	return _u
}

// RemoveSpec removes "spec" edges to Spec entities.
func (_u *CardUpdate) RemoveSpec(v ...*Spec) *CardUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSpecIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CardUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CardUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CardUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CardUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CardUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := card.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Card.name": %w`, err)}
		}
	}
	return nil
}

func (_u *CardUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := _u.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := _u.gremlin().Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	_u.mutation.done = true
	return res.ReadInt()
}

func (_u *CardUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(card.Label)
	for _, p := range _u.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.UpdateTime(); ok {
		v.Property(dsl.Single, card.FieldUpdateTime, value)
	}
	if value, ok := _u.mutation.Balance(); ok {
		v.Property(dsl.Single, card.FieldBalance, value)
	}
	if value, ok := _u.mutation.AddedBalance(); ok {
		v.Property(dsl.Single, card.FieldBalance, __.Union(__.Values(card.FieldBalance), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Name(); ok {
		v.Property(dsl.Single, card.FieldName, value)
	}
	var properties []any
	if _u.mutation.NameCleared() {
		properties = append(properties, card.FieldName)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if _u.mutation.OwnerCleared() {
		tr := rv.Clone().InE(user.CardLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.OwnerIDs() {
		v.AddE(user.CardLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.CardLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(card.Label, user.CardLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedSpecIDs() {
		tr := rv.Clone().InE(spec.CardLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.SpecIDs() {
		v.AddE(spec.CardLabel).From(g.V(id)).InV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *CardUpdateOne) SetUpdateTime(v time.Time) *CardUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetBalance sets the "balance" field.
func (_u *CardUpdateOne) SetBalance(v float64) *CardUpdateOne {
	_u.mutation.ResetBalance()
	_u.mutation.SetBalance(v)
	return _u
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (_u *CardUpdateOne) SetNillableBalance(v *float64) *CardUpdateOne {
	if v != nil {
		_u.SetBalance(*v)
	}
	return _u
}

// AddBalance adds value to the "balance" field.
func (_u *CardUpdateOne) AddBalance(v float64) *CardUpdateOne {
	_u.mutation.AddBalance(v)
	return _u
}

// SetName sets the "name" field.
func (_u *CardUpdateOne) SetName(v string) *CardUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CardUpdateOne) SetNillableName(v *string) *CardUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *CardUpdateOne) ClearName() *CardUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *CardUpdateOne) SetOwnerID(id string) *CardUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *CardUpdateOne) SetNillableOwnerID(id *string) *CardUpdateOne {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *CardUpdateOne) SetOwner(v *User) *CardUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddSpecIDs adds the "spec" edge to the Spec entity by IDs.
func (_u *CardUpdateOne) AddSpecIDs(ids ...string) *CardUpdateOne {
	_u.mutation.AddSpecIDs(ids...)
	return _u
}

// AddSpec adds the "spec" edges to the Spec entity.
func (_u *CardUpdateOne) AddSpec(v ...*Spec) *CardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSpecIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (_u *CardUpdateOne) Mutation() *CardMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *CardUpdateOne) ClearOwner() *CardUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearSpec clears all "spec" edges to the Spec entity.
func (_u *CardUpdateOne) ClearSpec() *CardUpdateOne {
	_u.mutation.ClearSpec()
	return _u
}

// RemoveSpecIDs removes the "spec" edge to Spec entities by IDs.
func (_u *CardUpdateOne) RemoveSpecIDs(ids ...string) *CardUpdateOne {
	_u.mutation.RemoveSpecIDs(ids...)
	return _u
}

// RemoveSpec removes "spec" edges to Spec entities.
func (_u *CardUpdateOne) RemoveSpec(v ...*Spec) *CardUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSpecIDs(ids...)
}

// Where appends a list predicates to the CardUpdate builder.
func (_u *CardUpdateOne) Where(ps ...predicate.Card) *CardUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Card entity.
func (_u *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	_u.defaults()
	return withHooks(ctx, _u.gremlinSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CardUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *CardUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CardUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := card.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Card.name": %w`, err)}
		}
	}
	return nil
}

func (_u *CardUpdateOne) gremlinSave(ctx context.Context) (*Card, error) {
	if err := _u.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	query, bindings := _u.gremlin(id).Query()
	if err := _u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	_u.mutation.done = true
	_m := &Card{config: _u.config}
	if err := _m.FromResponse(res); err != nil {
		return nil, err
	}
	return _m, nil
}

func (_u *CardUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := _u.mutation.UpdateTime(); ok {
		v.Property(dsl.Single, card.FieldUpdateTime, value)
	}
	if value, ok := _u.mutation.Balance(); ok {
		v.Property(dsl.Single, card.FieldBalance, value)
	}
	if value, ok := _u.mutation.AddedBalance(); ok {
		v.Property(dsl.Single, card.FieldBalance, __.Union(__.Values(card.FieldBalance), __.Constant(value)).Sum())
	}
	if value, ok := _u.mutation.Name(); ok {
		v.Property(dsl.Single, card.FieldName, value)
	}
	var properties []any
	if _u.mutation.NameCleared() {
		properties = append(properties, card.FieldName)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if _u.mutation.OwnerCleared() {
		tr := rv.Clone().InE(user.CardLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.OwnerIDs() {
		v.AddE(user.CardLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.CardLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(card.Label, user.CardLabel, id)),
		})
	}
	for _, id := range _u.mutation.RemovedSpecIDs() {
		tr := rv.Clone().InE(spec.CardLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range _u.mutation.SpecIDs() {
		v.AddE(spec.CardLabel).From(g.V(id)).InV()
	}
	if len(_u.fields) > 0 {
		fields := make([]any, 0, len(_u.fields)+1)
		fields = append(fields, true)
		for _, f := range _u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
