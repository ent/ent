// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/gremlin"
	"github.com/facebookincubator/ent/dialect/gremlin/graph/dsl"
	"github.com/facebookincubator/ent/dialect/gremlin/graph/dsl/__"
	"github.com/facebookincubator/ent/dialect/gremlin/graph/dsl/g"
	"github.com/facebookincubator/ent/entc/integration/gremlin/ent/predicate"
	"github.com/facebookincubator/ent/entc/integration/gremlin/ent/spec"
)

// SpecUpdate is the builder for updating Spec entities.
type SpecUpdate struct {
	config
	card        map[string]struct{}
	removedCard map[string]struct{}
	predicates  []predicate.Spec
}

// Where adds a new predicate for the builder.
func (su *SpecUpdate) Where(ps ...predicate.Spec) *SpecUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// AddCardIDs adds the card edge to Card by ids.
func (su *SpecUpdate) AddCardIDs(ids ...string) *SpecUpdate {
	if su.card == nil {
		su.card = make(map[string]struct{})
	}
	for i := range ids {
		su.card[ids[i]] = struct{}{}
	}
	return su
}

// AddCard adds the card edges to Card.
func (su *SpecUpdate) AddCard(c ...*Card) *SpecUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCardIDs(ids...)
}

// RemoveCardIDs removes the card edge to Card by ids.
func (su *SpecUpdate) RemoveCardIDs(ids ...string) *SpecUpdate {
	if su.removedCard == nil {
		su.removedCard = make(map[string]struct{})
	}
	for i := range ids {
		su.removedCard[ids[i]] = struct{}{}
	}
	return su
}

// RemoveCard removes card edges to Card.
func (su *SpecUpdate) RemoveCard(c ...*Card) *SpecUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCardIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SpecUpdate) Save(ctx context.Context) (int, error) {
	return su.gremlinSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpecUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpecUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpecUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpecUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := su.gremlin().Query()
	if err := su.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (su *SpecUpdate) gremlin() *dsl.Traversal {
	v := g.V().HasLabel(spec.Label)
	for _, p := range su.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	for id := range su.removedCard {
		tr := rv.Clone().OutE(spec.CardLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for id := range su.card {
		v.AddE(spec.CardLabel).To(g.V(id)).OutV()
	}
	v.Count()
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// SpecUpdateOne is the builder for updating a single Spec entity.
type SpecUpdateOne struct {
	config
	id          string
	card        map[string]struct{}
	removedCard map[string]struct{}
}

// AddCardIDs adds the card edge to Card by ids.
func (suo *SpecUpdateOne) AddCardIDs(ids ...string) *SpecUpdateOne {
	if suo.card == nil {
		suo.card = make(map[string]struct{})
	}
	for i := range ids {
		suo.card[ids[i]] = struct{}{}
	}
	return suo
}

// AddCard adds the card edges to Card.
func (suo *SpecUpdateOne) AddCard(c ...*Card) *SpecUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCardIDs(ids...)
}

// RemoveCardIDs removes the card edge to Card by ids.
func (suo *SpecUpdateOne) RemoveCardIDs(ids ...string) *SpecUpdateOne {
	if suo.removedCard == nil {
		suo.removedCard = make(map[string]struct{})
	}
	for i := range ids {
		suo.removedCard[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveCard removes card edges to Card.
func (suo *SpecUpdateOne) RemoveCard(c ...*Card) *SpecUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCardIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SpecUpdateOne) Save(ctx context.Context) (*Spec, error) {
	return suo.gremlinSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpecUpdateOne) SaveX(ctx context.Context) *Spec {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SpecUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpecUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpecUpdateOne) gremlinSave(ctx context.Context) (*Spec, error) {
	res := &gremlin.Response{}
	query, bindings := suo.gremlin(suo.id).Query()
	if err := suo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	s := &Spec{config: suo.config}
	if err := s.FromResponse(res); err != nil {
		return nil, err
	}
	return s, nil
}

func (suo *SpecUpdateOne) gremlin(id string) *dsl.Traversal {
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	for id := range suo.removedCard {
		tr := rv.Clone().OutE(spec.CardLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for id := range suo.card {
		v.AddE(spec.CardLabel).To(g.V(id)).OutV()
	}
	v.ValueMap(true)
	trs = append(trs, v)
	return dsl.Join(trs...)
}
