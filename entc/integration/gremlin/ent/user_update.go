// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"entgo.io/ent/entc/integration/gremlin/ent/predicate"
	"entgo.io/ent/entc/integration/gremlin/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	u.mutation.Where(ps...)
	return u
}

// SetOptionalInt sets the "optional_int" field.
func (m *UserUpdate) SetOptionalInt(v int) *UserUpdate {
	m.mutation.ResetOptionalInt()
	m.mutation.SetOptionalInt(v)
	return m
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (m *UserUpdate) SetNillableOptionalInt(v *int) *UserUpdate {
	if v != nil {
		m.SetOptionalInt(*v)
	}
	return m
}

// AddOptionalInt adds value to the "optional_int" field.
func (m *UserUpdate) AddOptionalInt(v int) *UserUpdate {
	m.mutation.AddOptionalInt(v)
	return m
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (m *UserUpdate) ClearOptionalInt() *UserUpdate {
	m.mutation.ClearOptionalInt()
	return m
}

// SetAge sets the "age" field.
func (m *UserUpdate) SetAge(v int) *UserUpdate {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdate) AddAge(v int) *UserUpdate {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdate) SetName(v string) *UserUpdate {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetLast sets the "last" field.
func (m *UserUpdate) SetLast(v string) *UserUpdate {
	m.mutation.SetLast(v)
	return m
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (m *UserUpdate) SetNillableLast(v *string) *UserUpdate {
	if v != nil {
		m.SetLast(*v)
	}
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdate) SetNickname(v string) *UserUpdate {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// ClearNickname clears the value of the "nickname" field.
func (m *UserUpdate) ClearNickname() *UserUpdate {
	m.mutation.ClearNickname()
	return m
}

// SetAddress sets the "address" field.
func (m *UserUpdate) SetAddress(v string) *UserUpdate {
	m.mutation.SetAddress(v)
	return m
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (m *UserUpdate) SetNillableAddress(v *string) *UserUpdate {
	if v != nil {
		m.SetAddress(*v)
	}
	return m
}

// ClearAddress clears the value of the "address" field.
func (m *UserUpdate) ClearAddress() *UserUpdate {
	m.mutation.ClearAddress()
	return m
}

// SetPhone sets the "phone" field.
func (m *UserUpdate) SetPhone(v string) *UserUpdate {
	m.mutation.SetPhone(v)
	return m
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (m *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		m.SetPhone(*v)
	}
	return m
}

// ClearPhone clears the value of the "phone" field.
func (m *UserUpdate) ClearPhone() *UserUpdate {
	m.mutation.ClearPhone()
	return m
}

// SetPassword sets the "password" field.
func (m *UserUpdate) SetPassword(v string) *UserUpdate {
	m.mutation.SetPassword(v)
	return m
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (m *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		m.SetPassword(*v)
	}
	return m
}

// ClearPassword clears the value of the "password" field.
func (m *UserUpdate) ClearPassword() *UserUpdate {
	m.mutation.ClearPassword()
	return m
}

// SetRole sets the "role" field.
func (m *UserUpdate) SetRole(v user.Role) *UserUpdate {
	m.mutation.SetRole(v)
	return m
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (m *UserUpdate) SetNillableRole(v *user.Role) *UserUpdate {
	if v != nil {
		m.SetRole(*v)
	}
	return m
}

// SetEmployment sets the "employment" field.
func (m *UserUpdate) SetEmployment(v user.Employment) *UserUpdate {
	m.mutation.SetEmployment(v)
	return m
}

// SetNillableEmployment sets the "employment" field if the given value is not nil.
func (m *UserUpdate) SetNillableEmployment(v *user.Employment) *UserUpdate {
	if v != nil {
		m.SetEmployment(*v)
	}
	return m
}

// SetSSOCert sets the "SSOCert" field.
func (m *UserUpdate) SetSSOCert(v string) *UserUpdate {
	m.mutation.SetSSOCert(v)
	return m
}

// SetNillableSSOCert sets the "SSOCert" field if the given value is not nil.
func (m *UserUpdate) SetNillableSSOCert(v *string) *UserUpdate {
	if v != nil {
		m.SetSSOCert(*v)
	}
	return m
}

// ClearSSOCert clears the value of the "SSOCert" field.
func (m *UserUpdate) ClearSSOCert() *UserUpdate {
	m.mutation.ClearSSOCert()
	return m
}

// SetFilesCount sets the "files_count" field.
func (m *UserUpdate) SetFilesCount(v int) *UserUpdate {
	m.mutation.ResetFilesCount()
	m.mutation.SetFilesCount(v)
	return m
}

// SetNillableFilesCount sets the "files_count" field if the given value is not nil.
func (m *UserUpdate) SetNillableFilesCount(v *int) *UserUpdate {
	if v != nil {
		m.SetFilesCount(*v)
	}
	return m
}

// AddFilesCount adds value to the "files_count" field.
func (m *UserUpdate) AddFilesCount(v int) *UserUpdate {
	m.mutation.AddFilesCount(v)
	return m
}

// ClearFilesCount clears the value of the "files_count" field.
func (m *UserUpdate) ClearFilesCount() *UserUpdate {
	m.mutation.ClearFilesCount()
	return m
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (m *UserUpdate) SetCardID(id string) *UserUpdate {
	m.mutation.SetCardID(id)
	return m
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableCardID(id *string) *UserUpdate {
	if id != nil {
		m = m.SetCardID(*id)
	}
	return m
}

// SetCard sets the "card" edge to the Card entity.
func (m *UserUpdate) SetCard(v *Card) *UserUpdate {
	return m.SetCardID(v.ID)
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (m *UserUpdate) AddPetIDs(ids ...string) *UserUpdate {
	m.mutation.AddPetIDs(ids...)
	return m
}

// AddPets adds the "pets" edges to the Pet entity.
func (m *UserUpdate) AddPets(v ...*Pet) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddPetIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (m *UserUpdate) AddFileIDs(ids ...string) *UserUpdate {
	m.mutation.AddFileIDs(ids...)
	return m
}

// AddFiles adds the "files" edges to the File entity.
func (m *UserUpdate) AddFiles(v ...*File) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFileIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (m *UserUpdate) AddGroupIDs(ids ...string) *UserUpdate {
	m.mutation.AddGroupIDs(ids...)
	return m
}

// AddGroups adds the "groups" edges to the Group entity.
func (m *UserUpdate) AddGroups(v ...*Group) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (m *UserUpdate) AddFriendIDs(ids ...string) *UserUpdate {
	m.mutation.AddFriendIDs(ids...)
	return m
}

// AddFriends adds the "friends" edges to the User entity.
func (m *UserUpdate) AddFriends(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFriendIDs(ids...)
}

// AddFollowerIDs adds the "followers" edge to the User entity by IDs.
func (m *UserUpdate) AddFollowerIDs(ids ...string) *UserUpdate {
	m.mutation.AddFollowerIDs(ids...)
	return m
}

// AddFollowers adds the "followers" edges to the User entity.
func (m *UserUpdate) AddFollowers(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the User entity by IDs.
func (m *UserUpdate) AddFollowingIDs(ids ...string) *UserUpdate {
	m.mutation.AddFollowingIDs(ids...)
	return m
}

// AddFollowing adds the "following" edges to the User entity.
func (m *UserUpdate) AddFollowing(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFollowingIDs(ids...)
}

// SetTeamID sets the "team" edge to the Pet entity by ID.
func (m *UserUpdate) SetTeamID(id string) *UserUpdate {
	m.mutation.SetTeamID(id)
	return m
}

// SetNillableTeamID sets the "team" edge to the Pet entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableTeamID(id *string) *UserUpdate {
	if id != nil {
		m = m.SetTeamID(*id)
	}
	return m
}

// SetTeam sets the "team" edge to the Pet entity.
func (m *UserUpdate) SetTeam(v *Pet) *UserUpdate {
	return m.SetTeamID(v.ID)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (m *UserUpdate) SetSpouseID(id string) *UserUpdate {
	m.mutation.SetSpouseID(id)
	return m
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableSpouseID(id *string) *UserUpdate {
	if id != nil {
		m = m.SetSpouseID(*id)
	}
	return m
}

// SetSpouse sets the "spouse" edge to the User entity.
func (m *UserUpdate) SetSpouse(v *User) *UserUpdate {
	return m.SetSpouseID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (m *UserUpdate) AddChildIDs(ids ...string) *UserUpdate {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the User entity.
func (m *UserUpdate) AddChildren(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (m *UserUpdate) SetParentID(id string) *UserUpdate {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdate) SetNillableParentID(id *string) *UserUpdate {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the User entity.
func (m *UserUpdate) SetParent(v *User) *UserUpdate {
	return m.SetParentID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdate) Mutation() *UserMutation {
	return m.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (u *UserUpdate) ClearCard() *UserUpdate {
	u.mutation.ClearCard()
	return u
}

// ClearPets clears all "pets" edges to the Pet entity.
func (u *UserUpdate) ClearPets() *UserUpdate {
	u.mutation.ClearPets()
	return u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (u *UserUpdate) RemovePetIDs(ids ...string) *UserUpdate {
	u.mutation.RemovePetIDs(ids...)
	return u
}

// RemovePets removes "pets" edges to Pet entities.
func (u *UserUpdate) RemovePets(v ...*Pet) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemovePetIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (u *UserUpdate) ClearFiles() *UserUpdate {
	u.mutation.ClearFiles()
	return u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (u *UserUpdate) RemoveFileIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveFileIDs(ids...)
	return u
}

// RemoveFiles removes "files" edges to File entities.
func (u *UserUpdate) RemoveFiles(v ...*File) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFileIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (u *UserUpdate) ClearGroups() *UserUpdate {
	u.mutation.ClearGroups()
	return u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (u *UserUpdate) RemoveGroupIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveGroupIDs(ids...)
	return u
}

// RemoveGroups removes "groups" edges to Group entities.
func (u *UserUpdate) RemoveGroups(v ...*Group) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (u *UserUpdate) ClearFriends() *UserUpdate {
	u.mutation.ClearFriends()
	return u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (u *UserUpdate) RemoveFriendIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveFriendIDs(ids...)
	return u
}

// RemoveFriends removes "friends" edges to User entities.
func (u *UserUpdate) RemoveFriends(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFriendIDs(ids...)
}

// ClearFollowers clears all "followers" edges to the User entity.
func (u *UserUpdate) ClearFollowers() *UserUpdate {
	u.mutation.ClearFollowers()
	return u
}

// RemoveFollowerIDs removes the "followers" edge to User entities by IDs.
func (u *UserUpdate) RemoveFollowerIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveFollowerIDs(ids...)
	return u
}

// RemoveFollowers removes "followers" edges to User entities.
func (u *UserUpdate) RemoveFollowers(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFollowerIDs(ids...)
}

// ClearFollowing clears all "following" edges to the User entity.
func (u *UserUpdate) ClearFollowing() *UserUpdate {
	u.mutation.ClearFollowing()
	return u
}

// RemoveFollowingIDs removes the "following" edge to User entities by IDs.
func (u *UserUpdate) RemoveFollowingIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveFollowingIDs(ids...)
	return u
}

// RemoveFollowing removes "following" edges to User entities.
func (u *UserUpdate) RemoveFollowing(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFollowingIDs(ids...)
}

// ClearTeam clears the "team" edge to the Pet entity.
func (u *UserUpdate) ClearTeam() *UserUpdate {
	u.mutation.ClearTeam()
	return u
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (u *UserUpdate) ClearSpouse() *UserUpdate {
	u.mutation.ClearSpouse()
	return u
}

// ClearChildren clears all "children" edges to the User entity.
func (u *UserUpdate) ClearChildren() *UserUpdate {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (u *UserUpdate) RemoveChildIDs(ids ...string) *UserUpdate {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to User entities.
func (u *UserUpdate) RemoveChildren(v ...*User) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the User entity.
func (u *UserUpdate) ClearParent() *UserUpdate {
	u.mutation.ClearParent()
	return u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (u *UserUpdate) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdate) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdate) check() error {
	if v, ok := u.mutation.OptionalInt(); ok {
		if err := user.OptionalIntValidator(v); err != nil {
			return &ValidationError{Name: "optional_int", err: fmt.Errorf(`ent: validator failed for field "User.optional_int": %w`, err)}
		}
	}
	if v, ok := u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := u.mutation.Employment(); ok {
		if err := user.EmploymentValidator(v); err != nil {
			return &ValidationError{Name: "employment", err: fmt.Errorf(`ent: validator failed for field "User.employment": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdate) gremlinSave(ctx context.Context) (int, error) {
	if err := u.check(); err != nil {
		return 0, err
	}
	res := &gremlin.Response{}
	query, bindings := u.gremlin().Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	u.mutation.done = true
	return res.ReadInt()
}

func (u *UserUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 8)
	v := g.V().HasLabel(user.Label)
	for _, p := range u.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.OptionalInt(); ok {
		v.Property(dsl.Single, user.FieldOptionalInt, value)
	}
	if value, ok := u.mutation.AddedOptionalInt(); ok {
		v.Property(dsl.Single, user.FieldOptionalInt, __.Union(__.Values(user.FieldOptionalInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Age(); ok {
		v.Property(dsl.Single, user.FieldAge, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		v.Property(dsl.Single, user.FieldAge, __.Union(__.Values(user.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Name(); ok {
		v.Property(dsl.Single, user.FieldName, value)
	}
	if value, ok := u.mutation.Last(); ok {
		v.Property(dsl.Single, user.FieldLast, value)
	}
	if value, ok := u.mutation.Nickname(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(user.Label, user.FieldNickname, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(user.Label, user.FieldNickname, value)),
		})
		v.Property(dsl.Single, user.FieldNickname, value)
	}
	if value, ok := u.mutation.Address(); ok {
		v.Property(dsl.Single, user.FieldAddress, value)
	}
	if value, ok := u.mutation.Phone(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(user.Label, user.FieldPhone, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(user.Label, user.FieldPhone, value)),
		})
		v.Property(dsl.Single, user.FieldPhone, value)
	}
	if value, ok := u.mutation.Password(); ok {
		v.Property(dsl.Single, user.FieldPassword, value)
	}
	if value, ok := u.mutation.Role(); ok {
		v.Property(dsl.Single, user.FieldRole, value)
	}
	if value, ok := u.mutation.Employment(); ok {
		v.Property(dsl.Single, user.FieldEmployment, value)
	}
	if value, ok := u.mutation.SSOCert(); ok {
		v.Property(dsl.Single, user.FieldSSOCert, value)
	}
	if value, ok := u.mutation.FilesCount(); ok {
		v.Property(dsl.Single, user.FieldFilesCount, value)
	}
	if value, ok := u.mutation.AddedFilesCount(); ok {
		v.Property(dsl.Single, user.FieldFilesCount, __.Union(__.Values(user.FieldFilesCount), __.Constant(value)).Sum())
	}
	var properties []any
	if u.mutation.OptionalIntCleared() {
		properties = append(properties, user.FieldOptionalInt)
	}
	if u.mutation.NicknameCleared() {
		properties = append(properties, user.FieldNickname)
	}
	if u.mutation.AddressCleared() {
		properties = append(properties, user.FieldAddress)
	}
	if u.mutation.PhoneCleared() {
		properties = append(properties, user.FieldPhone)
	}
	if u.mutation.PasswordCleared() {
		properties = append(properties, user.FieldPassword)
	}
	if u.mutation.SSOCertCleared() {
		properties = append(properties, user.FieldSSOCert)
	}
	if u.mutation.FilesCountCleared() {
		properties = append(properties, user.FieldFilesCount)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if u.mutation.CardCleared() {
		tr := rv.Clone().OutE(user.CardLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.CardIDs() {
		v.AddE(user.CardLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.CardLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.CardLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedPetsIDs() {
		tr := rv.Clone().OutE(user.PetsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.PetsIDs() {
		v.AddE(user.PetsLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.PetsLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.PetsLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedFilesIDs() {
		tr := rv.Clone().OutE(user.FilesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FilesIDs() {
		v.AddE(user.FilesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.FilesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.FilesLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedGroupsIDs() {
		tr := rv.Clone().OutE(user.GroupsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.GroupsIDs() {
		v.AddE(user.GroupsLabel).To(g.V(id)).OutV()
	}
	for _, id := range u.mutation.RemovedFriendsIDs() {
		tr := rv.Clone().BothE(user.FriendsLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FriendsIDs() {
		v.AddE(user.FriendsLabel).To(g.V(id)).OutV()
	}
	for _, id := range u.mutation.RemovedFollowersIDs() {
		tr := rv.Clone().InE(user.FollowingLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FollowersIDs() {
		v.AddE(user.FollowingLabel).From(g.V(id)).InV()
	}
	for _, id := range u.mutation.RemovedFollowingIDs() {
		tr := rv.Clone().OutE(user.FollowingLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FollowingIDs() {
		v.AddE(user.FollowingLabel).To(g.V(id)).OutV()
	}
	if u.mutation.TeamCleared() {
		tr := rv.Clone().OutE(user.TeamLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.TeamIDs() {
		v.AddE(user.TeamLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.TeamLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.TeamLabel, id)),
		})
	}
	if u.mutation.SpouseCleared() {
		tr := rv.Clone().BothE(user.SpouseLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.SpouseIDs() {
		v.AddE(user.SpouseLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: rv.Clone().Both(user.SpouseLabel).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.SpouseLabel, id)),
		})
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.SpouseLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.SpouseLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedChildrenIDs() {
		tr := rv.Clone().InE(user.ParentLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.ChildrenIDs() {
		v.AddE(user.ParentLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.ParentLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.ParentLabel, id)),
		})
	}
	if u.mutation.ParentCleared() {
		tr := rv.Clone().OutE(user.ParentLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.ParentIDs() {
		v.AddE(user.ParentLabel).To(g.V(id)).OutV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetOptionalInt sets the "optional_int" field.
func (m *UserUpdateOne) SetOptionalInt(v int) *UserUpdateOne {
	m.mutation.ResetOptionalInt()
	m.mutation.SetOptionalInt(v)
	return m
}

// SetNillableOptionalInt sets the "optional_int" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableOptionalInt(v *int) *UserUpdateOne {
	if v != nil {
		m.SetOptionalInt(*v)
	}
	return m
}

// AddOptionalInt adds value to the "optional_int" field.
func (m *UserUpdateOne) AddOptionalInt(v int) *UserUpdateOne {
	m.mutation.AddOptionalInt(v)
	return m
}

// ClearOptionalInt clears the value of the "optional_int" field.
func (m *UserUpdateOne) ClearOptionalInt() *UserUpdateOne {
	m.mutation.ClearOptionalInt()
	return m
}

// SetAge sets the "age" field.
func (m *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	m.mutation.ResetAge()
	m.mutation.SetAge(v)
	return m
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		m.SetAge(*v)
	}
	return m
}

// AddAge adds value to the "age" field.
func (m *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	m.mutation.AddAge(v)
	return m
}

// SetName sets the "name" field.
func (m *UserUpdateOne) SetName(v string) *UserUpdateOne {
	m.mutation.SetName(v)
	return m
}

// SetNillableName sets the "name" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		m.SetName(*v)
	}
	return m
}

// SetLast sets the "last" field.
func (m *UserUpdateOne) SetLast(v string) *UserUpdateOne {
	m.mutation.SetLast(v)
	return m
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableLast(v *string) *UserUpdateOne {
	if v != nil {
		m.SetLast(*v)
	}
	return m
}

// SetNickname sets the "nickname" field.
func (m *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	m.mutation.SetNickname(v)
	return m
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		m.SetNickname(*v)
	}
	return m
}

// ClearNickname clears the value of the "nickname" field.
func (m *UserUpdateOne) ClearNickname() *UserUpdateOne {
	m.mutation.ClearNickname()
	return m
}

// SetAddress sets the "address" field.
func (m *UserUpdateOne) SetAddress(v string) *UserUpdateOne {
	m.mutation.SetAddress(v)
	return m
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableAddress(v *string) *UserUpdateOne {
	if v != nil {
		m.SetAddress(*v)
	}
	return m
}

// ClearAddress clears the value of the "address" field.
func (m *UserUpdateOne) ClearAddress() *UserUpdateOne {
	m.mutation.ClearAddress()
	return m
}

// SetPhone sets the "phone" field.
func (m *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	m.mutation.SetPhone(v)
	return m
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (m *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		m.SetPhone(*v)
	}
	return m
}

// ClearPhone clears the value of the "phone" field.
func (m *UserUpdateOne) ClearPhone() *UserUpdateOne {
	m.mutation.ClearPhone()
	return m
}

// SetPassword sets the "password" field.
func (m *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	m.mutation.SetPassword(v)
	return m
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (m *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		m.SetPassword(*v)
	}
	return m
}

// ClearPassword clears the value of the "password" field.
func (m *UserUpdateOne) ClearPassword() *UserUpdateOne {
	m.mutation.ClearPassword()
	return m
}

// SetRole sets the "role" field.
func (m *UserUpdateOne) SetRole(v user.Role) *UserUpdateOne {
	m.mutation.SetRole(v)
	return m
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableRole(v *user.Role) *UserUpdateOne {
	if v != nil {
		m.SetRole(*v)
	}
	return m
}

// SetEmployment sets the "employment" field.
func (m *UserUpdateOne) SetEmployment(v user.Employment) *UserUpdateOne {
	m.mutation.SetEmployment(v)
	return m
}

// SetNillableEmployment sets the "employment" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableEmployment(v *user.Employment) *UserUpdateOne {
	if v != nil {
		m.SetEmployment(*v)
	}
	return m
}

// SetSSOCert sets the "SSOCert" field.
func (m *UserUpdateOne) SetSSOCert(v string) *UserUpdateOne {
	m.mutation.SetSSOCert(v)
	return m
}

// SetNillableSSOCert sets the "SSOCert" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableSSOCert(v *string) *UserUpdateOne {
	if v != nil {
		m.SetSSOCert(*v)
	}
	return m
}

// ClearSSOCert clears the value of the "SSOCert" field.
func (m *UserUpdateOne) ClearSSOCert() *UserUpdateOne {
	m.mutation.ClearSSOCert()
	return m
}

// SetFilesCount sets the "files_count" field.
func (m *UserUpdateOne) SetFilesCount(v int) *UserUpdateOne {
	m.mutation.ResetFilesCount()
	m.mutation.SetFilesCount(v)
	return m
}

// SetNillableFilesCount sets the "files_count" field if the given value is not nil.
func (m *UserUpdateOne) SetNillableFilesCount(v *int) *UserUpdateOne {
	if v != nil {
		m.SetFilesCount(*v)
	}
	return m
}

// AddFilesCount adds value to the "files_count" field.
func (m *UserUpdateOne) AddFilesCount(v int) *UserUpdateOne {
	m.mutation.AddFilesCount(v)
	return m
}

// ClearFilesCount clears the value of the "files_count" field.
func (m *UserUpdateOne) ClearFilesCount() *UserUpdateOne {
	m.mutation.ClearFilesCount()
	return m
}

// SetCardID sets the "card" edge to the Card entity by ID.
func (m *UserUpdateOne) SetCardID(id string) *UserUpdateOne {
	m.mutation.SetCardID(id)
	return m
}

// SetNillableCardID sets the "card" edge to the Card entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableCardID(id *string) *UserUpdateOne {
	if id != nil {
		m = m.SetCardID(*id)
	}
	return m
}

// SetCard sets the "card" edge to the Card entity.
func (m *UserUpdateOne) SetCard(v *Card) *UserUpdateOne {
	return m.SetCardID(v.ID)
}

// AddPetIDs adds the "pets" edge to the Pet entity by IDs.
func (m *UserUpdateOne) AddPetIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddPetIDs(ids...)
	return m
}

// AddPets adds the "pets" edges to the Pet entity.
func (m *UserUpdateOne) AddPets(v ...*Pet) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddPetIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (m *UserUpdateOne) AddFileIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddFileIDs(ids...)
	return m
}

// AddFiles adds the "files" edges to the File entity.
func (m *UserUpdateOne) AddFiles(v ...*File) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFileIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (m *UserUpdateOne) AddGroupIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddGroupIDs(ids...)
	return m
}

// AddGroups adds the "groups" edges to the Group entity.
func (m *UserUpdateOne) AddGroups(v ...*Group) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddGroupIDs(ids...)
}

// AddFriendIDs adds the "friends" edge to the User entity by IDs.
func (m *UserUpdateOne) AddFriendIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddFriendIDs(ids...)
	return m
}

// AddFriends adds the "friends" edges to the User entity.
func (m *UserUpdateOne) AddFriends(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFriendIDs(ids...)
}

// AddFollowerIDs adds the "followers" edge to the User entity by IDs.
func (m *UserUpdateOne) AddFollowerIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddFollowerIDs(ids...)
	return m
}

// AddFollowers adds the "followers" edges to the User entity.
func (m *UserUpdateOne) AddFollowers(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the User entity by IDs.
func (m *UserUpdateOne) AddFollowingIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddFollowingIDs(ids...)
	return m
}

// AddFollowing adds the "following" edges to the User entity.
func (m *UserUpdateOne) AddFollowing(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddFollowingIDs(ids...)
}

// SetTeamID sets the "team" edge to the Pet entity by ID.
func (m *UserUpdateOne) SetTeamID(id string) *UserUpdateOne {
	m.mutation.SetTeamID(id)
	return m
}

// SetNillableTeamID sets the "team" edge to the Pet entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableTeamID(id *string) *UserUpdateOne {
	if id != nil {
		m = m.SetTeamID(*id)
	}
	return m
}

// SetTeam sets the "team" edge to the Pet entity.
func (m *UserUpdateOne) SetTeam(v *Pet) *UserUpdateOne {
	return m.SetTeamID(v.ID)
}

// SetSpouseID sets the "spouse" edge to the User entity by ID.
func (m *UserUpdateOne) SetSpouseID(id string) *UserUpdateOne {
	m.mutation.SetSpouseID(id)
	return m
}

// SetNillableSpouseID sets the "spouse" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableSpouseID(id *string) *UserUpdateOne {
	if id != nil {
		m = m.SetSpouseID(*id)
	}
	return m
}

// SetSpouse sets the "spouse" edge to the User entity.
func (m *UserUpdateOne) SetSpouse(v *User) *UserUpdateOne {
	return m.SetSpouseID(v.ID)
}

// AddChildIDs adds the "children" edge to the User entity by IDs.
func (m *UserUpdateOne) AddChildIDs(ids ...string) *UserUpdateOne {
	m.mutation.AddChildIDs(ids...)
	return m
}

// AddChildren adds the "children" edges to the User entity.
func (m *UserUpdateOne) AddChildren(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return m.AddChildIDs(ids...)
}

// SetParentID sets the "parent" edge to the User entity by ID.
func (m *UserUpdateOne) SetParentID(id string) *UserUpdateOne {
	m.mutation.SetParentID(id)
	return m
}

// SetNillableParentID sets the "parent" edge to the User entity by ID if the given value is not nil.
func (m *UserUpdateOne) SetNillableParentID(id *string) *UserUpdateOne {
	if id != nil {
		m = m.SetParentID(*id)
	}
	return m
}

// SetParent sets the "parent" edge to the User entity.
func (m *UserUpdateOne) SetParent(v *User) *UserUpdateOne {
	return m.SetParentID(v.ID)
}

// Mutation returns the UserMutation object of the builder.
func (m *UserUpdateOne) Mutation() *UserMutation {
	return m.mutation
}

// ClearCard clears the "card" edge to the Card entity.
func (u *UserUpdateOne) ClearCard() *UserUpdateOne {
	u.mutation.ClearCard()
	return u
}

// ClearPets clears all "pets" edges to the Pet entity.
func (u *UserUpdateOne) ClearPets() *UserUpdateOne {
	u.mutation.ClearPets()
	return u
}

// RemovePetIDs removes the "pets" edge to Pet entities by IDs.
func (u *UserUpdateOne) RemovePetIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemovePetIDs(ids...)
	return u
}

// RemovePets removes "pets" edges to Pet entities.
func (u *UserUpdateOne) RemovePets(v ...*Pet) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemovePetIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (u *UserUpdateOne) ClearFiles() *UserUpdateOne {
	u.mutation.ClearFiles()
	return u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (u *UserUpdateOne) RemoveFileIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveFileIDs(ids...)
	return u
}

// RemoveFiles removes "files" edges to File entities.
func (u *UserUpdateOne) RemoveFiles(v ...*File) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFileIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (u *UserUpdateOne) ClearGroups() *UserUpdateOne {
	u.mutation.ClearGroups()
	return u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (u *UserUpdateOne) RemoveGroupIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveGroupIDs(ids...)
	return u
}

// RemoveGroups removes "groups" edges to Group entities.
func (u *UserUpdateOne) RemoveGroups(v ...*Group) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveGroupIDs(ids...)
}

// ClearFriends clears all "friends" edges to the User entity.
func (u *UserUpdateOne) ClearFriends() *UserUpdateOne {
	u.mutation.ClearFriends()
	return u
}

// RemoveFriendIDs removes the "friends" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveFriendIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveFriendIDs(ids...)
	return u
}

// RemoveFriends removes "friends" edges to User entities.
func (u *UserUpdateOne) RemoveFriends(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFriendIDs(ids...)
}

// ClearFollowers clears all "followers" edges to the User entity.
func (u *UserUpdateOne) ClearFollowers() *UserUpdateOne {
	u.mutation.ClearFollowers()
	return u
}

// RemoveFollowerIDs removes the "followers" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveFollowerIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveFollowerIDs(ids...)
	return u
}

// RemoveFollowers removes "followers" edges to User entities.
func (u *UserUpdateOne) RemoveFollowers(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFollowerIDs(ids...)
}

// ClearFollowing clears all "following" edges to the User entity.
func (u *UserUpdateOne) ClearFollowing() *UserUpdateOne {
	u.mutation.ClearFollowing()
	return u
}

// RemoveFollowingIDs removes the "following" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveFollowingIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveFollowingIDs(ids...)
	return u
}

// RemoveFollowing removes "following" edges to User entities.
func (u *UserUpdateOne) RemoveFollowing(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveFollowingIDs(ids...)
}

// ClearTeam clears the "team" edge to the Pet entity.
func (u *UserUpdateOne) ClearTeam() *UserUpdateOne {
	u.mutation.ClearTeam()
	return u
}

// ClearSpouse clears the "spouse" edge to the User entity.
func (u *UserUpdateOne) ClearSpouse() *UserUpdateOne {
	u.mutation.ClearSpouse()
	return u
}

// ClearChildren clears all "children" edges to the User entity.
func (u *UserUpdateOne) ClearChildren() *UserUpdateOne {
	u.mutation.ClearChildren()
	return u
}

// RemoveChildIDs removes the "children" edge to User entities by IDs.
func (u *UserUpdateOne) RemoveChildIDs(ids ...string) *UserUpdateOne {
	u.mutation.RemoveChildIDs(ids...)
	return u
}

// RemoveChildren removes "children" edges to User entities.
func (u *UserUpdateOne) RemoveChildren(v ...*User) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return u.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the User entity.
func (u *UserUpdateOne) ClearParent() *UserUpdateOne {
	u.mutation.ClearParent()
	return u
}

// Where appends a list predicates to the UserUpdate builder.
func (u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	u.mutation.Where(ps...)
	return u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	u.fields = append([]string{field}, fields...)
	return u
}

// Save executes the query and returns the updated User entity.
func (u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, u.gremlinSave, u.mutation, u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (u *UserUpdateOne) check() error {
	if v, ok := u.mutation.OptionalInt(); ok {
		if err := user.OptionalIntValidator(v); err != nil {
			return &ValidationError{Name: "optional_int", err: fmt.Errorf(`ent: validator failed for field "User.optional_int": %w`, err)}
		}
	}
	if v, ok := u.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := u.mutation.Employment(); ok {
		if err := user.EmploymentValidator(v); err != nil {
			return &ValidationError{Name: "employment", err: fmt.Errorf(`ent: validator failed for field "User.employment": %w`, err)}
		}
	}
	return nil
}

func (u *UserUpdateOne) gremlinSave(ctx context.Context) (*User, error) {
	if err := u.check(); err != nil {
		return nil, err
	}
	res := &gremlin.Response{}
	id, ok := u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	query, bindings := u.gremlin(id).Query()
	if err := u.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	u.mutation.done = true
	m := &User{config: u.config}
	if err := m.FromResponse(res); err != nil {
		return nil, err
	}
	return m, nil
}

func (u *UserUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 8)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := u.mutation.OptionalInt(); ok {
		v.Property(dsl.Single, user.FieldOptionalInt, value)
	}
	if value, ok := u.mutation.AddedOptionalInt(); ok {
		v.Property(dsl.Single, user.FieldOptionalInt, __.Union(__.Values(user.FieldOptionalInt), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Age(); ok {
		v.Property(dsl.Single, user.FieldAge, value)
	}
	if value, ok := u.mutation.AddedAge(); ok {
		v.Property(dsl.Single, user.FieldAge, __.Union(__.Values(user.FieldAge), __.Constant(value)).Sum())
	}
	if value, ok := u.mutation.Name(); ok {
		v.Property(dsl.Single, user.FieldName, value)
	}
	if value, ok := u.mutation.Last(); ok {
		v.Property(dsl.Single, user.FieldLast, value)
	}
	if value, ok := u.mutation.Nickname(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(user.Label, user.FieldNickname, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(user.Label, user.FieldNickname, value)),
		})
		v.Property(dsl.Single, user.FieldNickname, value)
	}
	if value, ok := u.mutation.Address(); ok {
		v.Property(dsl.Single, user.FieldAddress, value)
	}
	if value, ok := u.mutation.Phone(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(user.Label, user.FieldPhone, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(user.Label, user.FieldPhone, value)),
		})
		v.Property(dsl.Single, user.FieldPhone, value)
	}
	if value, ok := u.mutation.Password(); ok {
		v.Property(dsl.Single, user.FieldPassword, value)
	}
	if value, ok := u.mutation.Role(); ok {
		v.Property(dsl.Single, user.FieldRole, value)
	}
	if value, ok := u.mutation.Employment(); ok {
		v.Property(dsl.Single, user.FieldEmployment, value)
	}
	if value, ok := u.mutation.SSOCert(); ok {
		v.Property(dsl.Single, user.FieldSSOCert, value)
	}
	if value, ok := u.mutation.FilesCount(); ok {
		v.Property(dsl.Single, user.FieldFilesCount, value)
	}
	if value, ok := u.mutation.AddedFilesCount(); ok {
		v.Property(dsl.Single, user.FieldFilesCount, __.Union(__.Values(user.FieldFilesCount), __.Constant(value)).Sum())
	}
	var properties []any
	if u.mutation.OptionalIntCleared() {
		properties = append(properties, user.FieldOptionalInt)
	}
	if u.mutation.NicknameCleared() {
		properties = append(properties, user.FieldNickname)
	}
	if u.mutation.AddressCleared() {
		properties = append(properties, user.FieldAddress)
	}
	if u.mutation.PhoneCleared() {
		properties = append(properties, user.FieldPhone)
	}
	if u.mutation.PasswordCleared() {
		properties = append(properties, user.FieldPassword)
	}
	if u.mutation.SSOCertCleared() {
		properties = append(properties, user.FieldSSOCert)
	}
	if u.mutation.FilesCountCleared() {
		properties = append(properties, user.FieldFilesCount)
	}
	if len(properties) > 0 {
		v.SideEffect(__.Properties(properties...).Drop())
	}
	if u.mutation.CardCleared() {
		tr := rv.Clone().OutE(user.CardLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.CardIDs() {
		v.AddE(user.CardLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.CardLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.CardLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedPetsIDs() {
		tr := rv.Clone().OutE(user.PetsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.PetsIDs() {
		v.AddE(user.PetsLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.PetsLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.PetsLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedFilesIDs() {
		tr := rv.Clone().OutE(user.FilesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FilesIDs() {
		v.AddE(user.FilesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.FilesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.FilesLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedGroupsIDs() {
		tr := rv.Clone().OutE(user.GroupsLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.GroupsIDs() {
		v.AddE(user.GroupsLabel).To(g.V(id)).OutV()
	}
	for _, id := range u.mutation.RemovedFriendsIDs() {
		tr := rv.Clone().BothE(user.FriendsLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FriendsIDs() {
		v.AddE(user.FriendsLabel).To(g.V(id)).OutV()
	}
	for _, id := range u.mutation.RemovedFollowersIDs() {
		tr := rv.Clone().InE(user.FollowingLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FollowersIDs() {
		v.AddE(user.FollowingLabel).From(g.V(id)).InV()
	}
	for _, id := range u.mutation.RemovedFollowingIDs() {
		tr := rv.Clone().OutE(user.FollowingLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.FollowingIDs() {
		v.AddE(user.FollowingLabel).To(g.V(id)).OutV()
	}
	if u.mutation.TeamCleared() {
		tr := rv.Clone().OutE(user.TeamLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.TeamIDs() {
		v.AddE(user.TeamLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.TeamLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.TeamLabel, id)),
		})
	}
	if u.mutation.SpouseCleared() {
		tr := rv.Clone().BothE(user.SpouseLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.SpouseIDs() {
		v.AddE(user.SpouseLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: rv.Clone().Both(user.SpouseLabel).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.SpouseLabel, id)),
		})
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.SpouseLabel).Where(__.Or(__.InV().HasID(id), __.OutV().HasID(id))).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.SpouseLabel, id)),
		})
	}
	for _, id := range u.mutation.RemovedChildrenIDs() {
		tr := rv.Clone().InE(user.ParentLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.ChildrenIDs() {
		v.AddE(user.ParentLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(user.ParentLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(user.Label, user.ParentLabel, id)),
		})
	}
	if u.mutation.ParentCleared() {
		tr := rv.Clone().OutE(user.ParentLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range u.mutation.ParentIDs() {
		v.AddE(user.ParentLabel).To(g.V(id)).OutV()
	}
	if len(u.fields) > 0 {
		fields := make([]any, 0, len(u.fields)+1)
		fields = append(fields, true)
		for _, f := range u.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}
